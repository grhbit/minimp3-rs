/* automatically generated by rust-bindgen 0.58.1 */

# [repr (C)] # [derive (Copy , Clone , Debug , Default , Eq , Hash , Ord , PartialEq , PartialOrd)] pub struct __BindgenBitfieldUnit < Storage > { storage : Storage , } impl < Storage > __BindgenBitfieldUnit < Storage > { # [inline] pub const fn new (storage : Storage) -> Self { Self { storage } } } impl < Storage > __BindgenBitfieldUnit < Storage > where Storage : AsRef < [u8] > + AsMut < [u8] >, { # [inline] pub fn get_bit (& self , index : usize) -> bool { debug_assert ! (index / 8 < self . storage . as_ref () . len ()) ; let byte_index = index / 8 ; let byte = self . storage . as_ref () [byte_index] ; let bit_index = if cfg ! (target_endian = "big") { 7 - (index % 8) } else { index % 8 } ; let mask = 1 << bit_index ; byte & mask == mask } # [inline] pub fn set_bit (& mut self , index : usize , val : bool) { debug_assert ! (index / 8 < self . storage . as_ref () . len ()) ; let byte_index = index / 8 ; let byte = & mut self . storage . as_mut () [byte_index] ; let bit_index = if cfg ! (target_endian = "big") { 7 - (index % 8) } else { index % 8 } ; let mask = 1 << bit_index ; if val { * byte |= mask ; } else { * byte &= ! mask ; } } # [inline] pub fn get (& self , bit_offset : usize , bit_width : u8) -> u64 { debug_assert ! (bit_width <= 64) ; debug_assert ! (bit_offset / 8 < self . storage . as_ref () . len ()) ; debug_assert ! ((bit_offset + (bit_width as usize)) / 8 <= self . storage . as_ref () . len ()) ; let mut val = 0 ; for i in 0 .. (bit_width as usize) { if self . get_bit (i + bit_offset) { let index = if cfg ! (target_endian = "big") { bit_width as usize - 1 - i } else { i } ; val |= 1 << index ; } } val } # [inline] pub fn set (& mut self , bit_offset : usize , bit_width : u8 , val : u64) { debug_assert ! (bit_width <= 64) ; debug_assert ! (bit_offset / 8 < self . storage . as_ref () . len ()) ; debug_assert ! ((bit_offset + (bit_width as usize)) / 8 <= self . storage . as_ref () . len ()) ; for i in 0 .. (bit_width as usize) { let mask = 1 << i ; let val_bit_is_set = val & mask == mask ; let index = if cfg ! (target_endian = "big") { bit_width as usize - 1 - i } else { i } ; self . set_bit (index + bit_offset , val_bit_is_set) ; } } } pub const __WORDSIZE : u32 = 64 ; pub const __DARWIN_ONLY_64_BIT_INO_T : u32 = 0 ; pub const __DARWIN_ONLY_UNIX_CONFORMANCE : u32 = 1 ; pub const __DARWIN_ONLY_VERS_1050 : u32 = 0 ; pub const __DARWIN_UNIX03 : u32 = 1 ; pub const __DARWIN_64_BIT_INO_T : u32 = 1 ; pub const __DARWIN_VERS_1050 : u32 = 1 ; pub const __DARWIN_NON_CANCELABLE : u32 = 0 ; pub const __DARWIN_SUF_64_BIT_INO_T : & 'static [u8 ; 9usize] = b"$INODE64\0" ; pub const __DARWIN_SUF_1050 : & 'static [u8 ; 6usize] = b"$1050\0" ; pub const __DARWIN_SUF_EXTSN : & 'static [u8 ; 14usize] = b"$DARWIN_EXTSN\0" ; pub const __DARWIN_C_ANSI : u32 = 4096 ; pub const __DARWIN_C_FULL : u32 = 900000 ; pub const __DARWIN_C_LEVEL : u32 = 900000 ; pub const __STDC_WANT_LIB_EXT1__ : u32 = 1 ; pub const __DARWIN_NO_LONG_LONG : u32 = 0 ; pub const _DARWIN_FEATURE_64_BIT_INODE : u32 = 1 ; pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE : u32 = 1 ; pub const _DARWIN_FEATURE_UNIX_CONFORMANCE : u32 = 3 ; pub const __PTHREAD_SIZE__ : u32 = 8176 ; pub const __PTHREAD_ATTR_SIZE__ : u32 = 56 ; pub const __PTHREAD_MUTEXATTR_SIZE__ : u32 = 8 ; pub const __PTHREAD_MUTEX_SIZE__ : u32 = 56 ; pub const __PTHREAD_CONDATTR_SIZE__ : u32 = 8 ; pub const __PTHREAD_COND_SIZE__ : u32 = 40 ; pub const __PTHREAD_ONCE_SIZE__ : u32 = 8 ; pub const __PTHREAD_RWLOCK_SIZE__ : u32 = 192 ; pub const __PTHREAD_RWLOCKATTR_SIZE__ : u32 = 16 ; pub const INT8_MAX : u32 = 127 ; pub const INT16_MAX : u32 = 32767 ; pub const INT32_MAX : u32 = 2147483647 ; pub const INT64_MAX : u64 = 9223372036854775807 ; pub const INT8_MIN : i32 = - 128 ; pub const INT16_MIN : i32 = - 32768 ; pub const INT32_MIN : i32 = - 2147483648 ; pub const INT64_MIN : i64 = - 9223372036854775808 ; pub const UINT8_MAX : u32 = 255 ; pub const UINT16_MAX : u32 = 65535 ; pub const UINT32_MAX : u32 = 4294967295 ; pub const UINT64_MAX : i32 = - 1 ; pub const INT_LEAST8_MIN : i32 = - 128 ; pub const INT_LEAST16_MIN : i32 = - 32768 ; pub const INT_LEAST32_MIN : i32 = - 2147483648 ; pub const INT_LEAST64_MIN : i64 = - 9223372036854775808 ; pub const INT_LEAST8_MAX : u32 = 127 ; pub const INT_LEAST16_MAX : u32 = 32767 ; pub const INT_LEAST32_MAX : u32 = 2147483647 ; pub const INT_LEAST64_MAX : u64 = 9223372036854775807 ; pub const UINT_LEAST8_MAX : u32 = 255 ; pub const UINT_LEAST16_MAX : u32 = 65535 ; pub const UINT_LEAST32_MAX : u32 = 4294967295 ; pub const UINT_LEAST64_MAX : i32 = - 1 ; pub const INT_FAST8_MIN : i32 = - 128 ; pub const INT_FAST16_MIN : i32 = - 32768 ; pub const INT_FAST32_MIN : i32 = - 2147483648 ; pub const INT_FAST64_MIN : i64 = - 9223372036854775808 ; pub const INT_FAST8_MAX : u32 = 127 ; pub const INT_FAST16_MAX : u32 = 32767 ; pub const INT_FAST32_MAX : u32 = 2147483647 ; pub const INT_FAST64_MAX : u64 = 9223372036854775807 ; pub const UINT_FAST8_MAX : u32 = 255 ; pub const UINT_FAST16_MAX : u32 = 65535 ; pub const UINT_FAST32_MAX : u32 = 4294967295 ; pub const UINT_FAST64_MAX : i32 = - 1 ; pub const INTPTR_MAX : u64 = 9223372036854775807 ; pub const INTPTR_MIN : i64 = - 9223372036854775808 ; pub const UINTPTR_MAX : i32 = - 1 ; pub const SIZE_MAX : i32 = - 1 ; pub const RSIZE_MAX : i32 = - 1 ; pub const WINT_MIN : i32 = - 2147483648 ; pub const WINT_MAX : u32 = 2147483647 ; pub const SIG_ATOMIC_MIN : i32 = - 2147483648 ; pub const SIG_ATOMIC_MAX : u32 = 2147483647 ; pub const MINIMP3_MAX_SAMPLES_PER_FRAME : u32 = 2304 ; pub const __API_TO_BE_DEPRECATED : u32 = 100000 ; pub const __MAC_10_0 : u32 = 1000 ; pub const __MAC_10_1 : u32 = 1010 ; pub const __MAC_10_2 : u32 = 1020 ; pub const __MAC_10_3 : u32 = 1030 ; pub const __MAC_10_4 : u32 = 1040 ; pub const __MAC_10_5 : u32 = 1050 ; pub const __MAC_10_6 : u32 = 1060 ; pub const __MAC_10_7 : u32 = 1070 ; pub const __MAC_10_8 : u32 = 1080 ; pub const __MAC_10_9 : u32 = 1090 ; pub const __MAC_10_10 : u32 = 101000 ; pub const __MAC_10_10_2 : u32 = 101002 ; pub const __MAC_10_10_3 : u32 = 101003 ; pub const __MAC_10_11 : u32 = 101100 ; pub const __MAC_10_11_2 : u32 = 101102 ; pub const __MAC_10_11_3 : u32 = 101103 ; pub const __MAC_10_11_4 : u32 = 101104 ; pub const __MAC_10_12 : u32 = 101200 ; pub const __MAC_10_12_1 : u32 = 101201 ; pub const __MAC_10_12_2 : u32 = 101202 ; pub const __MAC_10_12_4 : u32 = 101204 ; pub const __MAC_10_13 : u32 = 101300 ; pub const __MAC_10_13_1 : u32 = 101301 ; pub const __MAC_10_13_2 : u32 = 101302 ; pub const __MAC_10_13_4 : u32 = 101304 ; pub const __MAC_10_14 : u32 = 101400 ; pub const __MAC_10_14_1 : u32 = 101401 ; pub const __MAC_10_14_4 : u32 = 101404 ; pub const __MAC_10_14_6 : u32 = 101406 ; pub const __MAC_10_15 : u32 = 101500 ; pub const __MAC_10_15_1 : u32 = 101501 ; pub const __MAC_10_15_4 : u32 = 101504 ; pub const __MAC_10_16 : u32 = 101600 ; pub const __MAC_11_0 : u32 = 110000 ; pub const __MAC_11_1 : u32 = 110100 ; pub const __IPHONE_2_0 : u32 = 20000 ; pub const __IPHONE_2_1 : u32 = 20100 ; pub const __IPHONE_2_2 : u32 = 20200 ; pub const __IPHONE_3_0 : u32 = 30000 ; pub const __IPHONE_3_1 : u32 = 30100 ; pub const __IPHONE_3_2 : u32 = 30200 ; pub const __IPHONE_4_0 : u32 = 40000 ; pub const __IPHONE_4_1 : u32 = 40100 ; pub const __IPHONE_4_2 : u32 = 40200 ; pub const __IPHONE_4_3 : u32 = 40300 ; pub const __IPHONE_5_0 : u32 = 50000 ; pub const __IPHONE_5_1 : u32 = 50100 ; pub const __IPHONE_6_0 : u32 = 60000 ; pub const __IPHONE_6_1 : u32 = 60100 ; pub const __IPHONE_7_0 : u32 = 70000 ; pub const __IPHONE_7_1 : u32 = 70100 ; pub const __IPHONE_8_0 : u32 = 80000 ; pub const __IPHONE_8_1 : u32 = 80100 ; pub const __IPHONE_8_2 : u32 = 80200 ; pub const __IPHONE_8_3 : u32 = 80300 ; pub const __IPHONE_8_4 : u32 = 80400 ; pub const __IPHONE_9_0 : u32 = 90000 ; pub const __IPHONE_9_1 : u32 = 90100 ; pub const __IPHONE_9_2 : u32 = 90200 ; pub const __IPHONE_9_3 : u32 = 90300 ; pub const __IPHONE_10_0 : u32 = 100000 ; pub const __IPHONE_10_1 : u32 = 100100 ; pub const __IPHONE_10_2 : u32 = 100200 ; pub const __IPHONE_10_3 : u32 = 100300 ; pub const __IPHONE_11_0 : u32 = 110000 ; pub const __IPHONE_11_1 : u32 = 110100 ; pub const __IPHONE_11_2 : u32 = 110200 ; pub const __IPHONE_11_3 : u32 = 110300 ; pub const __IPHONE_11_4 : u32 = 110400 ; pub const __IPHONE_12_0 : u32 = 120000 ; pub const __IPHONE_12_1 : u32 = 120100 ; pub const __IPHONE_12_2 : u32 = 120200 ; pub const __IPHONE_12_3 : u32 = 120300 ; pub const __IPHONE_12_4 : u32 = 120400 ; pub const __IPHONE_13_0 : u32 = 130000 ; pub const __IPHONE_13_1 : u32 = 130100 ; pub const __IPHONE_13_2 : u32 = 130200 ; pub const __IPHONE_13_3 : u32 = 130300 ; pub const __IPHONE_13_4 : u32 = 130400 ; pub const __IPHONE_13_5 : u32 = 130500 ; pub const __IPHONE_13_6 : u32 = 130600 ; pub const __IPHONE_13_7 : u32 = 130700 ; pub const __IPHONE_14_0 : u32 = 140000 ; pub const __IPHONE_14_1 : u32 = 140100 ; pub const __IPHONE_14_2 : u32 = 140200 ; pub const __IPHONE_14_3 : u32 = 140300 ; pub const __TVOS_9_0 : u32 = 90000 ; pub const __TVOS_9_1 : u32 = 90100 ; pub const __TVOS_9_2 : u32 = 90200 ; pub const __TVOS_10_0 : u32 = 100000 ; pub const __TVOS_10_0_1 : u32 = 100001 ; pub const __TVOS_10_1 : u32 = 100100 ; pub const __TVOS_10_2 : u32 = 100200 ; pub const __TVOS_11_0 : u32 = 110000 ; pub const __TVOS_11_1 : u32 = 110100 ; pub const __TVOS_11_2 : u32 = 110200 ; pub const __TVOS_11_3 : u32 = 110300 ; pub const __TVOS_11_4 : u32 = 110400 ; pub const __TVOS_12_0 : u32 = 120000 ; pub const __TVOS_12_1 : u32 = 120100 ; pub const __TVOS_12_2 : u32 = 120200 ; pub const __TVOS_12_3 : u32 = 120300 ; pub const __TVOS_12_4 : u32 = 120400 ; pub const __TVOS_13_0 : u32 = 130000 ; pub const __TVOS_13_2 : u32 = 130200 ; pub const __TVOS_13_3 : u32 = 130300 ; pub const __TVOS_13_4 : u32 = 130400 ; pub const __TVOS_14_0 : u32 = 140000 ; pub const __TVOS_14_1 : u32 = 140100 ; pub const __TVOS_14_2 : u32 = 140200 ; pub const __TVOS_14_3 : u32 = 140300 ; pub const __WATCHOS_1_0 : u32 = 10000 ; pub const __WATCHOS_2_0 : u32 = 20000 ; pub const __WATCHOS_2_1 : u32 = 20100 ; pub const __WATCHOS_2_2 : u32 = 20200 ; pub const __WATCHOS_3_0 : u32 = 30000 ; pub const __WATCHOS_3_1 : u32 = 30100 ; pub const __WATCHOS_3_1_1 : u32 = 30101 ; pub const __WATCHOS_3_2 : u32 = 30200 ; pub const __WATCHOS_4_0 : u32 = 40000 ; pub const __WATCHOS_4_1 : u32 = 40100 ; pub const __WATCHOS_4_2 : u32 = 40200 ; pub const __WATCHOS_4_3 : u32 = 40300 ; pub const __WATCHOS_5_0 : u32 = 50000 ; pub const __WATCHOS_5_1 : u32 = 50100 ; pub const __WATCHOS_5_2 : u32 = 50200 ; pub const __WATCHOS_5_3 : u32 = 50300 ; pub const __WATCHOS_6_0 : u32 = 60000 ; pub const __WATCHOS_6_1 : u32 = 60100 ; pub const __WATCHOS_6_2 : u32 = 60200 ; pub const __WATCHOS_7_0 : u32 = 70000 ; pub const __WATCHOS_7_1 : u32 = 70100 ; pub const __WATCHOS_7_2 : u32 = 70200 ; pub const MAC_OS_X_VERSION_10_0 : u32 = 1000 ; pub const MAC_OS_X_VERSION_10_1 : u32 = 1010 ; pub const MAC_OS_X_VERSION_10_2 : u32 = 1020 ; pub const MAC_OS_X_VERSION_10_3 : u32 = 1030 ; pub const MAC_OS_X_VERSION_10_4 : u32 = 1040 ; pub const MAC_OS_X_VERSION_10_5 : u32 = 1050 ; pub const MAC_OS_X_VERSION_10_6 : u32 = 1060 ; pub const MAC_OS_X_VERSION_10_7 : u32 = 1070 ; pub const MAC_OS_X_VERSION_10_8 : u32 = 1080 ; pub const MAC_OS_X_VERSION_10_9 : u32 = 1090 ; pub const MAC_OS_X_VERSION_10_10 : u32 = 101000 ; pub const MAC_OS_X_VERSION_10_10_2 : u32 = 101002 ; pub const MAC_OS_X_VERSION_10_10_3 : u32 = 101003 ; pub const MAC_OS_X_VERSION_10_11 : u32 = 101100 ; pub const MAC_OS_X_VERSION_10_11_2 : u32 = 101102 ; pub const MAC_OS_X_VERSION_10_11_3 : u32 = 101103 ; pub const MAC_OS_X_VERSION_10_11_4 : u32 = 101104 ; pub const MAC_OS_X_VERSION_10_12 : u32 = 101200 ; pub const MAC_OS_X_VERSION_10_12_1 : u32 = 101201 ; pub const MAC_OS_X_VERSION_10_12_2 : u32 = 101202 ; pub const MAC_OS_X_VERSION_10_12_4 : u32 = 101204 ; pub const MAC_OS_X_VERSION_10_13 : u32 = 101300 ; pub const MAC_OS_X_VERSION_10_13_1 : u32 = 101301 ; pub const MAC_OS_X_VERSION_10_13_2 : u32 = 101302 ; pub const MAC_OS_X_VERSION_10_13_4 : u32 = 101304 ; pub const MAC_OS_X_VERSION_10_14 : u32 = 101400 ; pub const MAC_OS_X_VERSION_10_14_1 : u32 = 101401 ; pub const MAC_OS_X_VERSION_10_14_4 : u32 = 101404 ; pub const MAC_OS_X_VERSION_10_14_6 : u32 = 101406 ; pub const MAC_OS_X_VERSION_10_15 : u32 = 101500 ; pub const MAC_OS_X_VERSION_10_15_1 : u32 = 101501 ; pub const MAC_OS_X_VERSION_10_16 : u32 = 101600 ; pub const MAC_OS_VERSION_11_0 : u32 = 110000 ; pub const __DRIVERKIT_19_0 : u32 = 190000 ; pub const __DRIVERKIT_20_0 : u32 = 200000 ; pub const __MAC_OS_X_VERSION_MAX_ALLOWED : u32 = 110100 ; pub const __ENABLE_LEGACY_MAC_AVAILABILITY : u32 = 1 ; pub const __DARWIN_WCHAR_MIN : i32 = - 2147483648 ; pub const _FORTIFY_SOURCE : u32 = 2 ; pub const __DARWIN_NSIG : u32 = 32 ; pub const NSIG : u32 = 32 ; pub const _I386_SIGNAL_H_ : u32 = 1 ; pub const SIGHUP : u32 = 1 ; pub const SIGINT : u32 = 2 ; pub const SIGQUIT : u32 = 3 ; pub const SIGILL : u32 = 4 ; pub const SIGTRAP : u32 = 5 ; pub const SIGABRT : u32 = 6 ; pub const SIGIOT : u32 = 6 ; pub const SIGEMT : u32 = 7 ; pub const SIGFPE : u32 = 8 ; pub const SIGKILL : u32 = 9 ; pub const SIGBUS : u32 = 10 ; pub const SIGSEGV : u32 = 11 ; pub const SIGSYS : u32 = 12 ; pub const SIGPIPE : u32 = 13 ; pub const SIGALRM : u32 = 14 ; pub const SIGTERM : u32 = 15 ; pub const SIGURG : u32 = 16 ; pub const SIGSTOP : u32 = 17 ; pub const SIGTSTP : u32 = 18 ; pub const SIGCONT : u32 = 19 ; pub const SIGCHLD : u32 = 20 ; pub const SIGTTIN : u32 = 21 ; pub const SIGTTOU : u32 = 22 ; pub const SIGIO : u32 = 23 ; pub const SIGXCPU : u32 = 24 ; pub const SIGXFSZ : u32 = 25 ; pub const SIGVTALRM : u32 = 26 ; pub const SIGPROF : u32 = 27 ; pub const SIGWINCH : u32 = 28 ; pub const SIGINFO : u32 = 29 ; pub const SIGUSR1 : u32 = 30 ; pub const SIGUSR2 : u32 = 31 ; pub const FP_PREC_24B : u32 = 0 ; pub const FP_PREC_53B : u32 = 2 ; pub const FP_PREC_64B : u32 = 3 ; pub const FP_RND_NEAR : u32 = 0 ; pub const FP_RND_DOWN : u32 = 1 ; pub const FP_RND_UP : u32 = 2 ; pub const FP_CHOP : u32 = 3 ; pub const FP_STATE_BYTES : u32 = 512 ; pub const _X86_INSTRUCTION_STATE_MAX_INSN_BYTES : u32 = 2380 ; pub const _X86_INSTRUCTION_STATE_CACHELINE_SIZE : u32 = 64 ; pub const __LASTBRANCH_MAX : u32 = 32 ; pub const SIGEV_NONE : u32 = 0 ; pub const SIGEV_SIGNAL : u32 = 1 ; pub const SIGEV_THREAD : u32 = 3 ; pub const ILL_NOOP : u32 = 0 ; pub const ILL_ILLOPC : u32 = 1 ; pub const ILL_ILLTRP : u32 = 2 ; pub const ILL_PRVOPC : u32 = 3 ; pub const ILL_ILLOPN : u32 = 4 ; pub const ILL_ILLADR : u32 = 5 ; pub const ILL_PRVREG : u32 = 6 ; pub const ILL_COPROC : u32 = 7 ; pub const ILL_BADSTK : u32 = 8 ; pub const FPE_NOOP : u32 = 0 ; pub const FPE_FLTDIV : u32 = 1 ; pub const FPE_FLTOVF : u32 = 2 ; pub const FPE_FLTUND : u32 = 3 ; pub const FPE_FLTRES : u32 = 4 ; pub const FPE_FLTINV : u32 = 5 ; pub const FPE_FLTSUB : u32 = 6 ; pub const FPE_INTDIV : u32 = 7 ; pub const FPE_INTOVF : u32 = 8 ; pub const SEGV_NOOP : u32 = 0 ; pub const SEGV_MAPERR : u32 = 1 ; pub const SEGV_ACCERR : u32 = 2 ; pub const BUS_NOOP : u32 = 0 ; pub const BUS_ADRALN : u32 = 1 ; pub const BUS_ADRERR : u32 = 2 ; pub const BUS_OBJERR : u32 = 3 ; pub const TRAP_BRKPT : u32 = 1 ; pub const TRAP_TRACE : u32 = 2 ; pub const CLD_NOOP : u32 = 0 ; pub const CLD_EXITED : u32 = 1 ; pub const CLD_KILLED : u32 = 2 ; pub const CLD_DUMPED : u32 = 3 ; pub const CLD_TRAPPED : u32 = 4 ; pub const CLD_STOPPED : u32 = 5 ; pub const CLD_CONTINUED : u32 = 6 ; pub const POLL_IN : u32 = 1 ; pub const POLL_OUT : u32 = 2 ; pub const POLL_MSG : u32 = 3 ; pub const POLL_ERR : u32 = 4 ; pub const POLL_PRI : u32 = 5 ; pub const POLL_HUP : u32 = 6 ; pub const SA_ONSTACK : u32 = 1 ; pub const SA_RESTART : u32 = 2 ; pub const SA_RESETHAND : u32 = 4 ; pub const SA_NOCLDSTOP : u32 = 8 ; pub const SA_NODEFER : u32 = 16 ; pub const SA_NOCLDWAIT : u32 = 32 ; pub const SA_SIGINFO : u32 = 64 ; pub const SA_USERTRAMP : u32 = 256 ; pub const SA_64REGSET : u32 = 512 ; pub const SA_USERSPACE_MASK : u32 = 127 ; pub const SIG_BLOCK : u32 = 1 ; pub const SIG_UNBLOCK : u32 = 2 ; pub const SIG_SETMASK : u32 = 3 ; pub const SI_USER : u32 = 65537 ; pub const SI_QUEUE : u32 = 65538 ; pub const SI_TIMER : u32 = 65539 ; pub const SI_ASYNCIO : u32 = 65540 ; pub const SI_MESGQ : u32 = 65541 ; pub const SS_ONSTACK : u32 = 1 ; pub const SS_DISABLE : u32 = 4 ; pub const MINSIGSTKSZ : u32 = 32768 ; pub const SIGSTKSZ : u32 = 131072 ; pub const SV_ONSTACK : u32 = 1 ; pub const SV_INTERRUPT : u32 = 2 ; pub const SV_RESETHAND : u32 = 4 ; pub const SV_NODEFER : u32 = 16 ; pub const SV_NOCLDSTOP : u32 = 8 ; pub const SV_SIGINFO : u32 = 64 ; pub const PRIO_PROCESS : u32 = 0 ; pub const PRIO_PGRP : u32 = 1 ; pub const PRIO_USER : u32 = 2 ; pub const PRIO_DARWIN_THREAD : u32 = 3 ; pub const PRIO_DARWIN_PROCESS : u32 = 4 ; pub const PRIO_MIN : i32 = - 20 ; pub const PRIO_MAX : u32 = 20 ; pub const PRIO_DARWIN_BG : u32 = 4096 ; pub const PRIO_DARWIN_NONUI : u32 = 4097 ; pub const RUSAGE_SELF : u32 = 0 ; pub const RUSAGE_CHILDREN : i32 = - 1 ; pub const RUSAGE_INFO_V0 : u32 = 0 ; pub const RUSAGE_INFO_V1 : u32 = 1 ; pub const RUSAGE_INFO_V2 : u32 = 2 ; pub const RUSAGE_INFO_V3 : u32 = 3 ; pub const RUSAGE_INFO_V4 : u32 = 4 ; pub const RUSAGE_INFO_V5 : u32 = 5 ; pub const RUSAGE_INFO_CURRENT : u32 = 5 ; pub const RU_PROC_RUNS_RESLIDE : u32 = 1 ; pub const RLIMIT_CPU : u32 = 0 ; pub const RLIMIT_FSIZE : u32 = 1 ; pub const RLIMIT_DATA : u32 = 2 ; pub const RLIMIT_STACK : u32 = 3 ; pub const RLIMIT_CORE : u32 = 4 ; pub const RLIMIT_AS : u32 = 5 ; pub const RLIMIT_RSS : u32 = 5 ; pub const RLIMIT_MEMLOCK : u32 = 6 ; pub const RLIMIT_NPROC : u32 = 7 ; pub const RLIMIT_NOFILE : u32 = 8 ; pub const RLIM_NLIMITS : u32 = 9 ; pub const _RLIMIT_POSIX_FLAG : u32 = 4096 ; pub const RLIMIT_WAKEUPS_MONITOR : u32 = 1 ; pub const RLIMIT_CPU_USAGE_MONITOR : u32 = 2 ; pub const RLIMIT_THREAD_CPULIMITS : u32 = 3 ; pub const RLIMIT_FOOTPRINT_INTERVAL : u32 = 4 ; pub const WAKEMON_ENABLE : u32 = 1 ; pub const WAKEMON_DISABLE : u32 = 2 ; pub const WAKEMON_GET_PARAMS : u32 = 4 ; pub const WAKEMON_SET_DEFAULTS : u32 = 8 ; pub const WAKEMON_MAKE_FATAL : u32 = 16 ; pub const CPUMON_MAKE_FATAL : u32 = 4096 ; pub const FOOTPRINT_INTERVAL_RESET : u32 = 1 ; pub const IOPOL_TYPE_DISK : u32 = 0 ; pub const IOPOL_TYPE_VFS_ATIME_UPDATES : u32 = 2 ; pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES : u32 = 3 ; pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME : u32 = 4 ; pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE : u32 = 5 ; pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION : u32 = 6 ; pub const IOPOL_SCOPE_PROCESS : u32 = 0 ; pub const IOPOL_SCOPE_THREAD : u32 = 1 ; pub const IOPOL_SCOPE_DARWIN_BG : u32 = 2 ; pub const IOPOL_DEFAULT : u32 = 0 ; pub const IOPOL_IMPORTANT : u32 = 1 ; pub const IOPOL_PASSIVE : u32 = 2 ; pub const IOPOL_THROTTLE : u32 = 3 ; pub const IOPOL_UTILITY : u32 = 4 ; pub const IOPOL_STANDARD : u32 = 5 ; pub const IOPOL_APPLICATION : u32 = 5 ; pub const IOPOL_NORMAL : u32 = 1 ; pub const IOPOL_ATIME_UPDATES_DEFAULT : u32 = 0 ; pub const IOPOL_ATIME_UPDATES_OFF : u32 = 1 ; pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT : u32 = 0 ; pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF : u32 = 1 ; pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON : u32 = 2 ; pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT : u32 = 0 ; pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME : u32 = 1 ; pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT : u32 = 0 ; pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF : u32 = 1 ; pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT : u32 = 0 ; pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE : u32 = 1 ; pub const WNOHANG : u32 = 1 ; pub const WUNTRACED : u32 = 2 ; pub const WCOREFLAG : u32 = 128 ; pub const _WSTOPPED : u32 = 127 ; pub const WEXITED : u32 = 4 ; pub const WSTOPPED : u32 = 8 ; pub const WCONTINUED : u32 = 16 ; pub const WNOWAIT : u32 = 32 ; pub const WAIT_ANY : i32 = - 1 ; pub const WAIT_MYPGRP : u32 = 0 ; pub const _QUAD_HIGHWORD : u32 = 1 ; pub const _QUAD_LOWWORD : u32 = 0 ; pub const __DARWIN_LITTLE_ENDIAN : u32 = 1234 ; pub const __DARWIN_BIG_ENDIAN : u32 = 4321 ; pub const __DARWIN_PDP_ENDIAN : u32 = 3412 ; pub const __DARWIN_BYTE_ORDER : u32 = 1234 ; pub const LITTLE_ENDIAN : u32 = 1234 ; pub const BIG_ENDIAN : u32 = 4321 ; pub const PDP_ENDIAN : u32 = 3412 ; pub const BYTE_ORDER : u32 = 1234 ; pub const EXIT_FAILURE : u32 = 1 ; pub const EXIT_SUCCESS : u32 = 0 ; pub const RAND_MAX : u32 = 2147483647 ; pub const _USE_FORTIFY_LEVEL : u32 = 2 ; pub const __HAS_FIXED_CHK_PROTOTYPES : u32 = 1 ; pub const MAX_FREE_FORMAT_FRAME_SIZE : u32 = 2304 ; pub const MAX_FRAME_SYNC_MATCHES : u32 = 10 ; pub const MAX_L3_FRAME_PAYLOAD_BYTES : u32 = 2304 ; pub const MAX_BITRESERVOIR_BYTES : u32 = 511 ; pub const SHORT_BLOCK_TYPE : u32 = 2 ; pub const STOP_BLOCK_TYPE : u32 = 3 ; pub const MODE_MONO : u32 = 3 ; pub const MODE_JOINT_STEREO : u32 = 1 ; pub const HDR_SIZE : u32 = 4 ; pub const BITS_DEQUANTIZER_OUT : i32 = - 1 ; pub const MAX_SCF : u32 = 41 ; pub const MAX_SCFI : u32 = 44 ; pub const _MM_HINT_ET0 : u32 = 7 ; pub const _MM_HINT_ET1 : u32 = 6 ; pub const _MM_HINT_T0 : u32 = 3 ; pub const _MM_HINT_T1 : u32 = 2 ; pub const _MM_HINT_T2 : u32 = 1 ; pub const _MM_HINT_NTA : u32 = 0 ; pub const _MM_EXCEPT_INVALID : u32 = 1 ; pub const _MM_EXCEPT_DENORM : u32 = 2 ; pub const _MM_EXCEPT_DIV_ZERO : u32 = 4 ; pub const _MM_EXCEPT_OVERFLOW : u32 = 8 ; pub const _MM_EXCEPT_UNDERFLOW : u32 = 16 ; pub const _MM_EXCEPT_INEXACT : u32 = 32 ; pub const _MM_EXCEPT_MASK : u32 = 63 ; pub const _MM_MASK_INVALID : u32 = 128 ; pub const _MM_MASK_DENORM : u32 = 256 ; pub const _MM_MASK_DIV_ZERO : u32 = 512 ; pub const _MM_MASK_OVERFLOW : u32 = 1024 ; pub const _MM_MASK_UNDERFLOW : u32 = 2048 ; pub const _MM_MASK_INEXACT : u32 = 4096 ; pub const _MM_MASK_MASK : u32 = 8064 ; pub const _MM_ROUND_NEAREST : u32 = 0 ; pub const _MM_ROUND_DOWN : u32 = 8192 ; pub const _MM_ROUND_UP : u32 = 16384 ; pub const _MM_ROUND_TOWARD_ZERO : u32 = 24576 ; pub const _MM_ROUND_MASK : u32 = 24576 ; pub const _MM_FLUSH_ZERO_MASK : u32 = 32768 ; pub const _MM_FLUSH_ZERO_ON : u32 = 32768 ; pub const _MM_FLUSH_ZERO_OFF : u32 = 0 ; pub const _MM_DENORMALS_ZERO_ON : u32 = 64 ; pub const _MM_DENORMALS_ZERO_OFF : u32 = 0 ; pub const _MM_DENORMALS_ZERO_MASK : u32 = 64 ; pub const _MM_FROUND_TO_NEAREST_INT : u32 = 0 ; pub const _MM_FROUND_TO_NEG_INF : u32 = 1 ; pub const _MM_FROUND_TO_POS_INF : u32 = 2 ; pub const _MM_FROUND_TO_ZERO : u32 = 3 ; pub const _MM_FROUND_CUR_DIRECTION : u32 = 4 ; pub const _MM_FROUND_RAISE_EXC : u32 = 0 ; pub const _MM_FROUND_NO_EXC : u32 = 8 ; pub const _MM_FROUND_NINT : u32 = 0 ; pub const _MM_FROUND_FLOOR : u32 = 1 ; pub const _MM_FROUND_CEIL : u32 = 2 ; pub const _MM_FROUND_TRUNC : u32 = 3 ; pub const _MM_FROUND_RINT : u32 = 4 ; pub const _MM_FROUND_NEARBYINT : u32 = 12 ; pub const _SIDD_UBYTE_OPS : u32 = 0 ; pub const _SIDD_UWORD_OPS : u32 = 1 ; pub const _SIDD_SBYTE_OPS : u32 = 2 ; pub const _SIDD_SWORD_OPS : u32 = 3 ; pub const _SIDD_CMP_EQUAL_ANY : u32 = 0 ; pub const _SIDD_CMP_RANGES : u32 = 4 ; pub const _SIDD_CMP_EQUAL_EACH : u32 = 8 ; pub const _SIDD_CMP_EQUAL_ORDERED : u32 = 12 ; pub const _SIDD_POSITIVE_POLARITY : u32 = 0 ; pub const _SIDD_NEGATIVE_POLARITY : u32 = 16 ; pub const _SIDD_MASKED_POSITIVE_POLARITY : u32 = 32 ; pub const _SIDD_MASKED_NEGATIVE_POLARITY : u32 = 48 ; pub const _SIDD_LEAST_SIGNIFICANT : u32 = 0 ; pub const _SIDD_MOST_SIGNIFICANT : u32 = 64 ; pub const _SIDD_BIT_MASK : u32 = 0 ; pub const _SIDD_UNIT_MASK : u32 = 64 ; pub const _CMP_EQ_OQ : u32 = 0 ; pub const _CMP_LT_OS : u32 = 1 ; pub const _CMP_LE_OS : u32 = 2 ; pub const _CMP_UNORD_Q : u32 = 3 ; pub const _CMP_NEQ_UQ : u32 = 4 ; pub const _CMP_NLT_US : u32 = 5 ; pub const _CMP_NLE_US : u32 = 6 ; pub const _CMP_ORD_Q : u32 = 7 ; pub const _CMP_EQ_UQ : u32 = 8 ; pub const _CMP_NGE_US : u32 = 9 ; pub const _CMP_NGT_US : u32 = 10 ; pub const _CMP_FALSE_OQ : u32 = 11 ; pub const _CMP_NEQ_OQ : u32 = 12 ; pub const _CMP_GE_OS : u32 = 13 ; pub const _CMP_GT_OS : u32 = 14 ; pub const _CMP_TRUE_UQ : u32 = 15 ; pub const _CMP_EQ_OS : u32 = 16 ; pub const _CMP_LT_OQ : u32 = 17 ; pub const _CMP_LE_OQ : u32 = 18 ; pub const _CMP_UNORD_S : u32 = 19 ; pub const _CMP_NEQ_US : u32 = 20 ; pub const _CMP_NLT_UQ : u32 = 21 ; pub const _CMP_NLE_UQ : u32 = 22 ; pub const _CMP_ORD_S : u32 = 23 ; pub const _CMP_EQ_US : u32 = 24 ; pub const _CMP_NGE_UQ : u32 = 25 ; pub const _CMP_NGT_UQ : u32 = 26 ; pub const _CMP_FALSE_OS : u32 = 27 ; pub const _CMP_NEQ_OS : u32 = 28 ; pub const _CMP_GE_OQ : u32 = 29 ; pub const _CMP_GT_OQ : u32 = 30 ; pub const _CMP_TRUE_US : u32 = 31 ; pub const _XBEGIN_STARTED : i32 = - 1 ; pub const _XABORT_EXPLICIT : u32 = 1 ; pub const _XABORT_RETRY : u32 = 2 ; pub const _XABORT_CONFLICT : u32 = 4 ; pub const _XABORT_CAPACITY : u32 = 8 ; pub const _XABORT_DEBUG : u32 = 16 ; pub const _XABORT_NESTED : u32 = 32 ; pub const __PCONFIG_KEY_PROGRAM : u32 = 1 ; pub const HAVE_SSE : u32 = 1 ; pub const HAVE_SIMD : u32 = 1 ; pub const HAVE_ARMV6 : u32 = 0 ; pub const MP3D_SEEK_TO_BYTE : u32 = 0 ; pub const MP3D_SEEK_TO_SAMPLE : u32 = 1 ; pub const MP3D_DO_NOT_SCAN : u32 = 2 ; pub const MP3D_FLAGS_MASK : u32 = 3 ; pub const MINIMP3_PREDECODE_FRAMES : u32 = 2 ; pub const MINIMP3_IO_SIZE : u32 = 131072 ; pub const MINIMP3_BUF_SIZE : u32 = 16384 ; pub const MINIMP3_ENABLE_RING : u32 = 0 ; pub const MP3D_E_PARAM : i32 = - 1 ; pub const MP3D_E_MEMORY : i32 = - 2 ; pub const MP3D_E_IOERROR : i32 = - 3 ; pub const MP3D_E_USER : i32 = - 4 ; pub const MP3D_E_DECODE : i32 = - 5 ; pub const __DARWIN_CLK_TCK : u32 = 100 ; pub const CHAR_BIT : u32 = 8 ; pub const MB_LEN_MAX : u32 = 6 ; pub const CLK_TCK : u32 = 100 ; pub const SCHAR_MAX : u32 = 127 ; pub const SCHAR_MIN : i32 = - 128 ; pub const UCHAR_MAX : u32 = 255 ; pub const CHAR_MAX : u32 = 127 ; pub const CHAR_MIN : i32 = - 128 ; pub const USHRT_MAX : u32 = 65535 ; pub const SHRT_MAX : u32 = 32767 ; pub const SHRT_MIN : i32 = - 32768 ; pub const UINT_MAX : u32 = 4294967295 ; pub const INT_MAX : u32 = 2147483647 ; pub const INT_MIN : i32 = - 2147483648 ; pub const ULONG_MAX : i32 = - 1 ; pub const LONG_MAX : u64 = 9223372036854775807 ; pub const LONG_MIN : i64 = - 9223372036854775808 ; pub const ULLONG_MAX : i32 = - 1 ; pub const LLONG_MAX : u64 = 9223372036854775807 ; pub const LLONG_MIN : i64 = - 9223372036854775808 ; pub const LONG_BIT : u32 = 64 ; pub const SSIZE_MAX : u64 = 9223372036854775807 ; pub const WORD_BIT : u32 = 32 ; pub const SIZE_T_MAX : i32 = - 1 ; pub const UQUAD_MAX : i32 = - 1 ; pub const QUAD_MAX : u64 = 9223372036854775807 ; pub const QUAD_MIN : i64 = - 9223372036854775808 ; pub const ARG_MAX : u32 = 1048576 ; pub const CHILD_MAX : u32 = 266 ; pub const GID_MAX : u32 = 2147483647 ; pub const LINK_MAX : u32 = 32767 ; pub const MAX_CANON : u32 = 1024 ; pub const MAX_INPUT : u32 = 1024 ; pub const NAME_MAX : u32 = 255 ; pub const NGROUPS_MAX : u32 = 16 ; pub const UID_MAX : u32 = 2147483647 ; pub const OPEN_MAX : u32 = 10240 ; pub const PATH_MAX : u32 = 1024 ; pub const PIPE_BUF : u32 = 512 ; pub const BC_BASE_MAX : u32 = 99 ; pub const BC_DIM_MAX : u32 = 2048 ; pub const BC_SCALE_MAX : u32 = 99 ; pub const BC_STRING_MAX : u32 = 1000 ; pub const CHARCLASS_NAME_MAX : u32 = 14 ; pub const COLL_WEIGHTS_MAX : u32 = 2 ; pub const EQUIV_CLASS_MAX : u32 = 2 ; pub const EXPR_NEST_MAX : u32 = 32 ; pub const LINE_MAX : u32 = 2048 ; pub const RE_DUP_MAX : u32 = 255 ; pub const NZERO : u32 = 20 ; pub const _POSIX_ARG_MAX : u32 = 4096 ; pub const _POSIX_CHILD_MAX : u32 = 25 ; pub const _POSIX_LINK_MAX : u32 = 8 ; pub const _POSIX_MAX_CANON : u32 = 255 ; pub const _POSIX_MAX_INPUT : u32 = 255 ; pub const _POSIX_NAME_MAX : u32 = 14 ; pub const _POSIX_NGROUPS_MAX : u32 = 8 ; pub const _POSIX_OPEN_MAX : u32 = 20 ; pub const _POSIX_PATH_MAX : u32 = 256 ; pub const _POSIX_PIPE_BUF : u32 = 512 ; pub const _POSIX_SSIZE_MAX : u32 = 32767 ; pub const _POSIX_STREAM_MAX : u32 = 8 ; pub const _POSIX_TZNAME_MAX : u32 = 6 ; pub const _POSIX2_BC_BASE_MAX : u32 = 99 ; pub const _POSIX2_BC_DIM_MAX : u32 = 2048 ; pub const _POSIX2_BC_SCALE_MAX : u32 = 99 ; pub const _POSIX2_BC_STRING_MAX : u32 = 1000 ; pub const _POSIX2_EQUIV_CLASS_MAX : u32 = 2 ; pub const _POSIX2_EXPR_NEST_MAX : u32 = 32 ; pub const _POSIX2_LINE_MAX : u32 = 2048 ; pub const _POSIX2_RE_DUP_MAX : u32 = 255 ; pub const _POSIX_AIO_LISTIO_MAX : u32 = 2 ; pub const _POSIX_AIO_MAX : u32 = 1 ; pub const _POSIX_DELAYTIMER_MAX : u32 = 32 ; pub const _POSIX_MQ_OPEN_MAX : u32 = 8 ; pub const _POSIX_MQ_PRIO_MAX : u32 = 32 ; pub const _POSIX_RTSIG_MAX : u32 = 8 ; pub const _POSIX_SEM_NSEMS_MAX : u32 = 256 ; pub const _POSIX_SEM_VALUE_MAX : u32 = 32767 ; pub const _POSIX_SIGQUEUE_MAX : u32 = 32 ; pub const _POSIX_TIMER_MAX : u32 = 32 ; pub const _POSIX_CLOCKRES_MIN : u32 = 20000000 ; pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS : u32 = 4 ; pub const _POSIX_THREAD_KEYS_MAX : u32 = 128 ; pub const _POSIX_THREAD_THREADS_MAX : u32 = 64 ; pub const PTHREAD_DESTRUCTOR_ITERATIONS : u32 = 4 ; pub const PTHREAD_KEYS_MAX : u32 = 512 ; pub const PTHREAD_STACK_MIN : u32 = 8192 ; pub const _POSIX_HOST_NAME_MAX : u32 = 255 ; pub const _POSIX_LOGIN_NAME_MAX : u32 = 9 ; pub const _POSIX_SS_REPL_MAX : u32 = 4 ; pub const _POSIX_SYMLINK_MAX : u32 = 255 ; pub const _POSIX_SYMLOOP_MAX : u32 = 8 ; pub const _POSIX_TRACE_EVENT_NAME_MAX : u32 = 30 ; pub const _POSIX_TRACE_NAME_MAX : u32 = 8 ; pub const _POSIX_TRACE_SYS_MAX : u32 = 8 ; pub const _POSIX_TRACE_USER_EVENT_MAX : u32 = 32 ; pub const _POSIX_TTY_NAME_MAX : u32 = 9 ; pub const _POSIX2_CHARCLASS_NAME_MAX : u32 = 14 ; pub const _POSIX2_COLL_WEIGHTS_MAX : u32 = 2 ; pub const _POSIX_RE_DUP_MAX : u32 = 255 ; pub const OFF_MIN : i64 = - 9223372036854775808 ; pub const OFF_MAX : u64 = 9223372036854775807 ; pub const PASS_MAX : u32 = 128 ; pub const NL_ARGMAX : u32 = 9 ; pub const NL_LANGMAX : u32 = 14 ; pub const NL_MSGMAX : u32 = 32767 ; pub const NL_NMAX : u32 = 1 ; pub const NL_SETMAX : u32 = 255 ; pub const NL_TEXTMAX : u32 = 2048 ; pub const _XOPEN_IOV_MAX : u32 = 16 ; pub const IOV_MAX : u32 = 1024 ; pub const _XOPEN_NAME_MAX : u32 = 255 ; pub const _XOPEN_PATH_MAX : u32 = 1024 ; pub const MINIMP3_ID3_DETECT_SIZE : u32 = 10 ; pub const FRAMES_FLAG : u32 = 1 ; pub const BYTES_FLAG : u32 = 2 ; pub const TOC_FLAG : u32 = 4 ; pub const VBR_SCALE_FLAG : u32 = 8 ; pub const RENAME_SECLUDE : u32 = 1 ; pub const RENAME_SWAP : u32 = 2 ; pub const RENAME_EXCL : u32 = 4 ; pub const __SLBF : u32 = 1 ; pub const __SNBF : u32 = 2 ; pub const __SRD : u32 = 4 ; pub const __SWR : u32 = 8 ; pub const __SRW : u32 = 16 ; pub const __SEOF : u32 = 32 ; pub const __SERR : u32 = 64 ; pub const __SMBF : u32 = 128 ; pub const __SAPP : u32 = 256 ; pub const __SSTR : u32 = 512 ; pub const __SOPT : u32 = 1024 ; pub const __SNPT : u32 = 2048 ; pub const __SOFF : u32 = 4096 ; pub const __SMOD : u32 = 8192 ; pub const __SALC : u32 = 16384 ; pub const __SIGN : u32 = 32768 ; pub const _IOFBF : u32 = 0 ; pub const _IOLBF : u32 = 1 ; pub const _IONBF : u32 = 2 ; pub const BUFSIZ : u32 = 1024 ; pub const EOF : i32 = - 1 ; pub const FOPEN_MAX : u32 = 20 ; pub const FILENAME_MAX : u32 = 1024 ; pub const P_tmpdir : & 'static [u8 ; 10usize] = b"/var/tmp/\0" ; pub const L_tmpnam : u32 = 1024 ; pub const TMP_MAX : u32 = 308915776 ; pub const SEEK_SET : u32 = 0 ; pub const SEEK_CUR : u32 = 1 ; pub const SEEK_END : u32 = 2 ; pub const L_ctermid : u32 = 1024 ; pub type int_least8_t = i8 ; pub type int_least16_t = i16 ; pub type int_least32_t = i32 ; pub type int_least64_t = i64 ; pub type uint_least8_t = u8 ; pub type uint_least16_t = u16 ; pub type uint_least32_t = u32 ; pub type uint_least64_t = u64 ; pub type int_fast8_t = i8 ; pub type int_fast16_t = i16 ; pub type int_fast32_t = i32 ; pub type int_fast64_t = i64 ; pub type uint_fast8_t = u8 ; pub type uint_fast16_t = u16 ; pub type uint_fast32_t = u32 ; pub type uint_fast64_t = u64 ; pub type __int8_t = :: std :: os :: raw :: c_schar ; pub type __uint8_t = :: std :: os :: raw :: c_uchar ; pub type __int16_t = :: std :: os :: raw :: c_short ; pub type __uint16_t = :: std :: os :: raw :: c_ushort ; pub type __int32_t = :: std :: os :: raw :: c_int ; pub type __uint32_t = :: std :: os :: raw :: c_uint ; pub type __int64_t = :: std :: os :: raw :: c_longlong ; pub type __uint64_t = :: std :: os :: raw :: c_ulonglong ; pub type __darwin_intptr_t = :: std :: os :: raw :: c_long ; pub type __darwin_natural_t = :: std :: os :: raw :: c_uint ; pub type __darwin_ct_rune_t = :: std :: os :: raw :: c_int ; # [repr (C)] # [derive (Copy , Clone)] pub union __mbstate_t { pub __mbstate8 : [:: std :: os :: raw :: c_char ; 128usize] , pub _mbstateL : :: std :: os :: raw :: c_longlong , } # [test] fn bindgen_test_layout___mbstate_t () { assert_eq ! (:: std :: mem :: size_of :: < __mbstate_t > () , 128usize , concat ! ("Size of: " , stringify ! (__mbstate_t))) ; assert_eq ! (:: std :: mem :: align_of :: < __mbstate_t > () , 8usize , concat ! ("Alignment of " , stringify ! (__mbstate_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __mbstate_t > ())) . __mbstate8 as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__mbstate_t) , "::" , stringify ! (__mbstate8))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __mbstate_t > ())) . _mbstateL as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__mbstate_t) , "::" , stringify ! (_mbstateL))) ; } pub type __darwin_mbstate_t = __mbstate_t ; pub type __darwin_ptrdiff_t = :: std :: os :: raw :: c_long ; pub type __darwin_size_t = :: std :: os :: raw :: c_ulong ; pub type __darwin_va_list = __builtin_va_list ; pub type __darwin_wchar_t = :: std :: os :: raw :: c_int ; pub type __darwin_rune_t = __darwin_wchar_t ; pub type __darwin_wint_t = :: std :: os :: raw :: c_int ; pub type __darwin_clock_t = :: std :: os :: raw :: c_ulong ; pub type __darwin_socklen_t = __uint32_t ; pub type __darwin_ssize_t = :: std :: os :: raw :: c_long ; pub type __darwin_time_t = :: std :: os :: raw :: c_long ; pub type __darwin_blkcnt_t = __int64_t ; pub type __darwin_blksize_t = __int32_t ; pub type __darwin_dev_t = __int32_t ; pub type __darwin_fsblkcnt_t = :: std :: os :: raw :: c_uint ; pub type __darwin_fsfilcnt_t = :: std :: os :: raw :: c_uint ; pub type __darwin_gid_t = __uint32_t ; pub type __darwin_id_t = __uint32_t ; pub type __darwin_ino64_t = __uint64_t ; pub type __darwin_ino_t = __darwin_ino64_t ; pub type __darwin_mach_port_name_t = __darwin_natural_t ; pub type __darwin_mach_port_t = __darwin_mach_port_name_t ; pub type __darwin_mode_t = __uint16_t ; pub type __darwin_off_t = __int64_t ; pub type __darwin_pid_t = __int32_t ; pub type __darwin_sigset_t = __uint32_t ; pub type __darwin_suseconds_t = __int32_t ; pub type __darwin_uid_t = __uint32_t ; pub type __darwin_useconds_t = __uint32_t ; pub type __darwin_uuid_t = [:: std :: os :: raw :: c_uchar ; 16usize] ; pub type __darwin_uuid_string_t = [:: std :: os :: raw :: c_char ; 37usize] ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __darwin_pthread_handler_rec { pub __routine : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * mut :: std :: os :: raw :: c_void) > , pub __arg : * mut :: std :: os :: raw :: c_void , pub __next : * mut __darwin_pthread_handler_rec , } # [test] fn bindgen_test_layout___darwin_pthread_handler_rec () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_pthread_handler_rec > () , 24usize , concat ! ("Size of: " , stringify ! (__darwin_pthread_handler_rec))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_pthread_handler_rec > () , 8usize , concat ! ("Alignment of " , stringify ! (__darwin_pthread_handler_rec))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_pthread_handler_rec > ())) . __routine as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_pthread_handler_rec) , "::" , stringify ! (__routine))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_pthread_handler_rec > ())) . __arg as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__darwin_pthread_handler_rec) , "::" , stringify ! (__arg))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_pthread_handler_rec > ())) . __next as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_pthread_handler_rec) , "::" , stringify ! (__next))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct _opaque_pthread_attr_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [:: std :: os :: raw :: c_char ; 56usize] , } # [test] fn bindgen_test_layout__opaque_pthread_attr_t () { assert_eq ! (:: std :: mem :: size_of :: < _opaque_pthread_attr_t > () , 64usize , concat ! ("Size of: " , stringify ! (_opaque_pthread_attr_t))) ; assert_eq ! (:: std :: mem :: align_of :: < _opaque_pthread_attr_t > () , 8usize , concat ! ("Alignment of " , stringify ! (_opaque_pthread_attr_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_attr_t > ())) . __sig as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_attr_t) , "::" , stringify ! (__sig))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_attr_t > ())) . __opaque as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_attr_t) , "::" , stringify ! (__opaque))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct _opaque_pthread_cond_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [:: std :: os :: raw :: c_char ; 40usize] , } # [test] fn bindgen_test_layout__opaque_pthread_cond_t () { assert_eq ! (:: std :: mem :: size_of :: < _opaque_pthread_cond_t > () , 48usize , concat ! ("Size of: " , stringify ! (_opaque_pthread_cond_t))) ; assert_eq ! (:: std :: mem :: align_of :: < _opaque_pthread_cond_t > () , 8usize , concat ! ("Alignment of " , stringify ! (_opaque_pthread_cond_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_cond_t > ())) . __sig as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_cond_t) , "::" , stringify ! (__sig))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_cond_t > ())) . __opaque as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_cond_t) , "::" , stringify ! (__opaque))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _opaque_pthread_condattr_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [:: std :: os :: raw :: c_char ; 8usize] , } # [test] fn bindgen_test_layout__opaque_pthread_condattr_t () { assert_eq ! (:: std :: mem :: size_of :: < _opaque_pthread_condattr_t > () , 16usize , concat ! ("Size of: " , stringify ! (_opaque_pthread_condattr_t))) ; assert_eq ! (:: std :: mem :: align_of :: < _opaque_pthread_condattr_t > () , 8usize , concat ! ("Alignment of " , stringify ! (_opaque_pthread_condattr_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_condattr_t > ())) . __sig as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_condattr_t) , "::" , stringify ! (__sig))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_condattr_t > ())) . __opaque as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_condattr_t) , "::" , stringify ! (__opaque))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct _opaque_pthread_mutex_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [:: std :: os :: raw :: c_char ; 56usize] , } # [test] fn bindgen_test_layout__opaque_pthread_mutex_t () { assert_eq ! (:: std :: mem :: size_of :: < _opaque_pthread_mutex_t > () , 64usize , concat ! ("Size of: " , stringify ! (_opaque_pthread_mutex_t))) ; assert_eq ! (:: std :: mem :: align_of :: < _opaque_pthread_mutex_t > () , 8usize , concat ! ("Alignment of " , stringify ! (_opaque_pthread_mutex_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_mutex_t > ())) . __sig as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_mutex_t) , "::" , stringify ! (__sig))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_mutex_t > ())) . __opaque as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_mutex_t) , "::" , stringify ! (__opaque))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _opaque_pthread_mutexattr_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [:: std :: os :: raw :: c_char ; 8usize] , } # [test] fn bindgen_test_layout__opaque_pthread_mutexattr_t () { assert_eq ! (:: std :: mem :: size_of :: < _opaque_pthread_mutexattr_t > () , 16usize , concat ! ("Size of: " , stringify ! (_opaque_pthread_mutexattr_t))) ; assert_eq ! (:: std :: mem :: align_of :: < _opaque_pthread_mutexattr_t > () , 8usize , concat ! ("Alignment of " , stringify ! (_opaque_pthread_mutexattr_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_mutexattr_t > ())) . __sig as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_mutexattr_t) , "::" , stringify ! (__sig))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_mutexattr_t > ())) . __opaque as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_mutexattr_t) , "::" , stringify ! (__opaque))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _opaque_pthread_once_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [:: std :: os :: raw :: c_char ; 8usize] , } # [test] fn bindgen_test_layout__opaque_pthread_once_t () { assert_eq ! (:: std :: mem :: size_of :: < _opaque_pthread_once_t > () , 16usize , concat ! ("Size of: " , stringify ! (_opaque_pthread_once_t))) ; assert_eq ! (:: std :: mem :: align_of :: < _opaque_pthread_once_t > () , 8usize , concat ! ("Alignment of " , stringify ! (_opaque_pthread_once_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_once_t > ())) . __sig as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_once_t) , "::" , stringify ! (__sig))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_once_t > ())) . __opaque as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_once_t) , "::" , stringify ! (__opaque))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct _opaque_pthread_rwlock_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [:: std :: os :: raw :: c_char ; 192usize] , } # [test] fn bindgen_test_layout__opaque_pthread_rwlock_t () { assert_eq ! (:: std :: mem :: size_of :: < _opaque_pthread_rwlock_t > () , 200usize , concat ! ("Size of: " , stringify ! (_opaque_pthread_rwlock_t))) ; assert_eq ! (:: std :: mem :: align_of :: < _opaque_pthread_rwlock_t > () , 8usize , concat ! ("Alignment of " , stringify ! (_opaque_pthread_rwlock_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_rwlock_t > ())) . __sig as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_rwlock_t) , "::" , stringify ! (__sig))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_rwlock_t > ())) . __opaque as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_rwlock_t) , "::" , stringify ! (__opaque))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct _opaque_pthread_rwlockattr_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout__opaque_pthread_rwlockattr_t () { assert_eq ! (:: std :: mem :: size_of :: < _opaque_pthread_rwlockattr_t > () , 24usize , concat ! ("Size of: " , stringify ! (_opaque_pthread_rwlockattr_t))) ; assert_eq ! (:: std :: mem :: align_of :: < _opaque_pthread_rwlockattr_t > () , 8usize , concat ! ("Alignment of " , stringify ! (_opaque_pthread_rwlockattr_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_rwlockattr_t > ())) . __sig as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_rwlockattr_t) , "::" , stringify ! (__sig))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_rwlockattr_t > ())) . __opaque as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_rwlockattr_t) , "::" , stringify ! (__opaque))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct _opaque_pthread_t { pub __sig : :: std :: os :: raw :: c_long , pub __cleanup_stack : * mut __darwin_pthread_handler_rec , pub __opaque : [:: std :: os :: raw :: c_char ; 8176usize] , } # [test] fn bindgen_test_layout__opaque_pthread_t () { assert_eq ! (:: std :: mem :: size_of :: < _opaque_pthread_t > () , 8192usize , concat ! ("Size of: " , stringify ! (_opaque_pthread_t))) ; assert_eq ! (:: std :: mem :: align_of :: < _opaque_pthread_t > () , 8usize , concat ! ("Alignment of " , stringify ! (_opaque_pthread_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_t > ())) . __sig as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_t) , "::" , stringify ! (__sig))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_t > ())) . __cleanup_stack as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_t) , "::" , stringify ! (__cleanup_stack))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < _opaque_pthread_t > ())) . __opaque as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (_opaque_pthread_t) , "::" , stringify ! (__opaque))) ; } pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t ; pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t ; pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t ; pub type __darwin_pthread_key_t = :: std :: os :: raw :: c_ulong ; pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t ; pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t ; pub type __darwin_pthread_once_t = _opaque_pthread_once_t ; pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t ; pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t ; pub type __darwin_pthread_t = * mut _opaque_pthread_t ; pub type u_int8_t = :: std :: os :: raw :: c_uchar ; pub type u_int16_t = :: std :: os :: raw :: c_ushort ; pub type u_int32_t = :: std :: os :: raw :: c_uint ; pub type u_int64_t = :: std :: os :: raw :: c_ulonglong ; pub type register_t = i64 ; pub type user_addr_t = u_int64_t ; pub type user_size_t = u_int64_t ; pub type user_ssize_t = i64 ; pub type user_long_t = i64 ; pub type user_ulong_t = u_int64_t ; pub type user_time_t = i64 ; pub type user_off_t = i64 ; pub type syscall_arg_t = u_int64_t ; pub type intmax_t = :: std :: os :: raw :: c_long ; pub type uintmax_t = :: std :: os :: raw :: c_ulong ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct mp3dec_frame_info_t { pub frame_bytes : :: std :: os :: raw :: c_int , pub frame_offset : :: std :: os :: raw :: c_int , pub channels : :: std :: os :: raw :: c_int , pub hz : :: std :: os :: raw :: c_int , pub layer : :: std :: os :: raw :: c_int , pub bitrate_kbps : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout_mp3dec_frame_info_t () { assert_eq ! (:: std :: mem :: size_of :: < mp3dec_frame_info_t > () , 24usize , concat ! ("Size of: " , stringify ! (mp3dec_frame_info_t))) ; assert_eq ! (:: std :: mem :: align_of :: < mp3dec_frame_info_t > () , 4usize , concat ! ("Alignment of " , stringify ! (mp3dec_frame_info_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_frame_info_t > ())) . frame_bytes as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (mp3dec_frame_info_t) , "::" , stringify ! (frame_bytes))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_frame_info_t > ())) . frame_offset as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (mp3dec_frame_info_t) , "::" , stringify ! (frame_offset))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_frame_info_t > ())) . channels as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (mp3dec_frame_info_t) , "::" , stringify ! (channels))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_frame_info_t > ())) . hz as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (mp3dec_frame_info_t) , "::" , stringify ! (hz))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_frame_info_t > ())) . layer as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (mp3dec_frame_info_t) , "::" , stringify ! (layer))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_frame_info_t > ())) . bitrate_kbps as * const _ as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (mp3dec_frame_info_t) , "::" , stringify ! (bitrate_kbps))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct mp3dec_t { pub mdct_overlap : [[f32 ; 288usize] ; 2usize] , pub qmf_state : [f32 ; 960usize] , pub reserv : :: std :: os :: raw :: c_int , pub free_format_bytes : :: std :: os :: raw :: c_int , pub header : [:: std :: os :: raw :: c_uchar ; 4usize] , pub reserv_buf : [:: std :: os :: raw :: c_uchar ; 511usize] , } # [test] fn bindgen_test_layout_mp3dec_t () { assert_eq ! (:: std :: mem :: size_of :: < mp3dec_t > () , 6668usize , concat ! ("Size of: " , stringify ! (mp3dec_t))) ; assert_eq ! (:: std :: mem :: align_of :: < mp3dec_t > () , 4usize , concat ! ("Alignment of " , stringify ! (mp3dec_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_t > ())) . mdct_overlap as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (mp3dec_t) , "::" , stringify ! (mdct_overlap))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_t > ())) . qmf_state as * const _ as usize } , 2304usize , concat ! ("Offset of field: " , stringify ! (mp3dec_t) , "::" , stringify ! (qmf_state))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_t > ())) . reserv as * const _ as usize } , 6144usize , concat ! ("Offset of field: " , stringify ! (mp3dec_t) , "::" , stringify ! (reserv))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_t > ())) . free_format_bytes as * const _ as usize } , 6148usize , concat ! ("Offset of field: " , stringify ! (mp3dec_t) , "::" , stringify ! (free_format_bytes))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_t > ())) . header as * const _ as usize } , 6152usize , concat ! ("Offset of field: " , stringify ! (mp3dec_t) , "::" , stringify ! (header))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_t > ())) . reserv_buf as * const _ as usize } , 6156usize , concat ! ("Offset of field: " , stringify ! (mp3dec_t) , "::" , stringify ! (reserv_buf))) ; } extern "C" { pub fn mp3dec_init (dec : * mut mp3dec_t) ; } pub type mp3d_sample_t = i16 ; extern "C" { pub fn mp3dec_decode_frame (dec : * mut mp3dec_t , mp3 : * const u8 , mp3_bytes : :: std :: os :: raw :: c_int , pcm : * mut mp3d_sample_t , info : * mut mp3dec_frame_info_t) -> :: std :: os :: raw :: c_int ; } pub type __darwin_nl_item = :: std :: os :: raw :: c_int ; pub type __darwin_wctrans_t = :: std :: os :: raw :: c_int ; pub type __darwin_wctype_t = __uint32_t ; pub const idtype_t_P_ALL : idtype_t = 0 ; pub const idtype_t_P_PID : idtype_t = 1 ; pub const idtype_t_P_PGID : idtype_t = 2 ; pub type idtype_t = :: std :: os :: raw :: c_uint ; pub type pid_t = __darwin_pid_t ; pub type id_t = __darwin_id_t ; pub type sig_atomic_t = :: std :: os :: raw :: c_int ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __darwin_i386_thread_state { pub __eax : :: std :: os :: raw :: c_uint , pub __ebx : :: std :: os :: raw :: c_uint , pub __ecx : :: std :: os :: raw :: c_uint , pub __edx : :: std :: os :: raw :: c_uint , pub __edi : :: std :: os :: raw :: c_uint , pub __esi : :: std :: os :: raw :: c_uint , pub __ebp : :: std :: os :: raw :: c_uint , pub __esp : :: std :: os :: raw :: c_uint , pub __ss : :: std :: os :: raw :: c_uint , pub __eflags : :: std :: os :: raw :: c_uint , pub __eip : :: std :: os :: raw :: c_uint , pub __cs : :: std :: os :: raw :: c_uint , pub __ds : :: std :: os :: raw :: c_uint , pub __es : :: std :: os :: raw :: c_uint , pub __fs : :: std :: os :: raw :: c_uint , pub __gs : :: std :: os :: raw :: c_uint , } # [test] fn bindgen_test_layout___darwin_i386_thread_state () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_i386_thread_state > () , 64usize , concat ! ("Size of: " , stringify ! (__darwin_i386_thread_state))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_i386_thread_state > () , 4usize , concat ! ("Alignment of " , stringify ! (__darwin_i386_thread_state))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_thread_state > ())) . __eax as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_thread_state) , "::" , stringify ! (__eax))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_thread_state > ())) . __ebx as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_thread_state) , "::" , stringify ! (__ebx))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_thread_state > ())) . __ecx as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_thread_state) , "::" , stringify ! (__ecx))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_thread_state > ())) . __edx as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_thread_state) , "::" , stringify ! (__edx))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_thread_state > ())) . __edi as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_thread_state) , "::" , stringify ! (__edi))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_thread_state > ())) . __esi as * const _ as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_thread_state) , "::" , stringify ! (__esi))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_thread_state > ())) . __ebp as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_thread_state) , "::" , stringify ! (__ebp))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_thread_state > ())) . __esp as * const _ as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_thread_state) , "::" , stringify ! (__esp))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_thread_state > ())) . __ss as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_thread_state) , "::" , stringify ! (__ss))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_thread_state > ())) . __eflags as * const _ as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_thread_state) , "::" , stringify ! (__eflags))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_thread_state > ())) . __eip as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_thread_state) , "::" , stringify ! (__eip))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_thread_state > ())) . __cs as * const _ as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_thread_state) , "::" , stringify ! (__cs))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_thread_state > ())) . __ds as * const _ as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_thread_state) , "::" , stringify ! (__ds))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_thread_state > ())) . __es as * const _ as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_thread_state) , "::" , stringify ! (__es))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_thread_state > ())) . __fs as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_thread_state) , "::" , stringify ! (__fs))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_thread_state > ())) . __gs as * const _ as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_thread_state) , "::" , stringify ! (__gs))) ; } # [repr (C)] # [repr (align (2))] # [derive (Debug , Copy , Clone)] pub struct __darwin_fp_control { pub _bitfield_align_1 : [u8 ; 0] , pub _bitfield_1 : __BindgenBitfieldUnit < [u8 ; 2usize] > , } # [test] fn bindgen_test_layout___darwin_fp_control () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_fp_control > () , 2usize , concat ! ("Size of: " , stringify ! (__darwin_fp_control))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_fp_control > () , 2usize , concat ! ("Alignment of " , stringify ! (__darwin_fp_control))) ; } impl __darwin_fp_control { # [inline] pub fn __invalid (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (0usize , 1u8) as u16) } } # [inline] pub fn set___invalid (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (0usize , 1u8 , val as u64) } } # [inline] pub fn __denorm (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (1usize , 1u8) as u16) } } # [inline] pub fn set___denorm (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (1usize , 1u8 , val as u64) } } # [inline] pub fn __zdiv (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (2usize , 1u8) as u16) } } # [inline] pub fn set___zdiv (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (2usize , 1u8 , val as u64) } } # [inline] pub fn __ovrfl (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (3usize , 1u8) as u16) } } # [inline] pub fn set___ovrfl (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (3usize , 1u8 , val as u64) } } # [inline] pub fn __undfl (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (4usize , 1u8) as u16) } } # [inline] pub fn set___undfl (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (4usize , 1u8 , val as u64) } } # [inline] pub fn __precis (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (5usize , 1u8) as u16) } } # [inline] pub fn set___precis (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (5usize , 1u8 , val as u64) } } # [inline] pub fn __pc (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (8usize , 2u8) as u16) } } # [inline] pub fn set___pc (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (8usize , 2u8 , val as u64) } } # [inline] pub fn __rc (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (10usize , 2u8) as u16) } } # [inline] pub fn set___rc (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (10usize , 2u8 , val as u64) } } # [inline] pub fn new_bitfield_1 (__invalid : :: std :: os :: raw :: c_ushort , __denorm : :: std :: os :: raw :: c_ushort , __zdiv : :: std :: os :: raw :: c_ushort , __ovrfl : :: std :: os :: raw :: c_ushort , __undfl : :: std :: os :: raw :: c_ushort , __precis : :: std :: os :: raw :: c_ushort , __pc : :: std :: os :: raw :: c_ushort , __rc : :: std :: os :: raw :: c_ushort) -> __BindgenBitfieldUnit < [u8 ; 2usize] > { let mut __bindgen_bitfield_unit : __BindgenBitfieldUnit < [u8 ; 2usize] > = Default :: default () ; __bindgen_bitfield_unit . set (0usize , 1u8 , { let __invalid : u16 = unsafe { :: std :: mem :: transmute (__invalid) } ; __invalid as u64 }) ; __bindgen_bitfield_unit . set (1usize , 1u8 , { let __denorm : u16 = unsafe { :: std :: mem :: transmute (__denorm) } ; __denorm as u64 }) ; __bindgen_bitfield_unit . set (2usize , 1u8 , { let __zdiv : u16 = unsafe { :: std :: mem :: transmute (__zdiv) } ; __zdiv as u64 }) ; __bindgen_bitfield_unit . set (3usize , 1u8 , { let __ovrfl : u16 = unsafe { :: std :: mem :: transmute (__ovrfl) } ; __ovrfl as u64 }) ; __bindgen_bitfield_unit . set (4usize , 1u8 , { let __undfl : u16 = unsafe { :: std :: mem :: transmute (__undfl) } ; __undfl as u64 }) ; __bindgen_bitfield_unit . set (5usize , 1u8 , { let __precis : u16 = unsafe { :: std :: mem :: transmute (__precis) } ; __precis as u64 }) ; __bindgen_bitfield_unit . set (8usize , 2u8 , { let __pc : u16 = unsafe { :: std :: mem :: transmute (__pc) } ; __pc as u64 }) ; __bindgen_bitfield_unit . set (10usize , 2u8 , { let __rc : u16 = unsafe { :: std :: mem :: transmute (__rc) } ; __rc as u64 }) ; __bindgen_bitfield_unit } } pub type __darwin_fp_control_t = __darwin_fp_control ; # [repr (C)] # [repr (align (2))] # [derive (Debug , Copy , Clone)] pub struct __darwin_fp_status { pub _bitfield_align_1 : [u8 ; 0] , pub _bitfield_1 : __BindgenBitfieldUnit < [u8 ; 2usize] > , } # [test] fn bindgen_test_layout___darwin_fp_status () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_fp_status > () , 2usize , concat ! ("Size of: " , stringify ! (__darwin_fp_status))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_fp_status > () , 2usize , concat ! ("Alignment of " , stringify ! (__darwin_fp_status))) ; } impl __darwin_fp_status { # [inline] pub fn __invalid (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (0usize , 1u8) as u16) } } # [inline] pub fn set___invalid (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (0usize , 1u8 , val as u64) } } # [inline] pub fn __denorm (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (1usize , 1u8) as u16) } } # [inline] pub fn set___denorm (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (1usize , 1u8 , val as u64) } } # [inline] pub fn __zdiv (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (2usize , 1u8) as u16) } } # [inline] pub fn set___zdiv (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (2usize , 1u8 , val as u64) } } # [inline] pub fn __ovrfl (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (3usize , 1u8) as u16) } } # [inline] pub fn set___ovrfl (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (3usize , 1u8 , val as u64) } } # [inline] pub fn __undfl (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (4usize , 1u8) as u16) } } # [inline] pub fn set___undfl (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (4usize , 1u8 , val as u64) } } # [inline] pub fn __precis (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (5usize , 1u8) as u16) } } # [inline] pub fn set___precis (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (5usize , 1u8 , val as u64) } } # [inline] pub fn __stkflt (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (6usize , 1u8) as u16) } } # [inline] pub fn set___stkflt (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (6usize , 1u8 , val as u64) } } # [inline] pub fn __errsumm (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (7usize , 1u8) as u16) } } # [inline] pub fn set___errsumm (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (7usize , 1u8 , val as u64) } } # [inline] pub fn __c0 (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (8usize , 1u8) as u16) } } # [inline] pub fn set___c0 (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (8usize , 1u8 , val as u64) } } # [inline] pub fn __c1 (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (9usize , 1u8) as u16) } } # [inline] pub fn set___c1 (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (9usize , 1u8 , val as u64) } } # [inline] pub fn __c2 (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (10usize , 1u8) as u16) } } # [inline] pub fn set___c2 (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (10usize , 1u8 , val as u64) } } # [inline] pub fn __tos (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (11usize , 3u8) as u16) } } # [inline] pub fn set___tos (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (11usize , 3u8 , val as u64) } } # [inline] pub fn __c3 (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (14usize , 1u8) as u16) } } # [inline] pub fn set___c3 (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (14usize , 1u8 , val as u64) } } # [inline] pub fn __busy (& self) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (15usize , 1u8) as u16) } } # [inline] pub fn set___busy (& mut self , val : :: std :: os :: raw :: c_ushort) { unsafe { let val : u16 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (15usize , 1u8 , val as u64) } } # [inline] pub fn new_bitfield_1 (__invalid : :: std :: os :: raw :: c_ushort , __denorm : :: std :: os :: raw :: c_ushort , __zdiv : :: std :: os :: raw :: c_ushort , __ovrfl : :: std :: os :: raw :: c_ushort , __undfl : :: std :: os :: raw :: c_ushort , __precis : :: std :: os :: raw :: c_ushort , __stkflt : :: std :: os :: raw :: c_ushort , __errsumm : :: std :: os :: raw :: c_ushort , __c0 : :: std :: os :: raw :: c_ushort , __c1 : :: std :: os :: raw :: c_ushort , __c2 : :: std :: os :: raw :: c_ushort , __tos : :: std :: os :: raw :: c_ushort , __c3 : :: std :: os :: raw :: c_ushort , __busy : :: std :: os :: raw :: c_ushort) -> __BindgenBitfieldUnit < [u8 ; 2usize] > { let mut __bindgen_bitfield_unit : __BindgenBitfieldUnit < [u8 ; 2usize] > = Default :: default () ; __bindgen_bitfield_unit . set (0usize , 1u8 , { let __invalid : u16 = unsafe { :: std :: mem :: transmute (__invalid) } ; __invalid as u64 }) ; __bindgen_bitfield_unit . set (1usize , 1u8 , { let __denorm : u16 = unsafe { :: std :: mem :: transmute (__denorm) } ; __denorm as u64 }) ; __bindgen_bitfield_unit . set (2usize , 1u8 , { let __zdiv : u16 = unsafe { :: std :: mem :: transmute (__zdiv) } ; __zdiv as u64 }) ; __bindgen_bitfield_unit . set (3usize , 1u8 , { let __ovrfl : u16 = unsafe { :: std :: mem :: transmute (__ovrfl) } ; __ovrfl as u64 }) ; __bindgen_bitfield_unit . set (4usize , 1u8 , { let __undfl : u16 = unsafe { :: std :: mem :: transmute (__undfl) } ; __undfl as u64 }) ; __bindgen_bitfield_unit . set (5usize , 1u8 , { let __precis : u16 = unsafe { :: std :: mem :: transmute (__precis) } ; __precis as u64 }) ; __bindgen_bitfield_unit . set (6usize , 1u8 , { let __stkflt : u16 = unsafe { :: std :: mem :: transmute (__stkflt) } ; __stkflt as u64 }) ; __bindgen_bitfield_unit . set (7usize , 1u8 , { let __errsumm : u16 = unsafe { :: std :: mem :: transmute (__errsumm) } ; __errsumm as u64 }) ; __bindgen_bitfield_unit . set (8usize , 1u8 , { let __c0 : u16 = unsafe { :: std :: mem :: transmute (__c0) } ; __c0 as u64 }) ; __bindgen_bitfield_unit . set (9usize , 1u8 , { let __c1 : u16 = unsafe { :: std :: mem :: transmute (__c1) } ; __c1 as u64 }) ; __bindgen_bitfield_unit . set (10usize , 1u8 , { let __c2 : u16 = unsafe { :: std :: mem :: transmute (__c2) } ; __c2 as u64 }) ; __bindgen_bitfield_unit . set (11usize , 3u8 , { let __tos : u16 = unsafe { :: std :: mem :: transmute (__tos) } ; __tos as u64 }) ; __bindgen_bitfield_unit . set (14usize , 1u8 , { let __c3 : u16 = unsafe { :: std :: mem :: transmute (__c3) } ; __c3 as u64 }) ; __bindgen_bitfield_unit . set (15usize , 1u8 , { let __busy : u16 = unsafe { :: std :: mem :: transmute (__busy) } ; __busy as u64 }) ; __bindgen_bitfield_unit } } pub type __darwin_fp_status_t = __darwin_fp_status ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __darwin_mmst_reg { pub __mmst_reg : [:: std :: os :: raw :: c_char ; 10usize] , pub __mmst_rsrv : [:: std :: os :: raw :: c_char ; 6usize] , } # [test] fn bindgen_test_layout___darwin_mmst_reg () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_mmst_reg > () , 16usize , concat ! ("Size of: " , stringify ! (__darwin_mmst_reg))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_mmst_reg > () , 1usize , concat ! ("Alignment of " , stringify ! (__darwin_mmst_reg))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mmst_reg > ())) . __mmst_reg as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_mmst_reg) , "::" , stringify ! (__mmst_reg))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mmst_reg > ())) . __mmst_rsrv as * const _ as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (__darwin_mmst_reg) , "::" , stringify ! (__mmst_rsrv))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __darwin_xmm_reg { pub __xmm_reg : [:: std :: os :: raw :: c_char ; 16usize] , } # [test] fn bindgen_test_layout___darwin_xmm_reg () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_xmm_reg > () , 16usize , concat ! ("Size of: " , stringify ! (__darwin_xmm_reg))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_xmm_reg > () , 1usize , concat ! ("Alignment of " , stringify ! (__darwin_xmm_reg))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_xmm_reg > ())) . __xmm_reg as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_xmm_reg) , "::" , stringify ! (__xmm_reg))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __darwin_ymm_reg { pub __ymm_reg : [:: std :: os :: raw :: c_char ; 32usize] , } # [test] fn bindgen_test_layout___darwin_ymm_reg () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_ymm_reg > () , 32usize , concat ! ("Size of: " , stringify ! (__darwin_ymm_reg))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_ymm_reg > () , 1usize , concat ! ("Alignment of " , stringify ! (__darwin_ymm_reg))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_ymm_reg > ())) . __ymm_reg as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_ymm_reg) , "::" , stringify ! (__ymm_reg))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __darwin_zmm_reg { pub __zmm_reg : [:: std :: os :: raw :: c_char ; 64usize] , } # [test] fn bindgen_test_layout___darwin_zmm_reg () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_zmm_reg > () , 64usize , concat ! ("Size of: " , stringify ! (__darwin_zmm_reg))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_zmm_reg > () , 1usize , concat ! ("Alignment of " , stringify ! (__darwin_zmm_reg))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_zmm_reg > ())) . __zmm_reg as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_zmm_reg) , "::" , stringify ! (__zmm_reg))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __darwin_opmask_reg { pub __opmask_reg : [:: std :: os :: raw :: c_char ; 8usize] , } # [test] fn bindgen_test_layout___darwin_opmask_reg () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_opmask_reg > () , 8usize , concat ! ("Size of: " , stringify ! (__darwin_opmask_reg))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_opmask_reg > () , 1usize , concat ! ("Alignment of " , stringify ! (__darwin_opmask_reg))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_opmask_reg > ())) . __opmask_reg as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_opmask_reg) , "::" , stringify ! (__opmask_reg))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __darwin_i386_float_state { pub __fpu_reserved : [:: std :: os :: raw :: c_int ; 2usize] , pub __fpu_fcw : __darwin_fp_control , pub __fpu_fsw : __darwin_fp_status , pub __fpu_ftw : __uint8_t , pub __fpu_rsrv1 : __uint8_t , pub __fpu_fop : __uint16_t , pub __fpu_ip : __uint32_t , pub __fpu_cs : __uint16_t , pub __fpu_rsrv2 : __uint16_t , pub __fpu_dp : __uint32_t , pub __fpu_ds : __uint16_t , pub __fpu_rsrv3 : __uint16_t , pub __fpu_mxcsr : __uint32_t , pub __fpu_mxcsrmask : __uint32_t , pub __fpu_stmm0 : __darwin_mmst_reg , pub __fpu_stmm1 : __darwin_mmst_reg , pub __fpu_stmm2 : __darwin_mmst_reg , pub __fpu_stmm3 : __darwin_mmst_reg , pub __fpu_stmm4 : __darwin_mmst_reg , pub __fpu_stmm5 : __darwin_mmst_reg , pub __fpu_stmm6 : __darwin_mmst_reg , pub __fpu_stmm7 : __darwin_mmst_reg , pub __fpu_xmm0 : __darwin_xmm_reg , pub __fpu_xmm1 : __darwin_xmm_reg , pub __fpu_xmm2 : __darwin_xmm_reg , pub __fpu_xmm3 : __darwin_xmm_reg , pub __fpu_xmm4 : __darwin_xmm_reg , pub __fpu_xmm5 : __darwin_xmm_reg , pub __fpu_xmm6 : __darwin_xmm_reg , pub __fpu_xmm7 : __darwin_xmm_reg , pub __fpu_rsrv4 : [:: std :: os :: raw :: c_char ; 224usize] , pub __fpu_reserved1 : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout___darwin_i386_float_state () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_i386_float_state > () , 524usize , concat ! ("Size of: " , stringify ! (__darwin_i386_float_state))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_i386_float_state > () , 4usize , concat ! ("Alignment of " , stringify ! (__darwin_i386_float_state))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_reserved as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_reserved))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_fcw as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_fcw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_fsw as * const _ as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_fsw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_ftw as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_ftw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_rsrv1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_fop as * const _ as usize } , 14usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_fop))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_ip as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_ip))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_cs as * const _ as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_cs))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_rsrv2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_dp as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_dp))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_ds as * const _ as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_ds))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_rsrv3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_mxcsr as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_mxcsr))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_mxcsrmask))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_stmm0 as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_stmm0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_stmm1 as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_stmm1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_stmm2 as * const _ as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_stmm2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_stmm3 as * const _ as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_stmm3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_stmm4 as * const _ as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_stmm4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_stmm5 as * const _ as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_stmm5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_stmm6 as * const _ as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_stmm6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_stmm7 as * const _ as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_stmm7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_xmm0 as * const _ as usize } , 168usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_xmm0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_xmm1 as * const _ as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_xmm1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_xmm2 as * const _ as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_xmm2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_xmm3 as * const _ as usize } , 216usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_xmm3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_xmm4 as * const _ as usize } , 232usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_xmm4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_xmm5 as * const _ as usize } , 248usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_xmm5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_xmm6 as * const _ as usize } , 264usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_xmm6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_xmm7 as * const _ as usize } , 280usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_xmm7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_rsrv4 as * const _ as usize } , 296usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_rsrv4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_float_state > ())) . __fpu_reserved1 as * const _ as usize } , 520usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_float_state) , "::" , stringify ! (__fpu_reserved1))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __darwin_i386_avx_state { pub __fpu_reserved : [:: std :: os :: raw :: c_int ; 2usize] , pub __fpu_fcw : __darwin_fp_control , pub __fpu_fsw : __darwin_fp_status , pub __fpu_ftw : __uint8_t , pub __fpu_rsrv1 : __uint8_t , pub __fpu_fop : __uint16_t , pub __fpu_ip : __uint32_t , pub __fpu_cs : __uint16_t , pub __fpu_rsrv2 : __uint16_t , pub __fpu_dp : __uint32_t , pub __fpu_ds : __uint16_t , pub __fpu_rsrv3 : __uint16_t , pub __fpu_mxcsr : __uint32_t , pub __fpu_mxcsrmask : __uint32_t , pub __fpu_stmm0 : __darwin_mmst_reg , pub __fpu_stmm1 : __darwin_mmst_reg , pub __fpu_stmm2 : __darwin_mmst_reg , pub __fpu_stmm3 : __darwin_mmst_reg , pub __fpu_stmm4 : __darwin_mmst_reg , pub __fpu_stmm5 : __darwin_mmst_reg , pub __fpu_stmm6 : __darwin_mmst_reg , pub __fpu_stmm7 : __darwin_mmst_reg , pub __fpu_xmm0 : __darwin_xmm_reg , pub __fpu_xmm1 : __darwin_xmm_reg , pub __fpu_xmm2 : __darwin_xmm_reg , pub __fpu_xmm3 : __darwin_xmm_reg , pub __fpu_xmm4 : __darwin_xmm_reg , pub __fpu_xmm5 : __darwin_xmm_reg , pub __fpu_xmm6 : __darwin_xmm_reg , pub __fpu_xmm7 : __darwin_xmm_reg , pub __fpu_rsrv4 : [:: std :: os :: raw :: c_char ; 224usize] , pub __fpu_reserved1 : :: std :: os :: raw :: c_int , pub __avx_reserved1 : [:: std :: os :: raw :: c_char ; 64usize] , pub __fpu_ymmh0 : __darwin_xmm_reg , pub __fpu_ymmh1 : __darwin_xmm_reg , pub __fpu_ymmh2 : __darwin_xmm_reg , pub __fpu_ymmh3 : __darwin_xmm_reg , pub __fpu_ymmh4 : __darwin_xmm_reg , pub __fpu_ymmh5 : __darwin_xmm_reg , pub __fpu_ymmh6 : __darwin_xmm_reg , pub __fpu_ymmh7 : __darwin_xmm_reg , } # [test] fn bindgen_test_layout___darwin_i386_avx_state () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_i386_avx_state > () , 716usize , concat ! ("Size of: " , stringify ! (__darwin_i386_avx_state))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_i386_avx_state > () , 4usize , concat ! ("Alignment of " , stringify ! (__darwin_i386_avx_state))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_reserved as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_reserved))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_fcw as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_fcw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_fsw as * const _ as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_fsw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_ftw as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_ftw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_rsrv1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_fop as * const _ as usize } , 14usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_fop))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_ip as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_ip))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_cs as * const _ as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_cs))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_rsrv2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_dp as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_dp))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_ds as * const _ as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_ds))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_rsrv3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_mxcsr as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_mxcsr))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_mxcsrmask))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_stmm0 as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_stmm0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_stmm1 as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_stmm1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_stmm2 as * const _ as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_stmm2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_stmm3 as * const _ as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_stmm3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_stmm4 as * const _ as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_stmm4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_stmm5 as * const _ as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_stmm5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_stmm6 as * const _ as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_stmm6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_stmm7 as * const _ as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_stmm7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_xmm0 as * const _ as usize } , 168usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_xmm0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_xmm1 as * const _ as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_xmm1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_xmm2 as * const _ as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_xmm2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_xmm3 as * const _ as usize } , 216usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_xmm3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_xmm4 as * const _ as usize } , 232usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_xmm4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_xmm5 as * const _ as usize } , 248usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_xmm5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_xmm6 as * const _ as usize } , 264usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_xmm6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_xmm7 as * const _ as usize } , 280usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_xmm7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_rsrv4 as * const _ as usize } , 296usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_rsrv4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_reserved1 as * const _ as usize } , 520usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_reserved1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __avx_reserved1 as * const _ as usize } , 524usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__avx_reserved1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_ymmh0 as * const _ as usize } , 588usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_ymmh0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_ymmh1 as * const _ as usize } , 604usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_ymmh1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_ymmh2 as * const _ as usize } , 620usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_ymmh2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_ymmh3 as * const _ as usize } , 636usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_ymmh3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_ymmh4 as * const _ as usize } , 652usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_ymmh4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_ymmh5 as * const _ as usize } , 668usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_ymmh5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_ymmh6 as * const _ as usize } , 684usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_ymmh6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx_state > ())) . __fpu_ymmh7 as * const _ as usize } , 700usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx_state) , "::" , stringify ! (__fpu_ymmh7))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __darwin_i386_avx512_state { pub __fpu_reserved : [:: std :: os :: raw :: c_int ; 2usize] , pub __fpu_fcw : __darwin_fp_control , pub __fpu_fsw : __darwin_fp_status , pub __fpu_ftw : __uint8_t , pub __fpu_rsrv1 : __uint8_t , pub __fpu_fop : __uint16_t , pub __fpu_ip : __uint32_t , pub __fpu_cs : __uint16_t , pub __fpu_rsrv2 : __uint16_t , pub __fpu_dp : __uint32_t , pub __fpu_ds : __uint16_t , pub __fpu_rsrv3 : __uint16_t , pub __fpu_mxcsr : __uint32_t , pub __fpu_mxcsrmask : __uint32_t , pub __fpu_stmm0 : __darwin_mmst_reg , pub __fpu_stmm1 : __darwin_mmst_reg , pub __fpu_stmm2 : __darwin_mmst_reg , pub __fpu_stmm3 : __darwin_mmst_reg , pub __fpu_stmm4 : __darwin_mmst_reg , pub __fpu_stmm5 : __darwin_mmst_reg , pub __fpu_stmm6 : __darwin_mmst_reg , pub __fpu_stmm7 : __darwin_mmst_reg , pub __fpu_xmm0 : __darwin_xmm_reg , pub __fpu_xmm1 : __darwin_xmm_reg , pub __fpu_xmm2 : __darwin_xmm_reg , pub __fpu_xmm3 : __darwin_xmm_reg , pub __fpu_xmm4 : __darwin_xmm_reg , pub __fpu_xmm5 : __darwin_xmm_reg , pub __fpu_xmm6 : __darwin_xmm_reg , pub __fpu_xmm7 : __darwin_xmm_reg , pub __fpu_rsrv4 : [:: std :: os :: raw :: c_char ; 224usize] , pub __fpu_reserved1 : :: std :: os :: raw :: c_int , pub __avx_reserved1 : [:: std :: os :: raw :: c_char ; 64usize] , pub __fpu_ymmh0 : __darwin_xmm_reg , pub __fpu_ymmh1 : __darwin_xmm_reg , pub __fpu_ymmh2 : __darwin_xmm_reg , pub __fpu_ymmh3 : __darwin_xmm_reg , pub __fpu_ymmh4 : __darwin_xmm_reg , pub __fpu_ymmh5 : __darwin_xmm_reg , pub __fpu_ymmh6 : __darwin_xmm_reg , pub __fpu_ymmh7 : __darwin_xmm_reg , pub __fpu_k0 : __darwin_opmask_reg , pub __fpu_k1 : __darwin_opmask_reg , pub __fpu_k2 : __darwin_opmask_reg , pub __fpu_k3 : __darwin_opmask_reg , pub __fpu_k4 : __darwin_opmask_reg , pub __fpu_k5 : __darwin_opmask_reg , pub __fpu_k6 : __darwin_opmask_reg , pub __fpu_k7 : __darwin_opmask_reg , pub __fpu_zmmh0 : __darwin_ymm_reg , pub __fpu_zmmh1 : __darwin_ymm_reg , pub __fpu_zmmh2 : __darwin_ymm_reg , pub __fpu_zmmh3 : __darwin_ymm_reg , pub __fpu_zmmh4 : __darwin_ymm_reg , pub __fpu_zmmh5 : __darwin_ymm_reg , pub __fpu_zmmh6 : __darwin_ymm_reg , pub __fpu_zmmh7 : __darwin_ymm_reg , } # [test] fn bindgen_test_layout___darwin_i386_avx512_state () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_i386_avx512_state > () , 1036usize , concat ! ("Size of: " , stringify ! (__darwin_i386_avx512_state))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_i386_avx512_state > () , 4usize , concat ! ("Alignment of " , stringify ! (__darwin_i386_avx512_state))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_reserved as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_reserved))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_fcw as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_fcw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_fsw as * const _ as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_fsw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_ftw as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_ftw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_rsrv1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_fop as * const _ as usize } , 14usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_fop))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_ip as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_ip))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_cs as * const _ as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_cs))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_rsrv2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_dp as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_dp))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_ds as * const _ as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_ds))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_rsrv3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_mxcsr as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_mxcsr))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_mxcsrmask))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_stmm0 as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_stmm0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_stmm1 as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_stmm1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_stmm2 as * const _ as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_stmm2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_stmm3 as * const _ as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_stmm3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_stmm4 as * const _ as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_stmm4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_stmm5 as * const _ as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_stmm5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_stmm6 as * const _ as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_stmm6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_stmm7 as * const _ as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_stmm7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_xmm0 as * const _ as usize } , 168usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_xmm0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_xmm1 as * const _ as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_xmm1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_xmm2 as * const _ as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_xmm2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_xmm3 as * const _ as usize } , 216usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_xmm3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_xmm4 as * const _ as usize } , 232usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_xmm4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_xmm5 as * const _ as usize } , 248usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_xmm5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_xmm6 as * const _ as usize } , 264usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_xmm6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_xmm7 as * const _ as usize } , 280usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_xmm7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_rsrv4 as * const _ as usize } , 296usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_rsrv4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_reserved1 as * const _ as usize } , 520usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_reserved1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __avx_reserved1 as * const _ as usize } , 524usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__avx_reserved1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_ymmh0 as * const _ as usize } , 588usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_ymmh0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_ymmh1 as * const _ as usize } , 604usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_ymmh1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_ymmh2 as * const _ as usize } , 620usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_ymmh2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_ymmh3 as * const _ as usize } , 636usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_ymmh3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_ymmh4 as * const _ as usize } , 652usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_ymmh4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_ymmh5 as * const _ as usize } , 668usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_ymmh5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_ymmh6 as * const _ as usize } , 684usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_ymmh6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_ymmh7 as * const _ as usize } , 700usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_ymmh7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_k0 as * const _ as usize } , 716usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_k0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_k1 as * const _ as usize } , 724usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_k1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_k2 as * const _ as usize } , 732usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_k2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_k3 as * const _ as usize } , 740usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_k3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_k4 as * const _ as usize } , 748usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_k4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_k5 as * const _ as usize } , 756usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_k5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_k6 as * const _ as usize } , 764usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_k6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_k7 as * const _ as usize } , 772usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_k7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_zmmh0 as * const _ as usize } , 780usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_zmmh0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_zmmh1 as * const _ as usize } , 812usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_zmmh1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_zmmh2 as * const _ as usize } , 844usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_zmmh2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_zmmh3 as * const _ as usize } , 876usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_zmmh3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_zmmh4 as * const _ as usize } , 908usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_zmmh4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_zmmh5 as * const _ as usize } , 940usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_zmmh5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_zmmh6 as * const _ as usize } , 972usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_zmmh6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_avx512_state > ())) . __fpu_zmmh7 as * const _ as usize } , 1004usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_avx512_state) , "::" , stringify ! (__fpu_zmmh7))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __darwin_i386_exception_state { pub __trapno : __uint16_t , pub __cpu : __uint16_t , pub __err : __uint32_t , pub __faultvaddr : __uint32_t , } # [test] fn bindgen_test_layout___darwin_i386_exception_state () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_i386_exception_state > () , 12usize , concat ! ("Size of: " , stringify ! (__darwin_i386_exception_state))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_i386_exception_state > () , 4usize , concat ! ("Alignment of " , stringify ! (__darwin_i386_exception_state))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_exception_state > ())) . __trapno as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_exception_state) , "::" , stringify ! (__trapno))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_exception_state > ())) . __cpu as * const _ as usize } , 2usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_exception_state) , "::" , stringify ! (__cpu))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_exception_state > ())) . __err as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_exception_state) , "::" , stringify ! (__err))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_i386_exception_state > ())) . __faultvaddr as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__darwin_i386_exception_state) , "::" , stringify ! (__faultvaddr))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __darwin_x86_debug_state32 { pub __dr0 : :: std :: os :: raw :: c_uint , pub __dr1 : :: std :: os :: raw :: c_uint , pub __dr2 : :: std :: os :: raw :: c_uint , pub __dr3 : :: std :: os :: raw :: c_uint , pub __dr4 : :: std :: os :: raw :: c_uint , pub __dr5 : :: std :: os :: raw :: c_uint , pub __dr6 : :: std :: os :: raw :: c_uint , pub __dr7 : :: std :: os :: raw :: c_uint , } # [test] fn bindgen_test_layout___darwin_x86_debug_state32 () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_x86_debug_state32 > () , 32usize , concat ! ("Size of: " , stringify ! (__darwin_x86_debug_state32))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_x86_debug_state32 > () , 4usize , concat ! ("Alignment of " , stringify ! (__darwin_x86_debug_state32))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_debug_state32 > ())) . __dr0 as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_debug_state32) , "::" , stringify ! (__dr0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_debug_state32 > ())) . __dr1 as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_debug_state32) , "::" , stringify ! (__dr1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_debug_state32 > ())) . __dr2 as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_debug_state32) , "::" , stringify ! (__dr2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_debug_state32 > ())) . __dr3 as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_debug_state32) , "::" , stringify ! (__dr3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_debug_state32 > ())) . __dr4 as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_debug_state32) , "::" , stringify ! (__dr4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_debug_state32 > ())) . __dr5 as * const _ as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_debug_state32) , "::" , stringify ! (__dr5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_debug_state32 > ())) . __dr6 as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_debug_state32) , "::" , stringify ! (__dr6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_debug_state32 > ())) . __dr7 as * const _ as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_debug_state32) , "::" , stringify ! (__dr7))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __x86_instruction_state { pub __insn_stream_valid_bytes : :: std :: os :: raw :: c_int , pub __insn_offset : :: std :: os :: raw :: c_int , pub __out_of_synch : :: std :: os :: raw :: c_int , pub __insn_bytes : [__uint8_t ; 2380usize] , pub __insn_cacheline : [__uint8_t ; 64usize] , } # [test] fn bindgen_test_layout___x86_instruction_state () { assert_eq ! (:: std :: mem :: size_of :: < __x86_instruction_state > () , 2456usize , concat ! ("Size of: " , stringify ! (__x86_instruction_state))) ; assert_eq ! (:: std :: mem :: align_of :: < __x86_instruction_state > () , 4usize , concat ! ("Alignment of " , stringify ! (__x86_instruction_state))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __x86_instruction_state > ())) . __insn_stream_valid_bytes as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__x86_instruction_state) , "::" , stringify ! (__insn_stream_valid_bytes))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __x86_instruction_state > ())) . __insn_offset as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (__x86_instruction_state) , "::" , stringify ! (__insn_offset))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __x86_instruction_state > ())) . __out_of_synch as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__x86_instruction_state) , "::" , stringify ! (__out_of_synch))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __x86_instruction_state > ())) . __insn_bytes as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (__x86_instruction_state) , "::" , stringify ! (__insn_bytes))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __x86_instruction_state > ())) . __insn_cacheline as * const _ as usize } , 2392usize , concat ! ("Offset of field: " , stringify ! (__x86_instruction_state) , "::" , stringify ! (__insn_cacheline))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __last_branch_record { pub __from_ip : __uint64_t , pub __to_ip : __uint64_t , pub _bitfield_align_1 : [u16 ; 0] , pub _bitfield_1 : __BindgenBitfieldUnit < [u8 ; 4usize] > , pub __bindgen_padding_0 : u32 , } # [test] fn bindgen_test_layout___last_branch_record () { assert_eq ! (:: std :: mem :: size_of :: < __last_branch_record > () , 24usize , concat ! ("Size of: " , stringify ! (__last_branch_record))) ; assert_eq ! (:: std :: mem :: align_of :: < __last_branch_record > () , 8usize , concat ! ("Alignment of " , stringify ! (__last_branch_record))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __last_branch_record > ())) . __from_ip as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__last_branch_record) , "::" , stringify ! (__from_ip))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __last_branch_record > ())) . __to_ip as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__last_branch_record) , "::" , stringify ! (__to_ip))) ; } impl __last_branch_record { # [inline] pub fn __mispredict (& self) -> __uint32_t { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (0usize , 1u8) as u32) } } # [inline] pub fn set___mispredict (& mut self , val : __uint32_t) { unsafe { let val : u32 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (0usize , 1u8 , val as u64) } } # [inline] pub fn __tsx_abort (& self) -> __uint32_t { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (1usize , 1u8) as u32) } } # [inline] pub fn set___tsx_abort (& mut self , val : __uint32_t) { unsafe { let val : u32 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (1usize , 1u8 , val as u64) } } # [inline] pub fn __in_tsx (& self) -> __uint32_t { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (2usize , 1u8) as u32) } } # [inline] pub fn set___in_tsx (& mut self , val : __uint32_t) { unsafe { let val : u32 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (2usize , 1u8 , val as u64) } } # [inline] pub fn __cycle_count (& self) -> __uint32_t { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (3usize , 16u8) as u32) } } # [inline] pub fn set___cycle_count (& mut self , val : __uint32_t) { unsafe { let val : u32 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (3usize , 16u8 , val as u64) } } # [inline] pub fn __reserved (& self) -> __uint32_t { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (19usize , 13u8) as u32) } } # [inline] pub fn set___reserved (& mut self , val : __uint32_t) { unsafe { let val : u32 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (19usize , 13u8 , val as u64) } } # [inline] pub fn new_bitfield_1 (__mispredict : __uint32_t , __tsx_abort : __uint32_t , __in_tsx : __uint32_t , __cycle_count : __uint32_t , __reserved : __uint32_t) -> __BindgenBitfieldUnit < [u8 ; 4usize] > { let mut __bindgen_bitfield_unit : __BindgenBitfieldUnit < [u8 ; 4usize] > = Default :: default () ; __bindgen_bitfield_unit . set (0usize , 1u8 , { let __mispredict : u32 = unsafe { :: std :: mem :: transmute (__mispredict) } ; __mispredict as u64 }) ; __bindgen_bitfield_unit . set (1usize , 1u8 , { let __tsx_abort : u32 = unsafe { :: std :: mem :: transmute (__tsx_abort) } ; __tsx_abort as u64 }) ; __bindgen_bitfield_unit . set (2usize , 1u8 , { let __in_tsx : u32 = unsafe { :: std :: mem :: transmute (__in_tsx) } ; __in_tsx as u64 }) ; __bindgen_bitfield_unit . set (3usize , 16u8 , { let __cycle_count : u32 = unsafe { :: std :: mem :: transmute (__cycle_count) } ; __cycle_count as u64 }) ; __bindgen_bitfield_unit . set (19usize , 13u8 , { let __reserved : u32 = unsafe { :: std :: mem :: transmute (__reserved) } ; __reserved as u64 }) ; __bindgen_bitfield_unit } } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __last_branch_state { pub __lbr_count : :: std :: os :: raw :: c_int , pub _bitfield_align_1 : [u32 ; 0] , pub _bitfield_1 : __BindgenBitfieldUnit < [u8 ; 4usize] > , pub __lbrs : [__last_branch_record ; 32usize] , } # [test] fn bindgen_test_layout___last_branch_state () { assert_eq ! (:: std :: mem :: size_of :: < __last_branch_state > () , 776usize , concat ! ("Size of: " , stringify ! (__last_branch_state))) ; assert_eq ! (:: std :: mem :: align_of :: < __last_branch_state > () , 8usize , concat ! ("Alignment of " , stringify ! (__last_branch_state))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __last_branch_state > ())) . __lbr_count as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__last_branch_state) , "::" , stringify ! (__lbr_count))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __last_branch_state > ())) . __lbrs as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__last_branch_state) , "::" , stringify ! (__lbrs))) ; } impl __last_branch_state { # [inline] pub fn __lbr_supported_tsx (& self) -> __uint32_t { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (0usize , 1u8) as u32) } } # [inline] pub fn set___lbr_supported_tsx (& mut self , val : __uint32_t) { unsafe { let val : u32 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (0usize , 1u8 , val as u64) } } # [inline] pub fn __lbr_supported_cycle_count (& self) -> __uint32_t { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (1usize , 1u8) as u32) } } # [inline] pub fn set___lbr_supported_cycle_count (& mut self , val : __uint32_t) { unsafe { let val : u32 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (1usize , 1u8 , val as u64) } } # [inline] pub fn __reserved (& self) -> __uint32_t { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (2usize , 30u8) as u32) } } # [inline] pub fn set___reserved (& mut self , val : __uint32_t) { unsafe { let val : u32 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (2usize , 30u8 , val as u64) } } # [inline] pub fn new_bitfield_1 (__lbr_supported_tsx : __uint32_t , __lbr_supported_cycle_count : __uint32_t , __reserved : __uint32_t) -> __BindgenBitfieldUnit < [u8 ; 4usize] > { let mut __bindgen_bitfield_unit : __BindgenBitfieldUnit < [u8 ; 4usize] > = Default :: default () ; __bindgen_bitfield_unit . set (0usize , 1u8 , { let __lbr_supported_tsx : u32 = unsafe { :: std :: mem :: transmute (__lbr_supported_tsx) } ; __lbr_supported_tsx as u64 }) ; __bindgen_bitfield_unit . set (1usize , 1u8 , { let __lbr_supported_cycle_count : u32 = unsafe { :: std :: mem :: transmute (__lbr_supported_cycle_count) } ; __lbr_supported_cycle_count as u64 }) ; __bindgen_bitfield_unit . set (2usize , 30u8 , { let __reserved : u32 = unsafe { :: std :: mem :: transmute (__reserved) } ; __reserved as u64 }) ; __bindgen_bitfield_unit } } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __x86_pagein_state { pub __pagein_error : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout___x86_pagein_state () { assert_eq ! (:: std :: mem :: size_of :: < __x86_pagein_state > () , 4usize , concat ! ("Size of: " , stringify ! (__x86_pagein_state))) ; assert_eq ! (:: std :: mem :: align_of :: < __x86_pagein_state > () , 4usize , concat ! ("Alignment of " , stringify ! (__x86_pagein_state))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __x86_pagein_state > ())) . __pagein_error as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__x86_pagein_state) , "::" , stringify ! (__pagein_error))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __darwin_x86_thread_state64 { pub __rax : __uint64_t , pub __rbx : __uint64_t , pub __rcx : __uint64_t , pub __rdx : __uint64_t , pub __rdi : __uint64_t , pub __rsi : __uint64_t , pub __rbp : __uint64_t , pub __rsp : __uint64_t , pub __r8 : __uint64_t , pub __r9 : __uint64_t , pub __r10 : __uint64_t , pub __r11 : __uint64_t , pub __r12 : __uint64_t , pub __r13 : __uint64_t , pub __r14 : __uint64_t , pub __r15 : __uint64_t , pub __rip : __uint64_t , pub __rflags : __uint64_t , pub __cs : __uint64_t , pub __fs : __uint64_t , pub __gs : __uint64_t , } # [test] fn bindgen_test_layout___darwin_x86_thread_state64 () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_x86_thread_state64 > () , 168usize , concat ! ("Size of: " , stringify ! (__darwin_x86_thread_state64))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_x86_thread_state64 > () , 8usize , concat ! ("Alignment of " , stringify ! (__darwin_x86_thread_state64))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __rax as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__rax))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __rbx as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__rbx))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __rcx as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__rcx))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __rdx as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__rdx))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __rdi as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__rdi))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __rsi as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__rsi))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __rbp as * const _ as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__rbp))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __rsp as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__rsp))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __r8 as * const _ as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__r8))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __r9 as * const _ as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__r9))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __r10 as * const _ as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__r10))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __r11 as * const _ as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__r11))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __r12 as * const _ as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__r12))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __r13 as * const _ as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__r13))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __r14 as * const _ as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__r14))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __r15 as * const _ as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__r15))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __rip as * const _ as usize } , 128usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__rip))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __rflags as * const _ as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__rflags))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __cs as * const _ as usize } , 144usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__cs))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __fs as * const _ as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__fs))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_state64 > ())) . __gs as * const _ as usize } , 160usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_state64) , "::" , stringify ! (__gs))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __darwin_x86_thread_full_state64 { pub __ss64 : __darwin_x86_thread_state64 , pub __ds : __uint64_t , pub __es : __uint64_t , pub __ss : __uint64_t , pub __gsbase : __uint64_t , } # [test] fn bindgen_test_layout___darwin_x86_thread_full_state64 () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_x86_thread_full_state64 > () , 200usize , concat ! ("Size of: " , stringify ! (__darwin_x86_thread_full_state64))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_x86_thread_full_state64 > () , 8usize , concat ! ("Alignment of " , stringify ! (__darwin_x86_thread_full_state64))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_full_state64 > ())) . __ss64 as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_full_state64) , "::" , stringify ! (__ss64))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_full_state64 > ())) . __ds as * const _ as usize } , 168usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_full_state64) , "::" , stringify ! (__ds))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_full_state64 > ())) . __es as * const _ as usize } , 176usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_full_state64) , "::" , stringify ! (__es))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_full_state64 > ())) . __ss as * const _ as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_full_state64) , "::" , stringify ! (__ss))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_thread_full_state64 > ())) . __gsbase as * const _ as usize } , 192usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_thread_full_state64) , "::" , stringify ! (__gsbase))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __darwin_x86_float_state64 { pub __fpu_reserved : [:: std :: os :: raw :: c_int ; 2usize] , pub __fpu_fcw : __darwin_fp_control , pub __fpu_fsw : __darwin_fp_status , pub __fpu_ftw : __uint8_t , pub __fpu_rsrv1 : __uint8_t , pub __fpu_fop : __uint16_t , pub __fpu_ip : __uint32_t , pub __fpu_cs : __uint16_t , pub __fpu_rsrv2 : __uint16_t , pub __fpu_dp : __uint32_t , pub __fpu_ds : __uint16_t , pub __fpu_rsrv3 : __uint16_t , pub __fpu_mxcsr : __uint32_t , pub __fpu_mxcsrmask : __uint32_t , pub __fpu_stmm0 : __darwin_mmst_reg , pub __fpu_stmm1 : __darwin_mmst_reg , pub __fpu_stmm2 : __darwin_mmst_reg , pub __fpu_stmm3 : __darwin_mmst_reg , pub __fpu_stmm4 : __darwin_mmst_reg , pub __fpu_stmm5 : __darwin_mmst_reg , pub __fpu_stmm6 : __darwin_mmst_reg , pub __fpu_stmm7 : __darwin_mmst_reg , pub __fpu_xmm0 : __darwin_xmm_reg , pub __fpu_xmm1 : __darwin_xmm_reg , pub __fpu_xmm2 : __darwin_xmm_reg , pub __fpu_xmm3 : __darwin_xmm_reg , pub __fpu_xmm4 : __darwin_xmm_reg , pub __fpu_xmm5 : __darwin_xmm_reg , pub __fpu_xmm6 : __darwin_xmm_reg , pub __fpu_xmm7 : __darwin_xmm_reg , pub __fpu_xmm8 : __darwin_xmm_reg , pub __fpu_xmm9 : __darwin_xmm_reg , pub __fpu_xmm10 : __darwin_xmm_reg , pub __fpu_xmm11 : __darwin_xmm_reg , pub __fpu_xmm12 : __darwin_xmm_reg , pub __fpu_xmm13 : __darwin_xmm_reg , pub __fpu_xmm14 : __darwin_xmm_reg , pub __fpu_xmm15 : __darwin_xmm_reg , pub __fpu_rsrv4 : [:: std :: os :: raw :: c_char ; 96usize] , pub __fpu_reserved1 : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout___darwin_x86_float_state64 () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_x86_float_state64 > () , 524usize , concat ! ("Size of: " , stringify ! (__darwin_x86_float_state64))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_x86_float_state64 > () , 4usize , concat ! ("Alignment of " , stringify ! (__darwin_x86_float_state64))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_reserved as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_reserved))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_fcw as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_fcw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_fsw as * const _ as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_fsw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_ftw as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_ftw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_rsrv1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_fop as * const _ as usize } , 14usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_fop))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_ip as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_ip))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_cs as * const _ as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_cs))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_rsrv2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_dp as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_dp))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_ds as * const _ as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_ds))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_rsrv3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_mxcsr as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_mxcsr))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_mxcsrmask))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_stmm0 as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_stmm0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_stmm1 as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_stmm1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_stmm2 as * const _ as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_stmm2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_stmm3 as * const _ as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_stmm3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_stmm4 as * const _ as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_stmm4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_stmm5 as * const _ as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_stmm5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_stmm6 as * const _ as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_stmm6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_stmm7 as * const _ as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_stmm7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_xmm0 as * const _ as usize } , 168usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_xmm0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_xmm1 as * const _ as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_xmm1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_xmm2 as * const _ as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_xmm2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_xmm3 as * const _ as usize } , 216usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_xmm3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_xmm4 as * const _ as usize } , 232usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_xmm4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_xmm5 as * const _ as usize } , 248usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_xmm5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_xmm6 as * const _ as usize } , 264usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_xmm6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_xmm7 as * const _ as usize } , 280usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_xmm7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_xmm8 as * const _ as usize } , 296usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_xmm8))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_xmm9 as * const _ as usize } , 312usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_xmm9))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_xmm10 as * const _ as usize } , 328usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_xmm10))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_xmm11 as * const _ as usize } , 344usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_xmm11))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_xmm12 as * const _ as usize } , 360usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_xmm12))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_xmm13 as * const _ as usize } , 376usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_xmm13))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_xmm14 as * const _ as usize } , 392usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_xmm14))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_xmm15 as * const _ as usize } , 408usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_xmm15))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_rsrv4 as * const _ as usize } , 424usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_rsrv4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_float_state64 > ())) . __fpu_reserved1 as * const _ as usize } , 520usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_float_state64) , "::" , stringify ! (__fpu_reserved1))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __darwin_x86_avx_state64 { pub __fpu_reserved : [:: std :: os :: raw :: c_int ; 2usize] , pub __fpu_fcw : __darwin_fp_control , pub __fpu_fsw : __darwin_fp_status , pub __fpu_ftw : __uint8_t , pub __fpu_rsrv1 : __uint8_t , pub __fpu_fop : __uint16_t , pub __fpu_ip : __uint32_t , pub __fpu_cs : __uint16_t , pub __fpu_rsrv2 : __uint16_t , pub __fpu_dp : __uint32_t , pub __fpu_ds : __uint16_t , pub __fpu_rsrv3 : __uint16_t , pub __fpu_mxcsr : __uint32_t , pub __fpu_mxcsrmask : __uint32_t , pub __fpu_stmm0 : __darwin_mmst_reg , pub __fpu_stmm1 : __darwin_mmst_reg , pub __fpu_stmm2 : __darwin_mmst_reg , pub __fpu_stmm3 : __darwin_mmst_reg , pub __fpu_stmm4 : __darwin_mmst_reg , pub __fpu_stmm5 : __darwin_mmst_reg , pub __fpu_stmm6 : __darwin_mmst_reg , pub __fpu_stmm7 : __darwin_mmst_reg , pub __fpu_xmm0 : __darwin_xmm_reg , pub __fpu_xmm1 : __darwin_xmm_reg , pub __fpu_xmm2 : __darwin_xmm_reg , pub __fpu_xmm3 : __darwin_xmm_reg , pub __fpu_xmm4 : __darwin_xmm_reg , pub __fpu_xmm5 : __darwin_xmm_reg , pub __fpu_xmm6 : __darwin_xmm_reg , pub __fpu_xmm7 : __darwin_xmm_reg , pub __fpu_xmm8 : __darwin_xmm_reg , pub __fpu_xmm9 : __darwin_xmm_reg , pub __fpu_xmm10 : __darwin_xmm_reg , pub __fpu_xmm11 : __darwin_xmm_reg , pub __fpu_xmm12 : __darwin_xmm_reg , pub __fpu_xmm13 : __darwin_xmm_reg , pub __fpu_xmm14 : __darwin_xmm_reg , pub __fpu_xmm15 : __darwin_xmm_reg , pub __fpu_rsrv4 : [:: std :: os :: raw :: c_char ; 96usize] , pub __fpu_reserved1 : :: std :: os :: raw :: c_int , pub __avx_reserved1 : [:: std :: os :: raw :: c_char ; 64usize] , pub __fpu_ymmh0 : __darwin_xmm_reg , pub __fpu_ymmh1 : __darwin_xmm_reg , pub __fpu_ymmh2 : __darwin_xmm_reg , pub __fpu_ymmh3 : __darwin_xmm_reg , pub __fpu_ymmh4 : __darwin_xmm_reg , pub __fpu_ymmh5 : __darwin_xmm_reg , pub __fpu_ymmh6 : __darwin_xmm_reg , pub __fpu_ymmh7 : __darwin_xmm_reg , pub __fpu_ymmh8 : __darwin_xmm_reg , pub __fpu_ymmh9 : __darwin_xmm_reg , pub __fpu_ymmh10 : __darwin_xmm_reg , pub __fpu_ymmh11 : __darwin_xmm_reg , pub __fpu_ymmh12 : __darwin_xmm_reg , pub __fpu_ymmh13 : __darwin_xmm_reg , pub __fpu_ymmh14 : __darwin_xmm_reg , pub __fpu_ymmh15 : __darwin_xmm_reg , } # [test] fn bindgen_test_layout___darwin_x86_avx_state64 () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_x86_avx_state64 > () , 844usize , concat ! ("Size of: " , stringify ! (__darwin_x86_avx_state64))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_x86_avx_state64 > () , 4usize , concat ! ("Alignment of " , stringify ! (__darwin_x86_avx_state64))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_reserved as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_reserved))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_fcw as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_fcw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_fsw as * const _ as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_fsw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ftw as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ftw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_rsrv1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_fop as * const _ as usize } , 14usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_fop))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ip as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ip))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_cs as * const _ as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_cs))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_rsrv2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_dp as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_dp))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ds as * const _ as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ds))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_rsrv3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_mxcsr as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_mxcsr))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_mxcsrmask))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_stmm0 as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_stmm0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_stmm1 as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_stmm1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_stmm2 as * const _ as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_stmm2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_stmm3 as * const _ as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_stmm3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_stmm4 as * const _ as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_stmm4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_stmm5 as * const _ as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_stmm5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_stmm6 as * const _ as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_stmm6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_stmm7 as * const _ as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_stmm7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_xmm0 as * const _ as usize } , 168usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_xmm0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_xmm1 as * const _ as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_xmm1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_xmm2 as * const _ as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_xmm2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_xmm3 as * const _ as usize } , 216usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_xmm3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_xmm4 as * const _ as usize } , 232usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_xmm4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_xmm5 as * const _ as usize } , 248usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_xmm5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_xmm6 as * const _ as usize } , 264usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_xmm6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_xmm7 as * const _ as usize } , 280usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_xmm7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_xmm8 as * const _ as usize } , 296usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_xmm8))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_xmm9 as * const _ as usize } , 312usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_xmm9))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_xmm10 as * const _ as usize } , 328usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_xmm10))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_xmm11 as * const _ as usize } , 344usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_xmm11))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_xmm12 as * const _ as usize } , 360usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_xmm12))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_xmm13 as * const _ as usize } , 376usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_xmm13))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_xmm14 as * const _ as usize } , 392usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_xmm14))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_xmm15 as * const _ as usize } , 408usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_xmm15))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_rsrv4 as * const _ as usize } , 424usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_rsrv4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_reserved1 as * const _ as usize } , 520usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_reserved1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __avx_reserved1 as * const _ as usize } , 524usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__avx_reserved1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ymmh0 as * const _ as usize } , 588usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ymmh0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ymmh1 as * const _ as usize } , 604usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ymmh1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ymmh2 as * const _ as usize } , 620usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ymmh2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ymmh3 as * const _ as usize } , 636usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ymmh3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ymmh4 as * const _ as usize } , 652usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ymmh4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ymmh5 as * const _ as usize } , 668usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ymmh5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ymmh6 as * const _ as usize } , 684usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ymmh6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ymmh7 as * const _ as usize } , 700usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ymmh7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ymmh8 as * const _ as usize } , 716usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ymmh8))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ymmh9 as * const _ as usize } , 732usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ymmh9))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ymmh10 as * const _ as usize } , 748usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ymmh10))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ymmh11 as * const _ as usize } , 764usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ymmh11))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ymmh12 as * const _ as usize } , 780usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ymmh12))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ymmh13 as * const _ as usize } , 796usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ymmh13))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ymmh14 as * const _ as usize } , 812usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ymmh14))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx_state64 > ())) . __fpu_ymmh15 as * const _ as usize } , 828usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx_state64) , "::" , stringify ! (__fpu_ymmh15))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __darwin_x86_avx512_state64 { pub __fpu_reserved : [:: std :: os :: raw :: c_int ; 2usize] , pub __fpu_fcw : __darwin_fp_control , pub __fpu_fsw : __darwin_fp_status , pub __fpu_ftw : __uint8_t , pub __fpu_rsrv1 : __uint8_t , pub __fpu_fop : __uint16_t , pub __fpu_ip : __uint32_t , pub __fpu_cs : __uint16_t , pub __fpu_rsrv2 : __uint16_t , pub __fpu_dp : __uint32_t , pub __fpu_ds : __uint16_t , pub __fpu_rsrv3 : __uint16_t , pub __fpu_mxcsr : __uint32_t , pub __fpu_mxcsrmask : __uint32_t , pub __fpu_stmm0 : __darwin_mmst_reg , pub __fpu_stmm1 : __darwin_mmst_reg , pub __fpu_stmm2 : __darwin_mmst_reg , pub __fpu_stmm3 : __darwin_mmst_reg , pub __fpu_stmm4 : __darwin_mmst_reg , pub __fpu_stmm5 : __darwin_mmst_reg , pub __fpu_stmm6 : __darwin_mmst_reg , pub __fpu_stmm7 : __darwin_mmst_reg , pub __fpu_xmm0 : __darwin_xmm_reg , pub __fpu_xmm1 : __darwin_xmm_reg , pub __fpu_xmm2 : __darwin_xmm_reg , pub __fpu_xmm3 : __darwin_xmm_reg , pub __fpu_xmm4 : __darwin_xmm_reg , pub __fpu_xmm5 : __darwin_xmm_reg , pub __fpu_xmm6 : __darwin_xmm_reg , pub __fpu_xmm7 : __darwin_xmm_reg , pub __fpu_xmm8 : __darwin_xmm_reg , pub __fpu_xmm9 : __darwin_xmm_reg , pub __fpu_xmm10 : __darwin_xmm_reg , pub __fpu_xmm11 : __darwin_xmm_reg , pub __fpu_xmm12 : __darwin_xmm_reg , pub __fpu_xmm13 : __darwin_xmm_reg , pub __fpu_xmm14 : __darwin_xmm_reg , pub __fpu_xmm15 : __darwin_xmm_reg , pub __fpu_rsrv4 : [:: std :: os :: raw :: c_char ; 96usize] , pub __fpu_reserved1 : :: std :: os :: raw :: c_int , pub __avx_reserved1 : [:: std :: os :: raw :: c_char ; 64usize] , pub __fpu_ymmh0 : __darwin_xmm_reg , pub __fpu_ymmh1 : __darwin_xmm_reg , pub __fpu_ymmh2 : __darwin_xmm_reg , pub __fpu_ymmh3 : __darwin_xmm_reg , pub __fpu_ymmh4 : __darwin_xmm_reg , pub __fpu_ymmh5 : __darwin_xmm_reg , pub __fpu_ymmh6 : __darwin_xmm_reg , pub __fpu_ymmh7 : __darwin_xmm_reg , pub __fpu_ymmh8 : __darwin_xmm_reg , pub __fpu_ymmh9 : __darwin_xmm_reg , pub __fpu_ymmh10 : __darwin_xmm_reg , pub __fpu_ymmh11 : __darwin_xmm_reg , pub __fpu_ymmh12 : __darwin_xmm_reg , pub __fpu_ymmh13 : __darwin_xmm_reg , pub __fpu_ymmh14 : __darwin_xmm_reg , pub __fpu_ymmh15 : __darwin_xmm_reg , pub __fpu_k0 : __darwin_opmask_reg , pub __fpu_k1 : __darwin_opmask_reg , pub __fpu_k2 : __darwin_opmask_reg , pub __fpu_k3 : __darwin_opmask_reg , pub __fpu_k4 : __darwin_opmask_reg , pub __fpu_k5 : __darwin_opmask_reg , pub __fpu_k6 : __darwin_opmask_reg , pub __fpu_k7 : __darwin_opmask_reg , pub __fpu_zmmh0 : __darwin_ymm_reg , pub __fpu_zmmh1 : __darwin_ymm_reg , pub __fpu_zmmh2 : __darwin_ymm_reg , pub __fpu_zmmh3 : __darwin_ymm_reg , pub __fpu_zmmh4 : __darwin_ymm_reg , pub __fpu_zmmh5 : __darwin_ymm_reg , pub __fpu_zmmh6 : __darwin_ymm_reg , pub __fpu_zmmh7 : __darwin_ymm_reg , pub __fpu_zmmh8 : __darwin_ymm_reg , pub __fpu_zmmh9 : __darwin_ymm_reg , pub __fpu_zmmh10 : __darwin_ymm_reg , pub __fpu_zmmh11 : __darwin_ymm_reg , pub __fpu_zmmh12 : __darwin_ymm_reg , pub __fpu_zmmh13 : __darwin_ymm_reg , pub __fpu_zmmh14 : __darwin_ymm_reg , pub __fpu_zmmh15 : __darwin_ymm_reg , pub __fpu_zmm16 : __darwin_zmm_reg , pub __fpu_zmm17 : __darwin_zmm_reg , pub __fpu_zmm18 : __darwin_zmm_reg , pub __fpu_zmm19 : __darwin_zmm_reg , pub __fpu_zmm20 : __darwin_zmm_reg , pub __fpu_zmm21 : __darwin_zmm_reg , pub __fpu_zmm22 : __darwin_zmm_reg , pub __fpu_zmm23 : __darwin_zmm_reg , pub __fpu_zmm24 : __darwin_zmm_reg , pub __fpu_zmm25 : __darwin_zmm_reg , pub __fpu_zmm26 : __darwin_zmm_reg , pub __fpu_zmm27 : __darwin_zmm_reg , pub __fpu_zmm28 : __darwin_zmm_reg , pub __fpu_zmm29 : __darwin_zmm_reg , pub __fpu_zmm30 : __darwin_zmm_reg , pub __fpu_zmm31 : __darwin_zmm_reg , } # [test] fn bindgen_test_layout___darwin_x86_avx512_state64 () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_x86_avx512_state64 > () , 2444usize , concat ! ("Size of: " , stringify ! (__darwin_x86_avx512_state64))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_x86_avx512_state64 > () , 4usize , concat ! ("Alignment of " , stringify ! (__darwin_x86_avx512_state64))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_reserved as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_reserved))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_fcw as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_fcw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_fsw as * const _ as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_fsw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ftw as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ftw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_rsrv1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_fop as * const _ as usize } , 14usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_fop))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ip as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ip))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_cs as * const _ as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_cs))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_rsrv2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_dp as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_dp))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ds as * const _ as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ds))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_rsrv3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_mxcsr as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_mxcsr))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_mxcsrmask))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_stmm0 as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_stmm0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_stmm1 as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_stmm1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_stmm2 as * const _ as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_stmm2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_stmm3 as * const _ as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_stmm3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_stmm4 as * const _ as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_stmm4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_stmm5 as * const _ as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_stmm5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_stmm6 as * const _ as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_stmm6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_stmm7 as * const _ as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_stmm7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_xmm0 as * const _ as usize } , 168usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_xmm0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_xmm1 as * const _ as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_xmm1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_xmm2 as * const _ as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_xmm2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_xmm3 as * const _ as usize } , 216usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_xmm3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_xmm4 as * const _ as usize } , 232usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_xmm4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_xmm5 as * const _ as usize } , 248usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_xmm5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_xmm6 as * const _ as usize } , 264usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_xmm6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_xmm7 as * const _ as usize } , 280usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_xmm7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_xmm8 as * const _ as usize } , 296usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_xmm8))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_xmm9 as * const _ as usize } , 312usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_xmm9))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_xmm10 as * const _ as usize } , 328usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_xmm10))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_xmm11 as * const _ as usize } , 344usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_xmm11))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_xmm12 as * const _ as usize } , 360usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_xmm12))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_xmm13 as * const _ as usize } , 376usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_xmm13))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_xmm14 as * const _ as usize } , 392usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_xmm14))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_xmm15 as * const _ as usize } , 408usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_xmm15))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_rsrv4 as * const _ as usize } , 424usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_rsrv4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_reserved1 as * const _ as usize } , 520usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_reserved1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __avx_reserved1 as * const _ as usize } , 524usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__avx_reserved1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ymmh0 as * const _ as usize } , 588usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ymmh0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ymmh1 as * const _ as usize } , 604usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ymmh1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ymmh2 as * const _ as usize } , 620usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ymmh2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ymmh3 as * const _ as usize } , 636usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ymmh3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ymmh4 as * const _ as usize } , 652usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ymmh4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ymmh5 as * const _ as usize } , 668usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ymmh5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ymmh6 as * const _ as usize } , 684usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ymmh6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ymmh7 as * const _ as usize } , 700usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ymmh7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ymmh8 as * const _ as usize } , 716usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ymmh8))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ymmh9 as * const _ as usize } , 732usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ymmh9))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ymmh10 as * const _ as usize } , 748usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ymmh10))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ymmh11 as * const _ as usize } , 764usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ymmh11))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ymmh12 as * const _ as usize } , 780usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ymmh12))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ymmh13 as * const _ as usize } , 796usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ymmh13))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ymmh14 as * const _ as usize } , 812usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ymmh14))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_ymmh15 as * const _ as usize } , 828usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_ymmh15))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_k0 as * const _ as usize } , 844usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_k0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_k1 as * const _ as usize } , 852usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_k1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_k2 as * const _ as usize } , 860usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_k2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_k3 as * const _ as usize } , 868usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_k3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_k4 as * const _ as usize } , 876usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_k4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_k5 as * const _ as usize } , 884usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_k5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_k6 as * const _ as usize } , 892usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_k6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_k7 as * const _ as usize } , 900usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_k7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmmh0 as * const _ as usize } , 908usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmmh0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmmh1 as * const _ as usize } , 940usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmmh1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmmh2 as * const _ as usize } , 972usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmmh2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmmh3 as * const _ as usize } , 1004usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmmh3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmmh4 as * const _ as usize } , 1036usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmmh4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmmh5 as * const _ as usize } , 1068usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmmh5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmmh6 as * const _ as usize } , 1100usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmmh6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmmh7 as * const _ as usize } , 1132usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmmh7))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmmh8 as * const _ as usize } , 1164usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmmh8))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmmh9 as * const _ as usize } , 1196usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmmh9))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmmh10 as * const _ as usize } , 1228usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmmh10))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmmh11 as * const _ as usize } , 1260usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmmh11))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmmh12 as * const _ as usize } , 1292usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmmh12))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmmh13 as * const _ as usize } , 1324usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmmh13))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmmh14 as * const _ as usize } , 1356usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmmh14))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmmh15 as * const _ as usize } , 1388usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmmh15))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmm16 as * const _ as usize } , 1420usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmm16))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmm17 as * const _ as usize } , 1484usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmm17))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmm18 as * const _ as usize } , 1548usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmm18))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmm19 as * const _ as usize } , 1612usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmm19))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmm20 as * const _ as usize } , 1676usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmm20))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmm21 as * const _ as usize } , 1740usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmm21))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmm22 as * const _ as usize } , 1804usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmm22))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmm23 as * const _ as usize } , 1868usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmm23))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmm24 as * const _ as usize } , 1932usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmm24))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmm25 as * const _ as usize } , 1996usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmm25))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmm26 as * const _ as usize } , 2060usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmm26))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmm27 as * const _ as usize } , 2124usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmm27))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmm28 as * const _ as usize } , 2188usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmm28))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmm29 as * const _ as usize } , 2252usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmm29))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmm30 as * const _ as usize } , 2316usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmm30))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ())) . __fpu_zmm31 as * const _ as usize } , 2380usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_avx512_state64) , "::" , stringify ! (__fpu_zmm31))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __darwin_x86_exception_state64 { pub __trapno : __uint16_t , pub __cpu : __uint16_t , pub __err : __uint32_t , pub __faultvaddr : __uint64_t , } # [test] fn bindgen_test_layout___darwin_x86_exception_state64 () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_x86_exception_state64 > () , 16usize , concat ! ("Size of: " , stringify ! (__darwin_x86_exception_state64))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_x86_exception_state64 > () , 8usize , concat ! ("Alignment of " , stringify ! (__darwin_x86_exception_state64))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_exception_state64 > ())) . __trapno as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_exception_state64) , "::" , stringify ! (__trapno))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_exception_state64 > ())) . __cpu as * const _ as usize } , 2usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_exception_state64) , "::" , stringify ! (__cpu))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_exception_state64 > ())) . __err as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_exception_state64) , "::" , stringify ! (__err))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_exception_state64 > ())) . __faultvaddr as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_exception_state64) , "::" , stringify ! (__faultvaddr))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __darwin_x86_debug_state64 { pub __dr0 : __uint64_t , pub __dr1 : __uint64_t , pub __dr2 : __uint64_t , pub __dr3 : __uint64_t , pub __dr4 : __uint64_t , pub __dr5 : __uint64_t , pub __dr6 : __uint64_t , pub __dr7 : __uint64_t , } # [test] fn bindgen_test_layout___darwin_x86_debug_state64 () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_x86_debug_state64 > () , 64usize , concat ! ("Size of: " , stringify ! (__darwin_x86_debug_state64))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_x86_debug_state64 > () , 8usize , concat ! ("Alignment of " , stringify ! (__darwin_x86_debug_state64))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_debug_state64 > ())) . __dr0 as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_debug_state64) , "::" , stringify ! (__dr0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_debug_state64 > ())) . __dr1 as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_debug_state64) , "::" , stringify ! (__dr1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_debug_state64 > ())) . __dr2 as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_debug_state64) , "::" , stringify ! (__dr2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_debug_state64 > ())) . __dr3 as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_debug_state64) , "::" , stringify ! (__dr3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_debug_state64 > ())) . __dr4 as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_debug_state64) , "::" , stringify ! (__dr4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_debug_state64 > ())) . __dr5 as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_debug_state64) , "::" , stringify ! (__dr5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_debug_state64 > ())) . __dr6 as * const _ as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_debug_state64) , "::" , stringify ! (__dr6))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_debug_state64 > ())) . __dr7 as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_debug_state64) , "::" , stringify ! (__dr7))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __darwin_x86_cpmu_state64 { pub __ctrs : [__uint64_t ; 16usize] , } # [test] fn bindgen_test_layout___darwin_x86_cpmu_state64 () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_x86_cpmu_state64 > () , 128usize , concat ! ("Size of: " , stringify ! (__darwin_x86_cpmu_state64))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_x86_cpmu_state64 > () , 8usize , concat ! ("Alignment of " , stringify ! (__darwin_x86_cpmu_state64))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_x86_cpmu_state64 > ())) . __ctrs as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_x86_cpmu_state64) , "::" , stringify ! (__ctrs))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __darwin_mcontext32 { pub __es : __darwin_i386_exception_state , pub __ss : __darwin_i386_thread_state , pub __fs : __darwin_i386_float_state , } # [test] fn bindgen_test_layout___darwin_mcontext32 () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_mcontext32 > () , 600usize , concat ! ("Size of: " , stringify ! (__darwin_mcontext32))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_mcontext32 > () , 4usize , concat ! ("Alignment of " , stringify ! (__darwin_mcontext32))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext32 > ())) . __es as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext32) , "::" , stringify ! (__es))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext32 > ())) . __ss as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext32) , "::" , stringify ! (__ss))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext32 > ())) . __fs as * const _ as usize } , 76usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext32) , "::" , stringify ! (__fs))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __darwin_mcontext_avx32 { pub __es : __darwin_i386_exception_state , pub __ss : __darwin_i386_thread_state , pub __fs : __darwin_i386_avx_state , } # [test] fn bindgen_test_layout___darwin_mcontext_avx32 () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_mcontext_avx32 > () , 792usize , concat ! ("Size of: " , stringify ! (__darwin_mcontext_avx32))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_mcontext_avx32 > () , 4usize , concat ! ("Alignment of " , stringify ! (__darwin_mcontext_avx32))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx32 > ())) . __es as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx32) , "::" , stringify ! (__es))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx32 > ())) . __ss as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx32) , "::" , stringify ! (__ss))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx32 > ())) . __fs as * const _ as usize } , 76usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx32) , "::" , stringify ! (__fs))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __darwin_mcontext_avx512_32 { pub __es : __darwin_i386_exception_state , pub __ss : __darwin_i386_thread_state , pub __fs : __darwin_i386_avx512_state , } # [test] fn bindgen_test_layout___darwin_mcontext_avx512_32 () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_mcontext_avx512_32 > () , 1112usize , concat ! ("Size of: " , stringify ! (__darwin_mcontext_avx512_32))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_mcontext_avx512_32 > () , 4usize , concat ! ("Alignment of " , stringify ! (__darwin_mcontext_avx512_32))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx512_32 > ())) . __es as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx512_32) , "::" , stringify ! (__es))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx512_32 > ())) . __ss as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx512_32) , "::" , stringify ! (__ss))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx512_32 > ())) . __fs as * const _ as usize } , 76usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx512_32) , "::" , stringify ! (__fs))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __darwin_mcontext64 { pub __es : __darwin_x86_exception_state64 , pub __ss : __darwin_x86_thread_state64 , pub __fs : __darwin_x86_float_state64 , } # [test] fn bindgen_test_layout___darwin_mcontext64 () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_mcontext64 > () , 712usize , concat ! ("Size of: " , stringify ! (__darwin_mcontext64))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_mcontext64 > () , 8usize , concat ! ("Alignment of " , stringify ! (__darwin_mcontext64))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext64 > ())) . __es as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext64) , "::" , stringify ! (__es))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext64 > ())) . __ss as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext64) , "::" , stringify ! (__ss))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext64 > ())) . __fs as * const _ as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext64) , "::" , stringify ! (__fs))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __darwin_mcontext64_full { pub __es : __darwin_x86_exception_state64 , pub __ss : __darwin_x86_thread_full_state64 , pub __fs : __darwin_x86_float_state64 , } # [test] fn bindgen_test_layout___darwin_mcontext64_full () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_mcontext64_full > () , 744usize , concat ! ("Size of: " , stringify ! (__darwin_mcontext64_full))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_mcontext64_full > () , 8usize , concat ! ("Alignment of " , stringify ! (__darwin_mcontext64_full))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext64_full > ())) . __es as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext64_full) , "::" , stringify ! (__es))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext64_full > ())) . __ss as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext64_full) , "::" , stringify ! (__ss))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext64_full > ())) . __fs as * const _ as usize } , 216usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext64_full) , "::" , stringify ! (__fs))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __darwin_mcontext_avx64 { pub __es : __darwin_x86_exception_state64 , pub __ss : __darwin_x86_thread_state64 , pub __fs : __darwin_x86_avx_state64 , } # [test] fn bindgen_test_layout___darwin_mcontext_avx64 () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_mcontext_avx64 > () , 1032usize , concat ! ("Size of: " , stringify ! (__darwin_mcontext_avx64))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_mcontext_avx64 > () , 8usize , concat ! ("Alignment of " , stringify ! (__darwin_mcontext_avx64))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx64 > ())) . __es as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx64) , "::" , stringify ! (__es))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx64 > ())) . __ss as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx64) , "::" , stringify ! (__ss))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx64 > ())) . __fs as * const _ as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx64) , "::" , stringify ! (__fs))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __darwin_mcontext_avx64_full { pub __es : __darwin_x86_exception_state64 , pub __ss : __darwin_x86_thread_full_state64 , pub __fs : __darwin_x86_avx_state64 , } # [test] fn bindgen_test_layout___darwin_mcontext_avx64_full () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_mcontext_avx64_full > () , 1064usize , concat ! ("Size of: " , stringify ! (__darwin_mcontext_avx64_full))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_mcontext_avx64_full > () , 8usize , concat ! ("Alignment of " , stringify ! (__darwin_mcontext_avx64_full))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx64_full > ())) . __es as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx64_full) , "::" , stringify ! (__es))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx64_full > ())) . __ss as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx64_full) , "::" , stringify ! (__ss))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx64_full > ())) . __fs as * const _ as usize } , 216usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx64_full) , "::" , stringify ! (__fs))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __darwin_mcontext_avx512_64 { pub __es : __darwin_x86_exception_state64 , pub __ss : __darwin_x86_thread_state64 , pub __fs : __darwin_x86_avx512_state64 , } # [test] fn bindgen_test_layout___darwin_mcontext_avx512_64 () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_mcontext_avx512_64 > () , 2632usize , concat ! ("Size of: " , stringify ! (__darwin_mcontext_avx512_64))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_mcontext_avx512_64 > () , 8usize , concat ! ("Alignment of " , stringify ! (__darwin_mcontext_avx512_64))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx512_64 > ())) . __es as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx512_64) , "::" , stringify ! (__es))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx512_64 > ())) . __ss as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx512_64) , "::" , stringify ! (__ss))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx512_64 > ())) . __fs as * const _ as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx512_64) , "::" , stringify ! (__fs))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __darwin_mcontext_avx512_64_full { pub __es : __darwin_x86_exception_state64 , pub __ss : __darwin_x86_thread_full_state64 , pub __fs : __darwin_x86_avx512_state64 , } # [test] fn bindgen_test_layout___darwin_mcontext_avx512_64_full () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_mcontext_avx512_64_full > () , 2664usize , concat ! ("Size of: " , stringify ! (__darwin_mcontext_avx512_64_full))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_mcontext_avx512_64_full > () , 8usize , concat ! ("Alignment of " , stringify ! (__darwin_mcontext_avx512_64_full))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx512_64_full > ())) . __es as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx512_64_full) , "::" , stringify ! (__es))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx512_64_full > ())) . __ss as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx512_64_full) , "::" , stringify ! (__ss))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_mcontext_avx512_64_full > ())) . __fs as * const _ as usize } , 216usize , concat ! ("Offset of field: " , stringify ! (__darwin_mcontext_avx512_64_full) , "::" , stringify ! (__fs))) ; } pub type mcontext_t = * mut __darwin_mcontext64 ; pub type pthread_attr_t = __darwin_pthread_attr_t ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __darwin_sigaltstack { pub ss_sp : * mut :: std :: os :: raw :: c_void , pub ss_size : __darwin_size_t , pub ss_flags : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout___darwin_sigaltstack () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_sigaltstack > () , 24usize , concat ! ("Size of: " , stringify ! (__darwin_sigaltstack))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_sigaltstack > () , 8usize , concat ! ("Alignment of " , stringify ! (__darwin_sigaltstack))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_sigaltstack > ())) . ss_sp as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_sigaltstack) , "::" , stringify ! (ss_sp))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_sigaltstack > ())) . ss_size as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__darwin_sigaltstack) , "::" , stringify ! (ss_size))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_sigaltstack > ())) . ss_flags as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__darwin_sigaltstack) , "::" , stringify ! (ss_flags))) ; } pub type stack_t = __darwin_sigaltstack ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __darwin_ucontext { pub uc_onstack : :: std :: os :: raw :: c_int , pub uc_sigmask : __darwin_sigset_t , pub uc_stack : __darwin_sigaltstack , pub uc_link : * mut __darwin_ucontext , pub uc_mcsize : __darwin_size_t , pub uc_mcontext : * mut __darwin_mcontext64 , } # [test] fn bindgen_test_layout___darwin_ucontext () { assert_eq ! (:: std :: mem :: size_of :: < __darwin_ucontext > () , 56usize , concat ! ("Size of: " , stringify ! (__darwin_ucontext))) ; assert_eq ! (:: std :: mem :: align_of :: < __darwin_ucontext > () , 8usize , concat ! ("Alignment of " , stringify ! (__darwin_ucontext))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_ucontext > ())) . uc_onstack as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__darwin_ucontext) , "::" , stringify ! (uc_onstack))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_ucontext > ())) . uc_sigmask as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (__darwin_ucontext) , "::" , stringify ! (uc_sigmask))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_ucontext > ())) . uc_stack as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__darwin_ucontext) , "::" , stringify ! (uc_stack))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_ucontext > ())) . uc_link as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (__darwin_ucontext) , "::" , stringify ! (uc_link))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_ucontext > ())) . uc_mcsize as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (__darwin_ucontext) , "::" , stringify ! (uc_mcsize))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __darwin_ucontext > ())) . uc_mcontext as * const _ as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (__darwin_ucontext) , "::" , stringify ! (uc_mcontext))) ; } pub type ucontext_t = __darwin_ucontext ; pub type sigset_t = __darwin_sigset_t ; pub type size_t = __darwin_size_t ; pub type uid_t = __darwin_uid_t ; # [repr (C)] # [derive (Copy , Clone)] pub union sigval { pub sival_int : :: std :: os :: raw :: c_int , pub sival_ptr : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout_sigval () { assert_eq ! (:: std :: mem :: size_of :: < sigval > () , 8usize , concat ! ("Size of: " , stringify ! (sigval))) ; assert_eq ! (:: std :: mem :: align_of :: < sigval > () , 8usize , concat ! ("Alignment of " , stringify ! (sigval))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < sigval > ())) . sival_int as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (sigval) , "::" , stringify ! (sival_int))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < sigval > ())) . sival_ptr as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (sigval) , "::" , stringify ! (sival_ptr))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct sigevent { pub sigev_notify : :: std :: os :: raw :: c_int , pub sigev_signo : :: std :: os :: raw :: c_int , pub sigev_value : sigval , pub sigev_notify_function : :: std :: option :: Option < unsafe extern "C" fn (arg1 : sigval) > , pub sigev_notify_attributes : * mut pthread_attr_t , } # [test] fn bindgen_test_layout_sigevent () { assert_eq ! (:: std :: mem :: size_of :: < sigevent > () , 32usize , concat ! ("Size of: " , stringify ! (sigevent))) ; assert_eq ! (:: std :: mem :: align_of :: < sigevent > () , 8usize , concat ! ("Alignment of " , stringify ! (sigevent))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < sigevent > ())) . sigev_notify as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (sigevent) , "::" , stringify ! (sigev_notify))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < sigevent > ())) . sigev_signo as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (sigevent) , "::" , stringify ! (sigev_signo))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < sigevent > ())) . sigev_value as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (sigevent) , "::" , stringify ! (sigev_value))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < sigevent > ())) . sigev_notify_function as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (sigevent) , "::" , stringify ! (sigev_notify_function))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < sigevent > ())) . sigev_notify_attributes as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (sigevent) , "::" , stringify ! (sigev_notify_attributes))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __siginfo { pub si_signo : :: std :: os :: raw :: c_int , pub si_errno : :: std :: os :: raw :: c_int , pub si_code : :: std :: os :: raw :: c_int , pub si_pid : pid_t , pub si_uid : uid_t , pub si_status : :: std :: os :: raw :: c_int , pub si_addr : * mut :: std :: os :: raw :: c_void , pub si_value : sigval , pub si_band : :: std :: os :: raw :: c_long , pub __pad : [:: std :: os :: raw :: c_ulong ; 7usize] , } # [test] fn bindgen_test_layout___siginfo () { assert_eq ! (:: std :: mem :: size_of :: < __siginfo > () , 104usize , concat ! ("Size of: " , stringify ! (__siginfo))) ; assert_eq ! (:: std :: mem :: align_of :: < __siginfo > () , 8usize , concat ! ("Alignment of " , stringify ! (__siginfo))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __siginfo > ())) . si_signo as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__siginfo) , "::" , stringify ! (si_signo))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __siginfo > ())) . si_errno as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (__siginfo) , "::" , stringify ! (si_errno))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __siginfo > ())) . si_code as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__siginfo) , "::" , stringify ! (si_code))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __siginfo > ())) . si_pid as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (__siginfo) , "::" , stringify ! (si_pid))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __siginfo > ())) . si_uid as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__siginfo) , "::" , stringify ! (si_uid))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __siginfo > ())) . si_status as * const _ as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (__siginfo) , "::" , stringify ! (si_status))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __siginfo > ())) . si_addr as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (__siginfo) , "::" , stringify ! (si_addr))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __siginfo > ())) . si_value as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (__siginfo) , "::" , stringify ! (si_value))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __siginfo > ())) . si_band as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (__siginfo) , "::" , stringify ! (si_band))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __siginfo > ())) . __pad as * const _ as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (__siginfo) , "::" , stringify ! (__pad))) ; } pub type siginfo_t = __siginfo ; # [repr (C)] # [derive (Copy , Clone)] pub union __sigaction_u { pub __sa_handler : :: std :: option :: Option < unsafe extern "C" fn (arg1 : :: std :: os :: raw :: c_int) > , pub __sa_sigaction : :: std :: option :: Option < unsafe extern "C" fn (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut __siginfo , arg3 : * mut :: std :: os :: raw :: c_void) > , } # [test] fn bindgen_test_layout___sigaction_u () { assert_eq ! (:: std :: mem :: size_of :: < __sigaction_u > () , 8usize , concat ! ("Size of: " , stringify ! (__sigaction_u))) ; assert_eq ! (:: std :: mem :: align_of :: < __sigaction_u > () , 8usize , concat ! ("Alignment of " , stringify ! (__sigaction_u))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sigaction_u > ())) . __sa_handler as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__sigaction_u) , "::" , stringify ! (__sa_handler))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sigaction_u > ())) . __sa_sigaction as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__sigaction_u) , "::" , stringify ! (__sa_sigaction))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct __sigaction { pub __sigaction_u : __sigaction_u , pub sa_tramp : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut siginfo_t , arg5 : * mut :: std :: os :: raw :: c_void) > , pub sa_mask : sigset_t , pub sa_flags : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout___sigaction () { assert_eq ! (:: std :: mem :: size_of :: < __sigaction > () , 24usize , concat ! ("Size of: " , stringify ! (__sigaction))) ; assert_eq ! (:: std :: mem :: align_of :: < __sigaction > () , 8usize , concat ! ("Alignment of " , stringify ! (__sigaction))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sigaction > ())) . __sigaction_u as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__sigaction) , "::" , stringify ! (__sigaction_u))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sigaction > ())) . sa_tramp as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__sigaction) , "::" , stringify ! (sa_tramp))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sigaction > ())) . sa_mask as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__sigaction) , "::" , stringify ! (sa_mask))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sigaction > ())) . sa_flags as * const _ as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (__sigaction) , "::" , stringify ! (sa_flags))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct sigaction { pub __sigaction_u : __sigaction_u , pub sa_mask : sigset_t , pub sa_flags : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout_sigaction () { assert_eq ! (:: std :: mem :: size_of :: < sigaction > () , 16usize , concat ! ("Size of: " , stringify ! (sigaction))) ; assert_eq ! (:: std :: mem :: align_of :: < sigaction > () , 8usize , concat ! ("Alignment of " , stringify ! (sigaction))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < sigaction > ())) . __sigaction_u as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (sigaction) , "::" , stringify ! (__sigaction_u))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < sigaction > ())) . sa_mask as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (sigaction) , "::" , stringify ! (sa_mask))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < sigaction > ())) . sa_flags as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (sigaction) , "::" , stringify ! (sa_flags))) ; } pub type sig_t = :: std :: option :: Option < unsafe extern "C" fn (arg1 : :: std :: os :: raw :: c_int) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct sigvec { pub sv_handler : :: std :: option :: Option < unsafe extern "C" fn (arg1 : :: std :: os :: raw :: c_int) > , pub sv_mask : :: std :: os :: raw :: c_int , pub sv_flags : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout_sigvec () { assert_eq ! (:: std :: mem :: size_of :: < sigvec > () , 16usize , concat ! ("Size of: " , stringify ! (sigvec))) ; assert_eq ! (:: std :: mem :: align_of :: < sigvec > () , 8usize , concat ! ("Alignment of " , stringify ! (sigvec))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < sigvec > ())) . sv_handler as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (sigvec) , "::" , stringify ! (sv_handler))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < sigvec > ())) . sv_mask as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (sigvec) , "::" , stringify ! (sv_mask))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < sigvec > ())) . sv_flags as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (sigvec) , "::" , stringify ! (sv_flags))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct sigstack { pub ss_sp : * mut :: std :: os :: raw :: c_char , pub ss_onstack : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout_sigstack () { assert_eq ! (:: std :: mem :: size_of :: < sigstack > () , 16usize , concat ! ("Size of: " , stringify ! (sigstack))) ; assert_eq ! (:: std :: mem :: align_of :: < sigstack > () , 8usize , concat ! ("Alignment of " , stringify ! (sigstack))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < sigstack > ())) . ss_sp as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (sigstack) , "::" , stringify ! (ss_sp))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < sigstack > ())) . ss_onstack as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (sigstack) , "::" , stringify ! (ss_onstack))) ; } extern "C" { pub fn signal (arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: option :: Option < unsafe extern "C" fn (arg1 : :: std :: os :: raw :: c_int) >) -> :: std :: option :: Option < unsafe extern "C" fn (arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: option :: Option < unsafe extern "C" fn (arg1 : :: std :: os :: raw :: c_int) >) > ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct timeval { pub tv_sec : __darwin_time_t , pub tv_usec : __darwin_suseconds_t , } # [test] fn bindgen_test_layout_timeval () { assert_eq ! (:: std :: mem :: size_of :: < timeval > () , 16usize , concat ! ("Size of: " , stringify ! (timeval))) ; assert_eq ! (:: std :: mem :: align_of :: < timeval > () , 8usize , concat ! ("Alignment of " , stringify ! (timeval))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < timeval > ())) . tv_sec as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (timeval) , "::" , stringify ! (tv_sec))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < timeval > ())) . tv_usec as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (timeval) , "::" , stringify ! (tv_usec))) ; } pub type rlim_t = __uint64_t ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct rusage { pub ru_utime : timeval , pub ru_stime : timeval , pub ru_maxrss : :: std :: os :: raw :: c_long , pub ru_ixrss : :: std :: os :: raw :: c_long , pub ru_idrss : :: std :: os :: raw :: c_long , pub ru_isrss : :: std :: os :: raw :: c_long , pub ru_minflt : :: std :: os :: raw :: c_long , pub ru_majflt : :: std :: os :: raw :: c_long , pub ru_nswap : :: std :: os :: raw :: c_long , pub ru_inblock : :: std :: os :: raw :: c_long , pub ru_oublock : :: std :: os :: raw :: c_long , pub ru_msgsnd : :: std :: os :: raw :: c_long , pub ru_msgrcv : :: std :: os :: raw :: c_long , pub ru_nsignals : :: std :: os :: raw :: c_long , pub ru_nvcsw : :: std :: os :: raw :: c_long , pub ru_nivcsw : :: std :: os :: raw :: c_long , } # [test] fn bindgen_test_layout_rusage () { assert_eq ! (:: std :: mem :: size_of :: < rusage > () , 144usize , concat ! ("Size of: " , stringify ! (rusage))) ; assert_eq ! (:: std :: mem :: align_of :: < rusage > () , 8usize , concat ! ("Alignment of " , stringify ! (rusage))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage > ())) . ru_utime as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (rusage) , "::" , stringify ! (ru_utime))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage > ())) . ru_stime as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (rusage) , "::" , stringify ! (ru_stime))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage > ())) . ru_maxrss as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (rusage) , "::" , stringify ! (ru_maxrss))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage > ())) . ru_ixrss as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (rusage) , "::" , stringify ! (ru_ixrss))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage > ())) . ru_idrss as * const _ as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (rusage) , "::" , stringify ! (ru_idrss))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage > ())) . ru_isrss as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (rusage) , "::" , stringify ! (ru_isrss))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage > ())) . ru_minflt as * const _ as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (rusage) , "::" , stringify ! (ru_minflt))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage > ())) . ru_majflt as * const _ as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (rusage) , "::" , stringify ! (ru_majflt))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage > ())) . ru_nswap as * const _ as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (rusage) , "::" , stringify ! (ru_nswap))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage > ())) . ru_inblock as * const _ as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (rusage) , "::" , stringify ! (ru_inblock))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage > ())) . ru_oublock as * const _ as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (rusage) , "::" , stringify ! (ru_oublock))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage > ())) . ru_msgsnd as * const _ as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (rusage) , "::" , stringify ! (ru_msgsnd))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage > ())) . ru_msgrcv as * const _ as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (rusage) , "::" , stringify ! (ru_msgrcv))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage > ())) . ru_nsignals as * const _ as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (rusage) , "::" , stringify ! (ru_nsignals))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage > ())) . ru_nvcsw as * const _ as usize } , 128usize , concat ! ("Offset of field: " , stringify ! (rusage) , "::" , stringify ! (ru_nvcsw))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage > ())) . ru_nivcsw as * const _ as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (rusage) , "::" , stringify ! (ru_nivcsw))) ; } pub type rusage_info_t = * mut :: std :: os :: raw :: c_void ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct rusage_info_v0 { pub ri_uuid : [u8 ; 16usize] , pub ri_user_time : u64 , pub ri_system_time : u64 , pub ri_pkg_idle_wkups : u64 , pub ri_interrupt_wkups : u64 , pub ri_pageins : u64 , pub ri_wired_size : u64 , pub ri_resident_size : u64 , pub ri_phys_footprint : u64 , pub ri_proc_start_abstime : u64 , pub ri_proc_exit_abstime : u64 , } # [test] fn bindgen_test_layout_rusage_info_v0 () { assert_eq ! (:: std :: mem :: size_of :: < rusage_info_v0 > () , 96usize , concat ! ("Size of: " , stringify ! (rusage_info_v0))) ; assert_eq ! (:: std :: mem :: align_of :: < rusage_info_v0 > () , 8usize , concat ! ("Alignment of " , stringify ! (rusage_info_v0))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v0 > ())) . ri_uuid as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v0) , "::" , stringify ! (ri_uuid))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v0 > ())) . ri_user_time as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v0) , "::" , stringify ! (ri_user_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v0 > ())) . ri_system_time as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v0) , "::" , stringify ! (ri_system_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v0 > ())) . ri_pkg_idle_wkups as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v0) , "::" , stringify ! (ri_pkg_idle_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v0 > ())) . ri_interrupt_wkups as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v0) , "::" , stringify ! (ri_interrupt_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v0 > ())) . ri_pageins as * const _ as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v0) , "::" , stringify ! (ri_pageins))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v0 > ())) . ri_wired_size as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v0) , "::" , stringify ! (ri_wired_size))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v0 > ())) . ri_resident_size as * const _ as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v0) , "::" , stringify ! (ri_resident_size))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v0 > ())) . ri_phys_footprint as * const _ as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v0) , "::" , stringify ! (ri_phys_footprint))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v0 > ())) . ri_proc_start_abstime as * const _ as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v0) , "::" , stringify ! (ri_proc_start_abstime))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v0 > ())) . ri_proc_exit_abstime as * const _ as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v0) , "::" , stringify ! (ri_proc_exit_abstime))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct rusage_info_v1 { pub ri_uuid : [u8 ; 16usize] , pub ri_user_time : u64 , pub ri_system_time : u64 , pub ri_pkg_idle_wkups : u64 , pub ri_interrupt_wkups : u64 , pub ri_pageins : u64 , pub ri_wired_size : u64 , pub ri_resident_size : u64 , pub ri_phys_footprint : u64 , pub ri_proc_start_abstime : u64 , pub ri_proc_exit_abstime : u64 , pub ri_child_user_time : u64 , pub ri_child_system_time : u64 , pub ri_child_pkg_idle_wkups : u64 , pub ri_child_interrupt_wkups : u64 , pub ri_child_pageins : u64 , pub ri_child_elapsed_abstime : u64 , } # [test] fn bindgen_test_layout_rusage_info_v1 () { assert_eq ! (:: std :: mem :: size_of :: < rusage_info_v1 > () , 144usize , concat ! ("Size of: " , stringify ! (rusage_info_v1))) ; assert_eq ! (:: std :: mem :: align_of :: < rusage_info_v1 > () , 8usize , concat ! ("Alignment of " , stringify ! (rusage_info_v1))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v1 > ())) . ri_uuid as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v1) , "::" , stringify ! (ri_uuid))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v1 > ())) . ri_user_time as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v1) , "::" , stringify ! (ri_user_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v1 > ())) . ri_system_time as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v1) , "::" , stringify ! (ri_system_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v1 > ())) . ri_pkg_idle_wkups as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v1) , "::" , stringify ! (ri_pkg_idle_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v1 > ())) . ri_interrupt_wkups as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v1) , "::" , stringify ! (ri_interrupt_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v1 > ())) . ri_pageins as * const _ as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v1) , "::" , stringify ! (ri_pageins))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v1 > ())) . ri_wired_size as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v1) , "::" , stringify ! (ri_wired_size))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v1 > ())) . ri_resident_size as * const _ as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v1) , "::" , stringify ! (ri_resident_size))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v1 > ())) . ri_phys_footprint as * const _ as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v1) , "::" , stringify ! (ri_phys_footprint))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v1 > ())) . ri_proc_start_abstime as * const _ as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v1) , "::" , stringify ! (ri_proc_start_abstime))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v1 > ())) . ri_proc_exit_abstime as * const _ as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v1) , "::" , stringify ! (ri_proc_exit_abstime))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v1 > ())) . ri_child_user_time as * const _ as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v1) , "::" , stringify ! (ri_child_user_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v1 > ())) . ri_child_system_time as * const _ as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v1) , "::" , stringify ! (ri_child_system_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v1 > ())) . ri_child_pkg_idle_wkups as * const _ as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v1) , "::" , stringify ! (ri_child_pkg_idle_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v1 > ())) . ri_child_interrupt_wkups as * const _ as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v1) , "::" , stringify ! (ri_child_interrupt_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v1 > ())) . ri_child_pageins as * const _ as usize } , 128usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v1) , "::" , stringify ! (ri_child_pageins))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v1 > ())) . ri_child_elapsed_abstime as * const _ as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v1) , "::" , stringify ! (ri_child_elapsed_abstime))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct rusage_info_v2 { pub ri_uuid : [u8 ; 16usize] , pub ri_user_time : u64 , pub ri_system_time : u64 , pub ri_pkg_idle_wkups : u64 , pub ri_interrupt_wkups : u64 , pub ri_pageins : u64 , pub ri_wired_size : u64 , pub ri_resident_size : u64 , pub ri_phys_footprint : u64 , pub ri_proc_start_abstime : u64 , pub ri_proc_exit_abstime : u64 , pub ri_child_user_time : u64 , pub ri_child_system_time : u64 , pub ri_child_pkg_idle_wkups : u64 , pub ri_child_interrupt_wkups : u64 , pub ri_child_pageins : u64 , pub ri_child_elapsed_abstime : u64 , pub ri_diskio_bytesread : u64 , pub ri_diskio_byteswritten : u64 , } # [test] fn bindgen_test_layout_rusage_info_v2 () { assert_eq ! (:: std :: mem :: size_of :: < rusage_info_v2 > () , 160usize , concat ! ("Size of: " , stringify ! (rusage_info_v2))) ; assert_eq ! (:: std :: mem :: align_of :: < rusage_info_v2 > () , 8usize , concat ! ("Alignment of " , stringify ! (rusage_info_v2))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_uuid as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_uuid))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_user_time as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_user_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_system_time as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_system_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_pkg_idle_wkups as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_pkg_idle_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_interrupt_wkups as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_interrupt_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_pageins as * const _ as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_pageins))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_wired_size as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_wired_size))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_resident_size as * const _ as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_resident_size))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_phys_footprint as * const _ as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_phys_footprint))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_proc_start_abstime as * const _ as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_proc_start_abstime))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_proc_exit_abstime as * const _ as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_proc_exit_abstime))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_child_user_time as * const _ as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_child_user_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_child_system_time as * const _ as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_child_system_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_child_pkg_idle_wkups as * const _ as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_child_pkg_idle_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_child_interrupt_wkups as * const _ as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_child_interrupt_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_child_pageins as * const _ as usize } , 128usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_child_pageins))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_child_elapsed_abstime as * const _ as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_child_elapsed_abstime))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_diskio_bytesread as * const _ as usize } , 144usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_diskio_bytesread))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v2 > ())) . ri_diskio_byteswritten as * const _ as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v2) , "::" , stringify ! (ri_diskio_byteswritten))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct rusage_info_v3 { pub ri_uuid : [u8 ; 16usize] , pub ri_user_time : u64 , pub ri_system_time : u64 , pub ri_pkg_idle_wkups : u64 , pub ri_interrupt_wkups : u64 , pub ri_pageins : u64 , pub ri_wired_size : u64 , pub ri_resident_size : u64 , pub ri_phys_footprint : u64 , pub ri_proc_start_abstime : u64 , pub ri_proc_exit_abstime : u64 , pub ri_child_user_time : u64 , pub ri_child_system_time : u64 , pub ri_child_pkg_idle_wkups : u64 , pub ri_child_interrupt_wkups : u64 , pub ri_child_pageins : u64 , pub ri_child_elapsed_abstime : u64 , pub ri_diskio_bytesread : u64 , pub ri_diskio_byteswritten : u64 , pub ri_cpu_time_qos_default : u64 , pub ri_cpu_time_qos_maintenance : u64 , pub ri_cpu_time_qos_background : u64 , pub ri_cpu_time_qos_utility : u64 , pub ri_cpu_time_qos_legacy : u64 , pub ri_cpu_time_qos_user_initiated : u64 , pub ri_cpu_time_qos_user_interactive : u64 , pub ri_billed_system_time : u64 , pub ri_serviced_system_time : u64 , } # [test] fn bindgen_test_layout_rusage_info_v3 () { assert_eq ! (:: std :: mem :: size_of :: < rusage_info_v3 > () , 232usize , concat ! ("Size of: " , stringify ! (rusage_info_v3))) ; assert_eq ! (:: std :: mem :: align_of :: < rusage_info_v3 > () , 8usize , concat ! ("Alignment of " , stringify ! (rusage_info_v3))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_uuid as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_uuid))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_user_time as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_user_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_system_time as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_system_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_pkg_idle_wkups as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_pkg_idle_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_interrupt_wkups as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_interrupt_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_pageins as * const _ as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_pageins))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_wired_size as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_wired_size))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_resident_size as * const _ as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_resident_size))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_phys_footprint as * const _ as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_phys_footprint))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_proc_start_abstime as * const _ as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_proc_start_abstime))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_proc_exit_abstime as * const _ as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_proc_exit_abstime))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_child_user_time as * const _ as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_child_user_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_child_system_time as * const _ as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_child_system_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_child_pkg_idle_wkups as * const _ as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_child_pkg_idle_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_child_interrupt_wkups as * const _ as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_child_interrupt_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_child_pageins as * const _ as usize } , 128usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_child_pageins))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_child_elapsed_abstime as * const _ as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_child_elapsed_abstime))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_diskio_bytesread as * const _ as usize } , 144usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_diskio_bytesread))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_diskio_byteswritten as * const _ as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_diskio_byteswritten))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_cpu_time_qos_default as * const _ as usize } , 160usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_cpu_time_qos_default))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_cpu_time_qos_maintenance as * const _ as usize } , 168usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_cpu_time_qos_maintenance))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_cpu_time_qos_background as * const _ as usize } , 176usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_cpu_time_qos_background))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_cpu_time_qos_utility as * const _ as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_cpu_time_qos_utility))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_cpu_time_qos_legacy as * const _ as usize } , 192usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_cpu_time_qos_legacy))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_cpu_time_qos_user_initiated as * const _ as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_cpu_time_qos_user_initiated))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_cpu_time_qos_user_interactive as * const _ as usize } , 208usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_cpu_time_qos_user_interactive))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_billed_system_time as * const _ as usize } , 216usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_billed_system_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v3 > ())) . ri_serviced_system_time as * const _ as usize } , 224usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v3) , "::" , stringify ! (ri_serviced_system_time))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct rusage_info_v4 { pub ri_uuid : [u8 ; 16usize] , pub ri_user_time : u64 , pub ri_system_time : u64 , pub ri_pkg_idle_wkups : u64 , pub ri_interrupt_wkups : u64 , pub ri_pageins : u64 , pub ri_wired_size : u64 , pub ri_resident_size : u64 , pub ri_phys_footprint : u64 , pub ri_proc_start_abstime : u64 , pub ri_proc_exit_abstime : u64 , pub ri_child_user_time : u64 , pub ri_child_system_time : u64 , pub ri_child_pkg_idle_wkups : u64 , pub ri_child_interrupt_wkups : u64 , pub ri_child_pageins : u64 , pub ri_child_elapsed_abstime : u64 , pub ri_diskio_bytesread : u64 , pub ri_diskio_byteswritten : u64 , pub ri_cpu_time_qos_default : u64 , pub ri_cpu_time_qos_maintenance : u64 , pub ri_cpu_time_qos_background : u64 , pub ri_cpu_time_qos_utility : u64 , pub ri_cpu_time_qos_legacy : u64 , pub ri_cpu_time_qos_user_initiated : u64 , pub ri_cpu_time_qos_user_interactive : u64 , pub ri_billed_system_time : u64 , pub ri_serviced_system_time : u64 , pub ri_logical_writes : u64 , pub ri_lifetime_max_phys_footprint : u64 , pub ri_instructions : u64 , pub ri_cycles : u64 , pub ri_billed_energy : u64 , pub ri_serviced_energy : u64 , pub ri_interval_max_phys_footprint : u64 , pub ri_runnable_time : u64 , } # [test] fn bindgen_test_layout_rusage_info_v4 () { assert_eq ! (:: std :: mem :: size_of :: < rusage_info_v4 > () , 296usize , concat ! ("Size of: " , stringify ! (rusage_info_v4))) ; assert_eq ! (:: std :: mem :: align_of :: < rusage_info_v4 > () , 8usize , concat ! ("Alignment of " , stringify ! (rusage_info_v4))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_uuid as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_uuid))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_user_time as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_user_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_system_time as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_system_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_pkg_idle_wkups as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_pkg_idle_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_interrupt_wkups as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_interrupt_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_pageins as * const _ as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_pageins))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_wired_size as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_wired_size))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_resident_size as * const _ as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_resident_size))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_phys_footprint as * const _ as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_phys_footprint))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_proc_start_abstime as * const _ as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_proc_start_abstime))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_proc_exit_abstime as * const _ as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_proc_exit_abstime))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_child_user_time as * const _ as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_child_user_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_child_system_time as * const _ as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_child_system_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_child_pkg_idle_wkups as * const _ as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_child_pkg_idle_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_child_interrupt_wkups as * const _ as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_child_interrupt_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_child_pageins as * const _ as usize } , 128usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_child_pageins))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_child_elapsed_abstime as * const _ as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_child_elapsed_abstime))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_diskio_bytesread as * const _ as usize } , 144usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_diskio_bytesread))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_diskio_byteswritten as * const _ as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_diskio_byteswritten))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_cpu_time_qos_default as * const _ as usize } , 160usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_cpu_time_qos_default))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_cpu_time_qos_maintenance as * const _ as usize } , 168usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_cpu_time_qos_maintenance))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_cpu_time_qos_background as * const _ as usize } , 176usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_cpu_time_qos_background))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_cpu_time_qos_utility as * const _ as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_cpu_time_qos_utility))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_cpu_time_qos_legacy as * const _ as usize } , 192usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_cpu_time_qos_legacy))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_cpu_time_qos_user_initiated as * const _ as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_cpu_time_qos_user_initiated))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_cpu_time_qos_user_interactive as * const _ as usize } , 208usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_cpu_time_qos_user_interactive))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_billed_system_time as * const _ as usize } , 216usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_billed_system_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_serviced_system_time as * const _ as usize } , 224usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_serviced_system_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_logical_writes as * const _ as usize } , 232usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_logical_writes))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_lifetime_max_phys_footprint as * const _ as usize } , 240usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_lifetime_max_phys_footprint))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_instructions as * const _ as usize } , 248usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_instructions))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_cycles as * const _ as usize } , 256usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_cycles))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_billed_energy as * const _ as usize } , 264usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_billed_energy))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_serviced_energy as * const _ as usize } , 272usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_serviced_energy))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_interval_max_phys_footprint as * const _ as usize } , 280usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_interval_max_phys_footprint))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v4 > ())) . ri_runnable_time as * const _ as usize } , 288usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v4) , "::" , stringify ! (ri_runnable_time))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct rusage_info_v5 { pub ri_uuid : [u8 ; 16usize] , pub ri_user_time : u64 , pub ri_system_time : u64 , pub ri_pkg_idle_wkups : u64 , pub ri_interrupt_wkups : u64 , pub ri_pageins : u64 , pub ri_wired_size : u64 , pub ri_resident_size : u64 , pub ri_phys_footprint : u64 , pub ri_proc_start_abstime : u64 , pub ri_proc_exit_abstime : u64 , pub ri_child_user_time : u64 , pub ri_child_system_time : u64 , pub ri_child_pkg_idle_wkups : u64 , pub ri_child_interrupt_wkups : u64 , pub ri_child_pageins : u64 , pub ri_child_elapsed_abstime : u64 , pub ri_diskio_bytesread : u64 , pub ri_diskio_byteswritten : u64 , pub ri_cpu_time_qos_default : u64 , pub ri_cpu_time_qos_maintenance : u64 , pub ri_cpu_time_qos_background : u64 , pub ri_cpu_time_qos_utility : u64 , pub ri_cpu_time_qos_legacy : u64 , pub ri_cpu_time_qos_user_initiated : u64 , pub ri_cpu_time_qos_user_interactive : u64 , pub ri_billed_system_time : u64 , pub ri_serviced_system_time : u64 , pub ri_logical_writes : u64 , pub ri_lifetime_max_phys_footprint : u64 , pub ri_instructions : u64 , pub ri_cycles : u64 , pub ri_billed_energy : u64 , pub ri_serviced_energy : u64 , pub ri_interval_max_phys_footprint : u64 , pub ri_runnable_time : u64 , pub ri_flags : u64 , } # [test] fn bindgen_test_layout_rusage_info_v5 () { assert_eq ! (:: std :: mem :: size_of :: < rusage_info_v5 > () , 304usize , concat ! ("Size of: " , stringify ! (rusage_info_v5))) ; assert_eq ! (:: std :: mem :: align_of :: < rusage_info_v5 > () , 8usize , concat ! ("Alignment of " , stringify ! (rusage_info_v5))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_uuid as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_uuid))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_user_time as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_user_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_system_time as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_system_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_pkg_idle_wkups as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_pkg_idle_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_interrupt_wkups as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_interrupt_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_pageins as * const _ as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_pageins))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_wired_size as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_wired_size))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_resident_size as * const _ as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_resident_size))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_phys_footprint as * const _ as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_phys_footprint))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_proc_start_abstime as * const _ as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_proc_start_abstime))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_proc_exit_abstime as * const _ as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_proc_exit_abstime))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_child_user_time as * const _ as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_child_user_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_child_system_time as * const _ as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_child_system_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_child_pkg_idle_wkups as * const _ as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_child_pkg_idle_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_child_interrupt_wkups as * const _ as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_child_interrupt_wkups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_child_pageins as * const _ as usize } , 128usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_child_pageins))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_child_elapsed_abstime as * const _ as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_child_elapsed_abstime))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_diskio_bytesread as * const _ as usize } , 144usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_diskio_bytesread))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_diskio_byteswritten as * const _ as usize } , 152usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_diskio_byteswritten))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_cpu_time_qos_default as * const _ as usize } , 160usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_cpu_time_qos_default))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_cpu_time_qos_maintenance as * const _ as usize } , 168usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_cpu_time_qos_maintenance))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_cpu_time_qos_background as * const _ as usize } , 176usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_cpu_time_qos_background))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_cpu_time_qos_utility as * const _ as usize } , 184usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_cpu_time_qos_utility))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_cpu_time_qos_legacy as * const _ as usize } , 192usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_cpu_time_qos_legacy))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_cpu_time_qos_user_initiated as * const _ as usize } , 200usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_cpu_time_qos_user_initiated))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_cpu_time_qos_user_interactive as * const _ as usize } , 208usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_cpu_time_qos_user_interactive))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_billed_system_time as * const _ as usize } , 216usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_billed_system_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_serviced_system_time as * const _ as usize } , 224usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_serviced_system_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_logical_writes as * const _ as usize } , 232usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_logical_writes))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_lifetime_max_phys_footprint as * const _ as usize } , 240usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_lifetime_max_phys_footprint))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_instructions as * const _ as usize } , 248usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_instructions))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_cycles as * const _ as usize } , 256usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_cycles))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_billed_energy as * const _ as usize } , 264usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_billed_energy))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_serviced_energy as * const _ as usize } , 272usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_serviced_energy))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_interval_max_phys_footprint as * const _ as usize } , 280usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_interval_max_phys_footprint))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_runnable_time as * const _ as usize } , 288usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_runnable_time))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rusage_info_v5 > ())) . ri_flags as * const _ as usize } , 296usize , concat ! ("Offset of field: " , stringify ! (rusage_info_v5) , "::" , stringify ! (ri_flags))) ; } pub type rusage_info_current = rusage_info_v5 ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct rlimit { pub rlim_cur : rlim_t , pub rlim_max : rlim_t , } # [test] fn bindgen_test_layout_rlimit () { assert_eq ! (:: std :: mem :: size_of :: < rlimit > () , 16usize , concat ! ("Size of: " , stringify ! (rlimit))) ; assert_eq ! (:: std :: mem :: align_of :: < rlimit > () , 8usize , concat ! ("Alignment of " , stringify ! (rlimit))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rlimit > ())) . rlim_cur as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (rlimit) , "::" , stringify ! (rlim_cur))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < rlimit > ())) . rlim_max as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (rlimit) , "::" , stringify ! (rlim_max))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct proc_rlimit_control_wakeupmon { pub wm_flags : u32 , pub wm_rate : i32 , } # [test] fn bindgen_test_layout_proc_rlimit_control_wakeupmon () { assert_eq ! (:: std :: mem :: size_of :: < proc_rlimit_control_wakeupmon > () , 8usize , concat ! ("Size of: " , stringify ! (proc_rlimit_control_wakeupmon))) ; assert_eq ! (:: std :: mem :: align_of :: < proc_rlimit_control_wakeupmon > () , 4usize , concat ! ("Alignment of " , stringify ! (proc_rlimit_control_wakeupmon))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < proc_rlimit_control_wakeupmon > ())) . wm_flags as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (proc_rlimit_control_wakeupmon) , "::" , stringify ! (wm_flags))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < proc_rlimit_control_wakeupmon > ())) . wm_rate as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (proc_rlimit_control_wakeupmon) , "::" , stringify ! (wm_rate))) ; } extern "C" { pub fn getpriority (arg1 : :: std :: os :: raw :: c_int , arg2 : id_t) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getiopolicy_np (arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getrlimit (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut rlimit) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getrusage (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut rusage) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setpriority (arg1 : :: std :: os :: raw :: c_int , arg2 : id_t , arg3 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setiopolicy_np (arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setrlimit (arg1 : :: std :: os :: raw :: c_int , arg2 : * const rlimit) -> :: std :: os :: raw :: c_int ; } # [repr (C)] # [derive (Copy , Clone)] pub union wait { pub w_status : :: std :: os :: raw :: c_int , pub w_T : wait__bindgen_ty_1 , pub w_S : wait__bindgen_ty_2 , } # [repr (C)] # [repr (align (4))] # [derive (Debug , Copy , Clone)] pub struct wait__bindgen_ty_1 { pub _bitfield_align_1 : [u16 ; 0] , pub _bitfield_1 : __BindgenBitfieldUnit < [u8 ; 4usize] > , } # [test] fn bindgen_test_layout_wait__bindgen_ty_1 () { assert_eq ! (:: std :: mem :: size_of :: < wait__bindgen_ty_1 > () , 4usize , concat ! ("Size of: " , stringify ! (wait__bindgen_ty_1))) ; assert_eq ! (:: std :: mem :: align_of :: < wait__bindgen_ty_1 > () , 4usize , concat ! ("Alignment of " , stringify ! (wait__bindgen_ty_1))) ; } impl wait__bindgen_ty_1 { # [inline] pub fn w_Termsig (& self) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (0usize , 7u8) as u32) } } # [inline] pub fn set_w_Termsig (& mut self , val : :: std :: os :: raw :: c_uint) { unsafe { let val : u32 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (0usize , 7u8 , val as u64) } } # [inline] pub fn w_Coredump (& self) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (7usize , 1u8) as u32) } } # [inline] pub fn set_w_Coredump (& mut self , val : :: std :: os :: raw :: c_uint) { unsafe { let val : u32 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (7usize , 1u8 , val as u64) } } # [inline] pub fn w_Retcode (& self) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (8usize , 8u8) as u32) } } # [inline] pub fn set_w_Retcode (& mut self , val : :: std :: os :: raw :: c_uint) { unsafe { let val : u32 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (8usize , 8u8 , val as u64) } } # [inline] pub fn w_Filler (& self) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (16usize , 16u8) as u32) } } # [inline] pub fn set_w_Filler (& mut self , val : :: std :: os :: raw :: c_uint) { unsafe { let val : u32 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (16usize , 16u8 , val as u64) } } # [inline] pub fn new_bitfield_1 (w_Termsig : :: std :: os :: raw :: c_uint , w_Coredump : :: std :: os :: raw :: c_uint , w_Retcode : :: std :: os :: raw :: c_uint , w_Filler : :: std :: os :: raw :: c_uint) -> __BindgenBitfieldUnit < [u8 ; 4usize] > { let mut __bindgen_bitfield_unit : __BindgenBitfieldUnit < [u8 ; 4usize] > = Default :: default () ; __bindgen_bitfield_unit . set (0usize , 7u8 , { let w_Termsig : u32 = unsafe { :: std :: mem :: transmute (w_Termsig) } ; w_Termsig as u64 }) ; __bindgen_bitfield_unit . set (7usize , 1u8 , { let w_Coredump : u32 = unsafe { :: std :: mem :: transmute (w_Coredump) } ; w_Coredump as u64 }) ; __bindgen_bitfield_unit . set (8usize , 8u8 , { let w_Retcode : u32 = unsafe { :: std :: mem :: transmute (w_Retcode) } ; w_Retcode as u64 }) ; __bindgen_bitfield_unit . set (16usize , 16u8 , { let w_Filler : u32 = unsafe { :: std :: mem :: transmute (w_Filler) } ; w_Filler as u64 }) ; __bindgen_bitfield_unit } } # [repr (C)] # [repr (align (4))] # [derive (Debug , Copy , Clone)] pub struct wait__bindgen_ty_2 { pub _bitfield_align_1 : [u16 ; 0] , pub _bitfield_1 : __BindgenBitfieldUnit < [u8 ; 4usize] > , } # [test] fn bindgen_test_layout_wait__bindgen_ty_2 () { assert_eq ! (:: std :: mem :: size_of :: < wait__bindgen_ty_2 > () , 4usize , concat ! ("Size of: " , stringify ! (wait__bindgen_ty_2))) ; assert_eq ! (:: std :: mem :: align_of :: < wait__bindgen_ty_2 > () , 4usize , concat ! ("Alignment of " , stringify ! (wait__bindgen_ty_2))) ; } impl wait__bindgen_ty_2 { # [inline] pub fn w_Stopval (& self) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (0usize , 8u8) as u32) } } # [inline] pub fn set_w_Stopval (& mut self , val : :: std :: os :: raw :: c_uint) { unsafe { let val : u32 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (0usize , 8u8 , val as u64) } } # [inline] pub fn w_Stopsig (& self) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (8usize , 8u8) as u32) } } # [inline] pub fn set_w_Stopsig (& mut self , val : :: std :: os :: raw :: c_uint) { unsafe { let val : u32 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (8usize , 8u8 , val as u64) } } # [inline] pub fn w_Filler (& self) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute (self . _bitfield_1 . get (16usize , 16u8) as u32) } } # [inline] pub fn set_w_Filler (& mut self , val : :: std :: os :: raw :: c_uint) { unsafe { let val : u32 = :: std :: mem :: transmute (val) ; self . _bitfield_1 . set (16usize , 16u8 , val as u64) } } # [inline] pub fn new_bitfield_1 (w_Stopval : :: std :: os :: raw :: c_uint , w_Stopsig : :: std :: os :: raw :: c_uint , w_Filler : :: std :: os :: raw :: c_uint) -> __BindgenBitfieldUnit < [u8 ; 4usize] > { let mut __bindgen_bitfield_unit : __BindgenBitfieldUnit < [u8 ; 4usize] > = Default :: default () ; __bindgen_bitfield_unit . set (0usize , 8u8 , { let w_Stopval : u32 = unsafe { :: std :: mem :: transmute (w_Stopval) } ; w_Stopval as u64 }) ; __bindgen_bitfield_unit . set (8usize , 8u8 , { let w_Stopsig : u32 = unsafe { :: std :: mem :: transmute (w_Stopsig) } ; w_Stopsig as u64 }) ; __bindgen_bitfield_unit . set (16usize , 16u8 , { let w_Filler : u32 = unsafe { :: std :: mem :: transmute (w_Filler) } ; w_Filler as u64 }) ; __bindgen_bitfield_unit } } # [test] fn bindgen_test_layout_wait () { assert_eq ! (:: std :: mem :: size_of :: < wait > () , 4usize , concat ! ("Size of: " , stringify ! (wait))) ; assert_eq ! (:: std :: mem :: align_of :: < wait > () , 4usize , concat ! ("Alignment of " , stringify ! (wait))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < wait > ())) . w_status as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (wait) , "::" , stringify ! (w_status))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < wait > ())) . w_T as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (wait) , "::" , stringify ! (w_T))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < wait > ())) . w_S as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (wait) , "::" , stringify ! (w_S))) ; } extern "C" { pub fn wait (arg1 : * mut :: std :: os :: raw :: c_int) -> pid_t ; } extern "C" { pub fn waitpid (arg1 : pid_t , arg2 : * mut :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int) -> pid_t ; } extern "C" { pub fn waitid (arg1 : idtype_t , arg2 : id_t , arg3 : * mut siginfo_t , arg4 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn wait3 (arg1 : * mut :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut rusage) -> pid_t ; } extern "C" { pub fn wait4 (arg1 : pid_t , arg2 : * mut :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut rusage) -> pid_t ; } extern "C" { pub fn alloca (arg1 : :: std :: os :: raw :: c_ulong) -> * mut :: std :: os :: raw :: c_void ; } pub type ct_rune_t = __darwin_ct_rune_t ; pub type rune_t = __darwin_rune_t ; pub type wchar_t = __darwin_wchar_t ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct div_t { pub quot : :: std :: os :: raw :: c_int , pub rem : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout_div_t () { assert_eq ! (:: std :: mem :: size_of :: < div_t > () , 8usize , concat ! ("Size of: " , stringify ! (div_t))) ; assert_eq ! (:: std :: mem :: align_of :: < div_t > () , 4usize , concat ! ("Alignment of " , stringify ! (div_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < div_t > ())) . quot as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (div_t) , "::" , stringify ! (quot))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < div_t > ())) . rem as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (div_t) , "::" , stringify ! (rem))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct ldiv_t { pub quot : :: std :: os :: raw :: c_long , pub rem : :: std :: os :: raw :: c_long , } # [test] fn bindgen_test_layout_ldiv_t () { assert_eq ! (:: std :: mem :: size_of :: < ldiv_t > () , 16usize , concat ! ("Size of: " , stringify ! (ldiv_t))) ; assert_eq ! (:: std :: mem :: align_of :: < ldiv_t > () , 8usize , concat ! ("Alignment of " , stringify ! (ldiv_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ldiv_t > ())) . quot as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (ldiv_t) , "::" , stringify ! (quot))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ldiv_t > ())) . rem as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (ldiv_t) , "::" , stringify ! (rem))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct lldiv_t { pub quot : :: std :: os :: raw :: c_longlong , pub rem : :: std :: os :: raw :: c_longlong , } # [test] fn bindgen_test_layout_lldiv_t () { assert_eq ! (:: std :: mem :: size_of :: < lldiv_t > () , 16usize , concat ! ("Size of: " , stringify ! (lldiv_t))) ; assert_eq ! (:: std :: mem :: align_of :: < lldiv_t > () , 8usize , concat ! ("Alignment of " , stringify ! (lldiv_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < lldiv_t > ())) . quot as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (lldiv_t) , "::" , stringify ! (quot))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < lldiv_t > ())) . rem as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (lldiv_t) , "::" , stringify ! (rem))) ; } extern "C" { pub static mut __mb_cur_max : :: std :: os :: raw :: c_int ; } extern "C" { pub fn malloc (__size : :: std :: os :: raw :: c_ulong) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn calloc (__count : :: std :: os :: raw :: c_ulong , __size : :: std :: os :: raw :: c_ulong) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn free (arg1 : * mut :: std :: os :: raw :: c_void) ; } extern "C" { pub fn realloc (__ptr : * mut :: std :: os :: raw :: c_void , __size : :: std :: os :: raw :: c_ulong) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn valloc (arg1 : size_t) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn aligned_alloc (__alignment : size_t , __size : size_t) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn posix_memalign (__memptr : * mut * mut :: std :: os :: raw :: c_void , __alignment : size_t , __size : size_t) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn abort () ; } extern "C" { pub fn abs (arg1 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn atexit (arg1 : :: std :: option :: Option < unsafe extern "C" fn () >) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn atof (arg1 : * const :: std :: os :: raw :: c_char) -> f64 ; } extern "C" { pub fn atoi (arg1 : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn atol (arg1 : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn atoll (arg1 : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn bsearch (__key : * const :: std :: os :: raw :: c_void , __base : * const :: std :: os :: raw :: c_void , __nel : size_t , __width : size_t , __compar : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * const :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int >) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn div (arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int) -> div_t ; } extern "C" { pub fn exit (arg1 : :: std :: os :: raw :: c_int) ; } extern "C" { pub fn getenv (arg1 : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn labs (arg1 : :: std :: os :: raw :: c_long) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn ldiv (arg1 : :: std :: os :: raw :: c_long , arg2 : :: std :: os :: raw :: c_long) -> ldiv_t ; } extern "C" { pub fn llabs (arg1 : :: std :: os :: raw :: c_longlong) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn lldiv (arg1 : :: std :: os :: raw :: c_longlong , arg2 : :: std :: os :: raw :: c_longlong) -> lldiv_t ; } extern "C" { pub fn mblen (__s : * const :: std :: os :: raw :: c_char , __n : size_t) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mbstowcs (arg1 : * mut wchar_t , arg2 : * const :: std :: os :: raw :: c_char , arg3 : size_t) -> size_t ; } extern "C" { pub fn mbtowc (arg1 : * mut wchar_t , arg2 : * const :: std :: os :: raw :: c_char , arg3 : size_t) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn qsort (__base : * mut :: std :: os :: raw :: c_void , __nel : size_t , __width : size_t , __compar : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * const :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int >) ; } extern "C" { pub fn rand () -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn srand (arg1 : :: std :: os :: raw :: c_uint) ; } extern "C" { pub fn strtod (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut * mut :: std :: os :: raw :: c_char) -> f64 ; } extern "C" { pub fn strtof (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut * mut :: std :: os :: raw :: c_char) -> f32 ; } extern "C" { pub fn strtol (__str : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn strtold (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut * mut :: std :: os :: raw :: c_char) -> u128 ; } extern "C" { pub fn strtoll (__str : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn strtoul (__str : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn strtoull (__str : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn system (arg1 : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn wcstombs (arg1 : * mut :: std :: os :: raw :: c_char , arg2 : * const wchar_t , arg3 : size_t) -> size_t ; } extern "C" { pub fn wctomb (arg1 : * mut :: std :: os :: raw :: c_char , arg2 : wchar_t) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _Exit (arg1 : :: std :: os :: raw :: c_int) ; } extern "C" { pub fn a64l (arg1 : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn drand48 () -> f64 ; } extern "C" { pub fn ecvt (arg1 : f64 , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn erand48 (arg1 : * mut :: std :: os :: raw :: c_ushort) -> f64 ; } extern "C" { pub fn fcvt (arg1 : f64 , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn gcvt (arg1 : f64 , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn getsubopt (arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : * const * mut :: std :: os :: raw :: c_char , arg3 : * mut * mut :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn grantpt (arg1 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn initstate (arg1 : :: std :: os :: raw :: c_uint , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : size_t) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn jrand48 (arg1 : * mut :: std :: os :: raw :: c_ushort) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn l64a (arg1 : :: std :: os :: raw :: c_long) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn lcong48 (arg1 : * mut :: std :: os :: raw :: c_ushort) ; } extern "C" { pub fn lrand48 () -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn mktemp (arg1 : * mut :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn mkstemp (arg1 : * mut :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mrand48 () -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn nrand48 (arg1 : * mut :: std :: os :: raw :: c_ushort) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn posix_openpt (arg1 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ptsname (arg1 : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ptsname_r (fildes : :: std :: os :: raw :: c_int , buffer : * mut :: std :: os :: raw :: c_char , buflen : size_t) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putenv (arg1 : * mut :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn random () -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn rand_r (arg1 : * mut :: std :: os :: raw :: c_uint) -> :: std :: os :: raw :: c_int ; } extern "C" { # [link_name = "\u{1}_realpath$DARWIN_EXTSN"] pub fn realpath (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn seed48 (arg1 : * mut :: std :: os :: raw :: c_ushort) -> * mut :: std :: os :: raw :: c_ushort ; } extern "C" { pub fn setenv (__name : * const :: std :: os :: raw :: c_char , __value : * const :: std :: os :: raw :: c_char , __overwrite : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setkey (arg1 : * const :: std :: os :: raw :: c_char) ; } extern "C" { pub fn setstate (arg1 : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn srand48 (arg1 : :: std :: os :: raw :: c_long) ; } extern "C" { pub fn srandom (arg1 : :: std :: os :: raw :: c_uint) ; } extern "C" { pub fn unlockpt (arg1 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn unsetenv (arg1 : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } pub type dev_t = __darwin_dev_t ; pub type mode_t = __darwin_mode_t ; extern "C" { pub fn arc4random () -> u32 ; } extern "C" { pub fn arc4random_addrandom (arg1 : * mut :: std :: os :: raw :: c_uchar , arg2 : :: std :: os :: raw :: c_int) ; } extern "C" { pub fn arc4random_buf (__buf : * mut :: std :: os :: raw :: c_void , __nbytes : size_t) ; } extern "C" { pub fn arc4random_stir () ; } extern "C" { pub fn arc4random_uniform (__upper_bound : u32) -> u32 ; } extern "C" { pub fn atexit_b (arg1 : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn bsearch_b (__key : * const :: std :: os :: raw :: c_void , __base : * const :: std :: os :: raw :: c_void , __nel : size_t , __width : size_t , __compar : * mut :: std :: os :: raw :: c_void) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn cgetcap (arg1 : * mut :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn cgetclose () -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn cgetent (arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : * mut * mut :: std :: os :: raw :: c_char , arg3 : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn cgetfirst (arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : * mut * mut :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn cgetmatch (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn cgetnext (arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : * mut * mut :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn cgetnum (arg1 : * mut :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut :: std :: os :: raw :: c_long) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn cgetset (arg1 : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn cgetstr (arg1 : * mut :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut * mut :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn cgetustr (arg1 : * mut :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut * mut :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { # [link_name = "\u{1}_daemon$1050"] pub fn daemon (arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn devname (arg1 : dev_t , arg2 : mode_t) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn devname_r (arg1 : dev_t , arg2 : mode_t , buf : * mut :: std :: os :: raw :: c_char , len : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn getbsize (arg1 : * mut :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_long) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn getloadavg (arg1 : * mut f64 , arg2 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getprogname () -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn setprogname (arg1 : * const :: std :: os :: raw :: c_char) ; } extern "C" { pub fn heapsort (__base : * mut :: std :: os :: raw :: c_void , __nel : size_t , __width : size_t , __compar : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * const :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int >) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn heapsort_b (__base : * mut :: std :: os :: raw :: c_void , __nel : size_t , __width : size_t , __compar : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mergesort (__base : * mut :: std :: os :: raw :: c_void , __nel : size_t , __width : size_t , __compar : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * const :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int >) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mergesort_b (__base : * mut :: std :: os :: raw :: c_void , __nel : size_t , __width : size_t , __compar : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn psort (__base : * mut :: std :: os :: raw :: c_void , __nel : size_t , __width : size_t , __compar : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * const :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int >) ; } extern "C" { pub fn psort_b (__base : * mut :: std :: os :: raw :: c_void , __nel : size_t , __width : size_t , __compar : * mut :: std :: os :: raw :: c_void) ; } extern "C" { pub fn psort_r (__base : * mut :: std :: os :: raw :: c_void , __nel : size_t , __width : size_t , arg1 : * mut :: std :: os :: raw :: c_void , __compar : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void , arg3 : * const :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int >) ; } extern "C" { pub fn qsort_b (__base : * mut :: std :: os :: raw :: c_void , __nel : size_t , __width : size_t , __compar : * mut :: std :: os :: raw :: c_void) ; } extern "C" { pub fn qsort_r (__base : * mut :: std :: os :: raw :: c_void , __nel : size_t , __width : size_t , arg1 : * mut :: std :: os :: raw :: c_void , __compar : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void , arg3 : * const :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int >) ; } extern "C" { pub fn radixsort (__base : * mut * const :: std :: os :: raw :: c_uchar , __nel : :: std :: os :: raw :: c_int , __table : * const :: std :: os :: raw :: c_uchar , __endbyte : :: std :: os :: raw :: c_uint) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn rpmatch (arg1 : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sradixsort (__base : * mut * const :: std :: os :: raw :: c_uchar , __nel : :: std :: os :: raw :: c_int , __table : * const :: std :: os :: raw :: c_uchar , __endbyte : :: std :: os :: raw :: c_uint) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sranddev () ; } extern "C" { pub fn srandomdev () ; } extern "C" { pub fn reallocf (__ptr : * mut :: std :: os :: raw :: c_void , __size : size_t) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn strtonum (__numstr : * const :: std :: os :: raw :: c_char , __minval : :: std :: os :: raw :: c_longlong , __maxval : :: std :: os :: raw :: c_longlong , __errstrp : * mut * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn strtoq (__str : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn strtouq (__str : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub static mut suboptarg : * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn memchr (__s : * const :: std :: os :: raw :: c_void , __c : :: std :: os :: raw :: c_int , __n : :: std :: os :: raw :: c_ulong) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn memcmp (__s1 : * const :: std :: os :: raw :: c_void , __s2 : * const :: std :: os :: raw :: c_void , __n : :: std :: os :: raw :: c_ulong) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn memcpy (__dst : * mut :: std :: os :: raw :: c_void , __src : * const :: std :: os :: raw :: c_void , __n : :: std :: os :: raw :: c_ulong) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn memmove (__dst : * mut :: std :: os :: raw :: c_void , __src : * const :: std :: os :: raw :: c_void , __len : :: std :: os :: raw :: c_ulong) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn memset (__b : * mut :: std :: os :: raw :: c_void , __c : :: std :: os :: raw :: c_int , __len : :: std :: os :: raw :: c_ulong) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn strcat (__s1 : * mut :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strchr (__s : * const :: std :: os :: raw :: c_char , __c : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strcmp (__s1 : * const :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn strcoll (__s1 : * const :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn strcpy (__dst : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strcspn (__s : * const :: std :: os :: raw :: c_char , __charset : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn strerror (__errnum : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strlen (__s : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn strncat (__s1 : * mut :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char , __n : :: std :: os :: raw :: c_ulong) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strncmp (__s1 : * const :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char , __n : :: std :: os :: raw :: c_ulong) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn strncpy (__dst : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , __n : :: std :: os :: raw :: c_ulong) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strpbrk (__s : * const :: std :: os :: raw :: c_char , __charset : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strrchr (__s : * const :: std :: os :: raw :: c_char , __c : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strspn (__s : * const :: std :: os :: raw :: c_char , __charset : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn strstr (__big : * const :: std :: os :: raw :: c_char , __little : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strtok (__str : * mut :: std :: os :: raw :: c_char , __sep : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strxfrm (__s1 : * mut :: std :: os :: raw :: c_char , __s2 : * const :: std :: os :: raw :: c_char , __n : :: std :: os :: raw :: c_ulong) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn strtok_r (__str : * mut :: std :: os :: raw :: c_char , __sep : * const :: std :: os :: raw :: c_char , __lasts : * mut * mut :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strerror_r (__errnum : :: std :: os :: raw :: c_int , __strerrbuf : * mut :: std :: os :: raw :: c_char , __buflen : size_t) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn strdup (__s1 : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn memccpy (__dst : * mut :: std :: os :: raw :: c_void , __src : * const :: std :: os :: raw :: c_void , __c : :: std :: os :: raw :: c_int , __n : :: std :: os :: raw :: c_ulong) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn stpcpy (__dst : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn stpncpy (__dst : * mut :: std :: os :: raw :: c_char , __src : * const :: std :: os :: raw :: c_char , __n : :: std :: os :: raw :: c_ulong) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strndup (__s1 : * const :: std :: os :: raw :: c_char , __n : :: std :: os :: raw :: c_ulong) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strnlen (__s1 : * const :: std :: os :: raw :: c_char , __n : size_t) -> size_t ; } extern "C" { pub fn strsignal (__sig : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } pub type rsize_t = __darwin_size_t ; pub type errno_t = :: std :: os :: raw :: c_int ; extern "C" { pub fn memset_s (__s : * mut :: std :: os :: raw :: c_void , __smax : rsize_t , __c : :: std :: os :: raw :: c_int , __n : rsize_t) -> errno_t ; } pub type ssize_t = __darwin_ssize_t ; extern "C" { pub fn memmem (__big : * const :: std :: os :: raw :: c_void , __big_len : size_t , __little : * const :: std :: os :: raw :: c_void , __little_len : size_t) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn memset_pattern4 (__b : * mut :: std :: os :: raw :: c_void , __pattern4 : * const :: std :: os :: raw :: c_void , __len : size_t) ; } extern "C" { pub fn memset_pattern8 (__b : * mut :: std :: os :: raw :: c_void , __pattern8 : * const :: std :: os :: raw :: c_void , __len : size_t) ; } extern "C" { pub fn memset_pattern16 (__b : * mut :: std :: os :: raw :: c_void , __pattern16 : * const :: std :: os :: raw :: c_void , __len : size_t) ; } extern "C" { pub fn strcasestr (__big : * const :: std :: os :: raw :: c_char , __little : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strnstr (__big : * const :: std :: os :: raw :: c_char , __little : * const :: std :: os :: raw :: c_char , __len : size_t) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn strlcat (__dst : * mut :: std :: os :: raw :: c_char , __source : * const :: std :: os :: raw :: c_char , __size : :: std :: os :: raw :: c_ulong) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn strlcpy (__dst : * mut :: std :: os :: raw :: c_char , __source : * const :: std :: os :: raw :: c_char , __size : :: std :: os :: raw :: c_ulong) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn strmode (__mode : :: std :: os :: raw :: c_int , __bp : * mut :: std :: os :: raw :: c_char) ; } extern "C" { pub fn strsep (__stringp : * mut * mut :: std :: os :: raw :: c_char , __delim : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn swab (arg1 : * const :: std :: os :: raw :: c_void , arg2 : * mut :: std :: os :: raw :: c_void , arg3 : ssize_t) ; } extern "C" { pub fn timingsafe_bcmp (__b1 : * const :: std :: os :: raw :: c_void , __b2 : * const :: std :: os :: raw :: c_void , __len : size_t) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn strsignal_r (__sig : :: std :: os :: raw :: c_int , __strsignalbuf : * mut :: std :: os :: raw :: c_char , __buflen : size_t) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn bcmp (arg1 : * const :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void , arg3 : :: std :: os :: raw :: c_ulong) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn bcopy (arg1 : * const :: std :: os :: raw :: c_void , arg2 : * mut :: std :: os :: raw :: c_void , arg3 : size_t) ; } extern "C" { pub fn bzero (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : :: std :: os :: raw :: c_ulong) ; } extern "C" { pub fn index (arg1 : * const :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn rindex (arg1 : * const :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ffs (arg1 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn strcasecmp (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn strncasecmp (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_ulong) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ffsl (arg1 : :: std :: os :: raw :: c_long) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ffsll (arg1 : :: std :: os :: raw :: c_longlong) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fls (arg1 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn flsl (arg1 : :: std :: os :: raw :: c_long) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn flsll (arg1 : :: std :: os :: raw :: c_longlong) -> :: std :: os :: raw :: c_int ; } pub type __m64 = [:: std :: os :: raw :: c_longlong ; 1usize] ; pub type __v1di = [:: std :: os :: raw :: c_longlong ; 1usize] ; pub type __v2si = [:: std :: os :: raw :: c_int ; 2usize] ; pub type __v4hi = [:: std :: os :: raw :: c_short ; 4usize] ; pub type __v8qi = [:: std :: os :: raw :: c_char ; 8usize] ; pub type __v4si = [:: std :: os :: raw :: c_int ; 4usize] ; pub type __v4sf = [f32 ; 4usize] ; pub type __m128 = [f32 ; 4usize] ; pub type __m128_u = [f32 ; 4usize] ; pub type __v4su = [:: std :: os :: raw :: c_uint ; 4usize] ; extern "C" { pub fn _mm_sfence () ; } extern "C" { pub fn _mm_getcsr () -> :: std :: os :: raw :: c_uint ; } extern "C" { pub fn _mm_setcsr (__i : :: std :: os :: raw :: c_uint) ; } pub type __m128d = [f64 ; 2usize] ; pub type __m128i = [:: std :: os :: raw :: c_longlong ; 2usize] ; pub type __m128d_u = [f64 ; 2usize] ; pub type __m128i_u = [:: std :: os :: raw :: c_longlong ; 2usize] ; pub type __v2df = [f64 ; 2usize] ; pub type __v2di = [:: std :: os :: raw :: c_longlong ; 2usize] ; pub type __v8hi = [:: std :: os :: raw :: c_short ; 8usize] ; pub type __v16qi = [:: std :: os :: raw :: c_char ; 16usize] ; pub type __v2du = [:: std :: os :: raw :: c_ulonglong ; 2usize] ; pub type __v8hu = [:: std :: os :: raw :: c_ushort ; 8usize] ; pub type __v16qu = [:: std :: os :: raw :: c_uchar ; 16usize] ; pub type __v16qs = [:: std :: os :: raw :: c_schar ; 16usize] ; extern "C" { pub fn _mm_clflush (__p : * const :: std :: os :: raw :: c_void) ; } extern "C" { pub fn _mm_lfence () ; } extern "C" { pub fn _mm_mfence () ; } extern "C" { pub fn _mm_pause () ; } pub type __v4df = [f64 ; 4usize] ; pub type __v8sf = [f32 ; 8usize] ; pub type __v4di = [:: std :: os :: raw :: c_longlong ; 4usize] ; pub type __v8si = [:: std :: os :: raw :: c_int ; 8usize] ; pub type __v16hi = [:: std :: os :: raw :: c_short ; 16usize] ; pub type __v32qi = [:: std :: os :: raw :: c_char ; 32usize] ; pub type __v4du = [:: std :: os :: raw :: c_ulonglong ; 4usize] ; pub type __v8su = [:: std :: os :: raw :: c_uint ; 8usize] ; pub type __v16hu = [:: std :: os :: raw :: c_ushort ; 16usize] ; pub type __v32qu = [:: std :: os :: raw :: c_uchar ; 32usize] ; pub type __v32qs = [:: std :: os :: raw :: c_schar ; 32usize] ; pub type __m256 = [f32 ; 8usize] ; pub type __m256d = [f64 ; 4usize] ; pub type __m256i = [:: std :: os :: raw :: c_longlong ; 4usize] ; pub type __m256_u = [f32 ; 8usize] ; pub type __m256d_u = [f64 ; 4usize] ; pub type __m256i_u = [:: std :: os :: raw :: c_longlong ; 4usize] ; pub type __v64qi = [:: std :: os :: raw :: c_char ; 64usize] ; pub type __v32hi = [:: std :: os :: raw :: c_short ; 32usize] ; pub type __v8df = [f64 ; 8usize] ; pub type __v16sf = [f32 ; 16usize] ; pub type __v8di = [:: std :: os :: raw :: c_longlong ; 8usize] ; pub type __v16si = [:: std :: os :: raw :: c_int ; 16usize] ; pub type __v64qu = [:: std :: os :: raw :: c_uchar ; 64usize] ; pub type __v32hu = [:: std :: os :: raw :: c_ushort ; 32usize] ; pub type __v8du = [:: std :: os :: raw :: c_ulonglong ; 8usize] ; pub type __v16su = [:: std :: os :: raw :: c_uint ; 16usize] ; pub type __m512 = [f32 ; 16usize] ; pub type __m512d = [f64 ; 8usize] ; pub type __m512i = [:: std :: os :: raw :: c_longlong ; 8usize] ; pub type __m512_u = [f32 ; 16usize] ; pub type __m512d_u = [f64 ; 8usize] ; pub type __m512i_u = [:: std :: os :: raw :: c_longlong ; 8usize] ; pub type __mmask8 = :: std :: os :: raw :: c_uchar ; pub type __mmask16 = :: std :: os :: raw :: c_ushort ; pub const _MM_CMPINT_ENUM__MM_CMPINT_EQ : _MM_CMPINT_ENUM = 0 ; pub const _MM_CMPINT_ENUM__MM_CMPINT_LT : _MM_CMPINT_ENUM = 1 ; pub const _MM_CMPINT_ENUM__MM_CMPINT_LE : _MM_CMPINT_ENUM = 2 ; pub const _MM_CMPINT_ENUM__MM_CMPINT_UNUSED : _MM_CMPINT_ENUM = 3 ; pub const _MM_CMPINT_ENUM__MM_CMPINT_NE : _MM_CMPINT_ENUM = 4 ; pub const _MM_CMPINT_ENUM__MM_CMPINT_NLT : _MM_CMPINT_ENUM = 5 ; pub const _MM_CMPINT_ENUM__MM_CMPINT_NLE : _MM_CMPINT_ENUM = 6 ; pub type _MM_CMPINT_ENUM = :: std :: os :: raw :: c_uint ; pub const _MM_PERM_ENUM__MM_PERM_AAAA : _MM_PERM_ENUM = 0 ; pub const _MM_PERM_ENUM__MM_PERM_AAAB : _MM_PERM_ENUM = 1 ; pub const _MM_PERM_ENUM__MM_PERM_AAAC : _MM_PERM_ENUM = 2 ; pub const _MM_PERM_ENUM__MM_PERM_AAAD : _MM_PERM_ENUM = 3 ; pub const _MM_PERM_ENUM__MM_PERM_AABA : _MM_PERM_ENUM = 4 ; pub const _MM_PERM_ENUM__MM_PERM_AABB : _MM_PERM_ENUM = 5 ; pub const _MM_PERM_ENUM__MM_PERM_AABC : _MM_PERM_ENUM = 6 ; pub const _MM_PERM_ENUM__MM_PERM_AABD : _MM_PERM_ENUM = 7 ; pub const _MM_PERM_ENUM__MM_PERM_AACA : _MM_PERM_ENUM = 8 ; pub const _MM_PERM_ENUM__MM_PERM_AACB : _MM_PERM_ENUM = 9 ; pub const _MM_PERM_ENUM__MM_PERM_AACC : _MM_PERM_ENUM = 10 ; pub const _MM_PERM_ENUM__MM_PERM_AACD : _MM_PERM_ENUM = 11 ; pub const _MM_PERM_ENUM__MM_PERM_AADA : _MM_PERM_ENUM = 12 ; pub const _MM_PERM_ENUM__MM_PERM_AADB : _MM_PERM_ENUM = 13 ; pub const _MM_PERM_ENUM__MM_PERM_AADC : _MM_PERM_ENUM = 14 ; pub const _MM_PERM_ENUM__MM_PERM_AADD : _MM_PERM_ENUM = 15 ; pub const _MM_PERM_ENUM__MM_PERM_ABAA : _MM_PERM_ENUM = 16 ; pub const _MM_PERM_ENUM__MM_PERM_ABAB : _MM_PERM_ENUM = 17 ; pub const _MM_PERM_ENUM__MM_PERM_ABAC : _MM_PERM_ENUM = 18 ; pub const _MM_PERM_ENUM__MM_PERM_ABAD : _MM_PERM_ENUM = 19 ; pub const _MM_PERM_ENUM__MM_PERM_ABBA : _MM_PERM_ENUM = 20 ; pub const _MM_PERM_ENUM__MM_PERM_ABBB : _MM_PERM_ENUM = 21 ; pub const _MM_PERM_ENUM__MM_PERM_ABBC : _MM_PERM_ENUM = 22 ; pub const _MM_PERM_ENUM__MM_PERM_ABBD : _MM_PERM_ENUM = 23 ; pub const _MM_PERM_ENUM__MM_PERM_ABCA : _MM_PERM_ENUM = 24 ; pub const _MM_PERM_ENUM__MM_PERM_ABCB : _MM_PERM_ENUM = 25 ; pub const _MM_PERM_ENUM__MM_PERM_ABCC : _MM_PERM_ENUM = 26 ; pub const _MM_PERM_ENUM__MM_PERM_ABCD : _MM_PERM_ENUM = 27 ; pub const _MM_PERM_ENUM__MM_PERM_ABDA : _MM_PERM_ENUM = 28 ; pub const _MM_PERM_ENUM__MM_PERM_ABDB : _MM_PERM_ENUM = 29 ; pub const _MM_PERM_ENUM__MM_PERM_ABDC : _MM_PERM_ENUM = 30 ; pub const _MM_PERM_ENUM__MM_PERM_ABDD : _MM_PERM_ENUM = 31 ; pub const _MM_PERM_ENUM__MM_PERM_ACAA : _MM_PERM_ENUM = 32 ; pub const _MM_PERM_ENUM__MM_PERM_ACAB : _MM_PERM_ENUM = 33 ; pub const _MM_PERM_ENUM__MM_PERM_ACAC : _MM_PERM_ENUM = 34 ; pub const _MM_PERM_ENUM__MM_PERM_ACAD : _MM_PERM_ENUM = 35 ; pub const _MM_PERM_ENUM__MM_PERM_ACBA : _MM_PERM_ENUM = 36 ; pub const _MM_PERM_ENUM__MM_PERM_ACBB : _MM_PERM_ENUM = 37 ; pub const _MM_PERM_ENUM__MM_PERM_ACBC : _MM_PERM_ENUM = 38 ; pub const _MM_PERM_ENUM__MM_PERM_ACBD : _MM_PERM_ENUM = 39 ; pub const _MM_PERM_ENUM__MM_PERM_ACCA : _MM_PERM_ENUM = 40 ; pub const _MM_PERM_ENUM__MM_PERM_ACCB : _MM_PERM_ENUM = 41 ; pub const _MM_PERM_ENUM__MM_PERM_ACCC : _MM_PERM_ENUM = 42 ; pub const _MM_PERM_ENUM__MM_PERM_ACCD : _MM_PERM_ENUM = 43 ; pub const _MM_PERM_ENUM__MM_PERM_ACDA : _MM_PERM_ENUM = 44 ; pub const _MM_PERM_ENUM__MM_PERM_ACDB : _MM_PERM_ENUM = 45 ; pub const _MM_PERM_ENUM__MM_PERM_ACDC : _MM_PERM_ENUM = 46 ; pub const _MM_PERM_ENUM__MM_PERM_ACDD : _MM_PERM_ENUM = 47 ; pub const _MM_PERM_ENUM__MM_PERM_ADAA : _MM_PERM_ENUM = 48 ; pub const _MM_PERM_ENUM__MM_PERM_ADAB : _MM_PERM_ENUM = 49 ; pub const _MM_PERM_ENUM__MM_PERM_ADAC : _MM_PERM_ENUM = 50 ; pub const _MM_PERM_ENUM__MM_PERM_ADAD : _MM_PERM_ENUM = 51 ; pub const _MM_PERM_ENUM__MM_PERM_ADBA : _MM_PERM_ENUM = 52 ; pub const _MM_PERM_ENUM__MM_PERM_ADBB : _MM_PERM_ENUM = 53 ; pub const _MM_PERM_ENUM__MM_PERM_ADBC : _MM_PERM_ENUM = 54 ; pub const _MM_PERM_ENUM__MM_PERM_ADBD : _MM_PERM_ENUM = 55 ; pub const _MM_PERM_ENUM__MM_PERM_ADCA : _MM_PERM_ENUM = 56 ; pub const _MM_PERM_ENUM__MM_PERM_ADCB : _MM_PERM_ENUM = 57 ; pub const _MM_PERM_ENUM__MM_PERM_ADCC : _MM_PERM_ENUM = 58 ; pub const _MM_PERM_ENUM__MM_PERM_ADCD : _MM_PERM_ENUM = 59 ; pub const _MM_PERM_ENUM__MM_PERM_ADDA : _MM_PERM_ENUM = 60 ; pub const _MM_PERM_ENUM__MM_PERM_ADDB : _MM_PERM_ENUM = 61 ; pub const _MM_PERM_ENUM__MM_PERM_ADDC : _MM_PERM_ENUM = 62 ; pub const _MM_PERM_ENUM__MM_PERM_ADDD : _MM_PERM_ENUM = 63 ; pub const _MM_PERM_ENUM__MM_PERM_BAAA : _MM_PERM_ENUM = 64 ; pub const _MM_PERM_ENUM__MM_PERM_BAAB : _MM_PERM_ENUM = 65 ; pub const _MM_PERM_ENUM__MM_PERM_BAAC : _MM_PERM_ENUM = 66 ; pub const _MM_PERM_ENUM__MM_PERM_BAAD : _MM_PERM_ENUM = 67 ; pub const _MM_PERM_ENUM__MM_PERM_BABA : _MM_PERM_ENUM = 68 ; pub const _MM_PERM_ENUM__MM_PERM_BABB : _MM_PERM_ENUM = 69 ; pub const _MM_PERM_ENUM__MM_PERM_BABC : _MM_PERM_ENUM = 70 ; pub const _MM_PERM_ENUM__MM_PERM_BABD : _MM_PERM_ENUM = 71 ; pub const _MM_PERM_ENUM__MM_PERM_BACA : _MM_PERM_ENUM = 72 ; pub const _MM_PERM_ENUM__MM_PERM_BACB : _MM_PERM_ENUM = 73 ; pub const _MM_PERM_ENUM__MM_PERM_BACC : _MM_PERM_ENUM = 74 ; pub const _MM_PERM_ENUM__MM_PERM_BACD : _MM_PERM_ENUM = 75 ; pub const _MM_PERM_ENUM__MM_PERM_BADA : _MM_PERM_ENUM = 76 ; pub const _MM_PERM_ENUM__MM_PERM_BADB : _MM_PERM_ENUM = 77 ; pub const _MM_PERM_ENUM__MM_PERM_BADC : _MM_PERM_ENUM = 78 ; pub const _MM_PERM_ENUM__MM_PERM_BADD : _MM_PERM_ENUM = 79 ; pub const _MM_PERM_ENUM__MM_PERM_BBAA : _MM_PERM_ENUM = 80 ; pub const _MM_PERM_ENUM__MM_PERM_BBAB : _MM_PERM_ENUM = 81 ; pub const _MM_PERM_ENUM__MM_PERM_BBAC : _MM_PERM_ENUM = 82 ; pub const _MM_PERM_ENUM__MM_PERM_BBAD : _MM_PERM_ENUM = 83 ; pub const _MM_PERM_ENUM__MM_PERM_BBBA : _MM_PERM_ENUM = 84 ; pub const _MM_PERM_ENUM__MM_PERM_BBBB : _MM_PERM_ENUM = 85 ; pub const _MM_PERM_ENUM__MM_PERM_BBBC : _MM_PERM_ENUM = 86 ; pub const _MM_PERM_ENUM__MM_PERM_BBBD : _MM_PERM_ENUM = 87 ; pub const _MM_PERM_ENUM__MM_PERM_BBCA : _MM_PERM_ENUM = 88 ; pub const _MM_PERM_ENUM__MM_PERM_BBCB : _MM_PERM_ENUM = 89 ; pub const _MM_PERM_ENUM__MM_PERM_BBCC : _MM_PERM_ENUM = 90 ; pub const _MM_PERM_ENUM__MM_PERM_BBCD : _MM_PERM_ENUM = 91 ; pub const _MM_PERM_ENUM__MM_PERM_BBDA : _MM_PERM_ENUM = 92 ; pub const _MM_PERM_ENUM__MM_PERM_BBDB : _MM_PERM_ENUM = 93 ; pub const _MM_PERM_ENUM__MM_PERM_BBDC : _MM_PERM_ENUM = 94 ; pub const _MM_PERM_ENUM__MM_PERM_BBDD : _MM_PERM_ENUM = 95 ; pub const _MM_PERM_ENUM__MM_PERM_BCAA : _MM_PERM_ENUM = 96 ; pub const _MM_PERM_ENUM__MM_PERM_BCAB : _MM_PERM_ENUM = 97 ; pub const _MM_PERM_ENUM__MM_PERM_BCAC : _MM_PERM_ENUM = 98 ; pub const _MM_PERM_ENUM__MM_PERM_BCAD : _MM_PERM_ENUM = 99 ; pub const _MM_PERM_ENUM__MM_PERM_BCBA : _MM_PERM_ENUM = 100 ; pub const _MM_PERM_ENUM__MM_PERM_BCBB : _MM_PERM_ENUM = 101 ; pub const _MM_PERM_ENUM__MM_PERM_BCBC : _MM_PERM_ENUM = 102 ; pub const _MM_PERM_ENUM__MM_PERM_BCBD : _MM_PERM_ENUM = 103 ; pub const _MM_PERM_ENUM__MM_PERM_BCCA : _MM_PERM_ENUM = 104 ; pub const _MM_PERM_ENUM__MM_PERM_BCCB : _MM_PERM_ENUM = 105 ; pub const _MM_PERM_ENUM__MM_PERM_BCCC : _MM_PERM_ENUM = 106 ; pub const _MM_PERM_ENUM__MM_PERM_BCCD : _MM_PERM_ENUM = 107 ; pub const _MM_PERM_ENUM__MM_PERM_BCDA : _MM_PERM_ENUM = 108 ; pub const _MM_PERM_ENUM__MM_PERM_BCDB : _MM_PERM_ENUM = 109 ; pub const _MM_PERM_ENUM__MM_PERM_BCDC : _MM_PERM_ENUM = 110 ; pub const _MM_PERM_ENUM__MM_PERM_BCDD : _MM_PERM_ENUM = 111 ; pub const _MM_PERM_ENUM__MM_PERM_BDAA : _MM_PERM_ENUM = 112 ; pub const _MM_PERM_ENUM__MM_PERM_BDAB : _MM_PERM_ENUM = 113 ; pub const _MM_PERM_ENUM__MM_PERM_BDAC : _MM_PERM_ENUM = 114 ; pub const _MM_PERM_ENUM__MM_PERM_BDAD : _MM_PERM_ENUM = 115 ; pub const _MM_PERM_ENUM__MM_PERM_BDBA : _MM_PERM_ENUM = 116 ; pub const _MM_PERM_ENUM__MM_PERM_BDBB : _MM_PERM_ENUM = 117 ; pub const _MM_PERM_ENUM__MM_PERM_BDBC : _MM_PERM_ENUM = 118 ; pub const _MM_PERM_ENUM__MM_PERM_BDBD : _MM_PERM_ENUM = 119 ; pub const _MM_PERM_ENUM__MM_PERM_BDCA : _MM_PERM_ENUM = 120 ; pub const _MM_PERM_ENUM__MM_PERM_BDCB : _MM_PERM_ENUM = 121 ; pub const _MM_PERM_ENUM__MM_PERM_BDCC : _MM_PERM_ENUM = 122 ; pub const _MM_PERM_ENUM__MM_PERM_BDCD : _MM_PERM_ENUM = 123 ; pub const _MM_PERM_ENUM__MM_PERM_BDDA : _MM_PERM_ENUM = 124 ; pub const _MM_PERM_ENUM__MM_PERM_BDDB : _MM_PERM_ENUM = 125 ; pub const _MM_PERM_ENUM__MM_PERM_BDDC : _MM_PERM_ENUM = 126 ; pub const _MM_PERM_ENUM__MM_PERM_BDDD : _MM_PERM_ENUM = 127 ; pub const _MM_PERM_ENUM__MM_PERM_CAAA : _MM_PERM_ENUM = 128 ; pub const _MM_PERM_ENUM__MM_PERM_CAAB : _MM_PERM_ENUM = 129 ; pub const _MM_PERM_ENUM__MM_PERM_CAAC : _MM_PERM_ENUM = 130 ; pub const _MM_PERM_ENUM__MM_PERM_CAAD : _MM_PERM_ENUM = 131 ; pub const _MM_PERM_ENUM__MM_PERM_CABA : _MM_PERM_ENUM = 132 ; pub const _MM_PERM_ENUM__MM_PERM_CABB : _MM_PERM_ENUM = 133 ; pub const _MM_PERM_ENUM__MM_PERM_CABC : _MM_PERM_ENUM = 134 ; pub const _MM_PERM_ENUM__MM_PERM_CABD : _MM_PERM_ENUM = 135 ; pub const _MM_PERM_ENUM__MM_PERM_CACA : _MM_PERM_ENUM = 136 ; pub const _MM_PERM_ENUM__MM_PERM_CACB : _MM_PERM_ENUM = 137 ; pub const _MM_PERM_ENUM__MM_PERM_CACC : _MM_PERM_ENUM = 138 ; pub const _MM_PERM_ENUM__MM_PERM_CACD : _MM_PERM_ENUM = 139 ; pub const _MM_PERM_ENUM__MM_PERM_CADA : _MM_PERM_ENUM = 140 ; pub const _MM_PERM_ENUM__MM_PERM_CADB : _MM_PERM_ENUM = 141 ; pub const _MM_PERM_ENUM__MM_PERM_CADC : _MM_PERM_ENUM = 142 ; pub const _MM_PERM_ENUM__MM_PERM_CADD : _MM_PERM_ENUM = 143 ; pub const _MM_PERM_ENUM__MM_PERM_CBAA : _MM_PERM_ENUM = 144 ; pub const _MM_PERM_ENUM__MM_PERM_CBAB : _MM_PERM_ENUM = 145 ; pub const _MM_PERM_ENUM__MM_PERM_CBAC : _MM_PERM_ENUM = 146 ; pub const _MM_PERM_ENUM__MM_PERM_CBAD : _MM_PERM_ENUM = 147 ; pub const _MM_PERM_ENUM__MM_PERM_CBBA : _MM_PERM_ENUM = 148 ; pub const _MM_PERM_ENUM__MM_PERM_CBBB : _MM_PERM_ENUM = 149 ; pub const _MM_PERM_ENUM__MM_PERM_CBBC : _MM_PERM_ENUM = 150 ; pub const _MM_PERM_ENUM__MM_PERM_CBBD : _MM_PERM_ENUM = 151 ; pub const _MM_PERM_ENUM__MM_PERM_CBCA : _MM_PERM_ENUM = 152 ; pub const _MM_PERM_ENUM__MM_PERM_CBCB : _MM_PERM_ENUM = 153 ; pub const _MM_PERM_ENUM__MM_PERM_CBCC : _MM_PERM_ENUM = 154 ; pub const _MM_PERM_ENUM__MM_PERM_CBCD : _MM_PERM_ENUM = 155 ; pub const _MM_PERM_ENUM__MM_PERM_CBDA : _MM_PERM_ENUM = 156 ; pub const _MM_PERM_ENUM__MM_PERM_CBDB : _MM_PERM_ENUM = 157 ; pub const _MM_PERM_ENUM__MM_PERM_CBDC : _MM_PERM_ENUM = 158 ; pub const _MM_PERM_ENUM__MM_PERM_CBDD : _MM_PERM_ENUM = 159 ; pub const _MM_PERM_ENUM__MM_PERM_CCAA : _MM_PERM_ENUM = 160 ; pub const _MM_PERM_ENUM__MM_PERM_CCAB : _MM_PERM_ENUM = 161 ; pub const _MM_PERM_ENUM__MM_PERM_CCAC : _MM_PERM_ENUM = 162 ; pub const _MM_PERM_ENUM__MM_PERM_CCAD : _MM_PERM_ENUM = 163 ; pub const _MM_PERM_ENUM__MM_PERM_CCBA : _MM_PERM_ENUM = 164 ; pub const _MM_PERM_ENUM__MM_PERM_CCBB : _MM_PERM_ENUM = 165 ; pub const _MM_PERM_ENUM__MM_PERM_CCBC : _MM_PERM_ENUM = 166 ; pub const _MM_PERM_ENUM__MM_PERM_CCBD : _MM_PERM_ENUM = 167 ; pub const _MM_PERM_ENUM__MM_PERM_CCCA : _MM_PERM_ENUM = 168 ; pub const _MM_PERM_ENUM__MM_PERM_CCCB : _MM_PERM_ENUM = 169 ; pub const _MM_PERM_ENUM__MM_PERM_CCCC : _MM_PERM_ENUM = 170 ; pub const _MM_PERM_ENUM__MM_PERM_CCCD : _MM_PERM_ENUM = 171 ; pub const _MM_PERM_ENUM__MM_PERM_CCDA : _MM_PERM_ENUM = 172 ; pub const _MM_PERM_ENUM__MM_PERM_CCDB : _MM_PERM_ENUM = 173 ; pub const _MM_PERM_ENUM__MM_PERM_CCDC : _MM_PERM_ENUM = 174 ; pub const _MM_PERM_ENUM__MM_PERM_CCDD : _MM_PERM_ENUM = 175 ; pub const _MM_PERM_ENUM__MM_PERM_CDAA : _MM_PERM_ENUM = 176 ; pub const _MM_PERM_ENUM__MM_PERM_CDAB : _MM_PERM_ENUM = 177 ; pub const _MM_PERM_ENUM__MM_PERM_CDAC : _MM_PERM_ENUM = 178 ; pub const _MM_PERM_ENUM__MM_PERM_CDAD : _MM_PERM_ENUM = 179 ; pub const _MM_PERM_ENUM__MM_PERM_CDBA : _MM_PERM_ENUM = 180 ; pub const _MM_PERM_ENUM__MM_PERM_CDBB : _MM_PERM_ENUM = 181 ; pub const _MM_PERM_ENUM__MM_PERM_CDBC : _MM_PERM_ENUM = 182 ; pub const _MM_PERM_ENUM__MM_PERM_CDBD : _MM_PERM_ENUM = 183 ; pub const _MM_PERM_ENUM__MM_PERM_CDCA : _MM_PERM_ENUM = 184 ; pub const _MM_PERM_ENUM__MM_PERM_CDCB : _MM_PERM_ENUM = 185 ; pub const _MM_PERM_ENUM__MM_PERM_CDCC : _MM_PERM_ENUM = 186 ; pub const _MM_PERM_ENUM__MM_PERM_CDCD : _MM_PERM_ENUM = 187 ; pub const _MM_PERM_ENUM__MM_PERM_CDDA : _MM_PERM_ENUM = 188 ; pub const _MM_PERM_ENUM__MM_PERM_CDDB : _MM_PERM_ENUM = 189 ; pub const _MM_PERM_ENUM__MM_PERM_CDDC : _MM_PERM_ENUM = 190 ; pub const _MM_PERM_ENUM__MM_PERM_CDDD : _MM_PERM_ENUM = 191 ; pub const _MM_PERM_ENUM__MM_PERM_DAAA : _MM_PERM_ENUM = 192 ; pub const _MM_PERM_ENUM__MM_PERM_DAAB : _MM_PERM_ENUM = 193 ; pub const _MM_PERM_ENUM__MM_PERM_DAAC : _MM_PERM_ENUM = 194 ; pub const _MM_PERM_ENUM__MM_PERM_DAAD : _MM_PERM_ENUM = 195 ; pub const _MM_PERM_ENUM__MM_PERM_DABA : _MM_PERM_ENUM = 196 ; pub const _MM_PERM_ENUM__MM_PERM_DABB : _MM_PERM_ENUM = 197 ; pub const _MM_PERM_ENUM__MM_PERM_DABC : _MM_PERM_ENUM = 198 ; pub const _MM_PERM_ENUM__MM_PERM_DABD : _MM_PERM_ENUM = 199 ; pub const _MM_PERM_ENUM__MM_PERM_DACA : _MM_PERM_ENUM = 200 ; pub const _MM_PERM_ENUM__MM_PERM_DACB : _MM_PERM_ENUM = 201 ; pub const _MM_PERM_ENUM__MM_PERM_DACC : _MM_PERM_ENUM = 202 ; pub const _MM_PERM_ENUM__MM_PERM_DACD : _MM_PERM_ENUM = 203 ; pub const _MM_PERM_ENUM__MM_PERM_DADA : _MM_PERM_ENUM = 204 ; pub const _MM_PERM_ENUM__MM_PERM_DADB : _MM_PERM_ENUM = 205 ; pub const _MM_PERM_ENUM__MM_PERM_DADC : _MM_PERM_ENUM = 206 ; pub const _MM_PERM_ENUM__MM_PERM_DADD : _MM_PERM_ENUM = 207 ; pub const _MM_PERM_ENUM__MM_PERM_DBAA : _MM_PERM_ENUM = 208 ; pub const _MM_PERM_ENUM__MM_PERM_DBAB : _MM_PERM_ENUM = 209 ; pub const _MM_PERM_ENUM__MM_PERM_DBAC : _MM_PERM_ENUM = 210 ; pub const _MM_PERM_ENUM__MM_PERM_DBAD : _MM_PERM_ENUM = 211 ; pub const _MM_PERM_ENUM__MM_PERM_DBBA : _MM_PERM_ENUM = 212 ; pub const _MM_PERM_ENUM__MM_PERM_DBBB : _MM_PERM_ENUM = 213 ; pub const _MM_PERM_ENUM__MM_PERM_DBBC : _MM_PERM_ENUM = 214 ; pub const _MM_PERM_ENUM__MM_PERM_DBBD : _MM_PERM_ENUM = 215 ; pub const _MM_PERM_ENUM__MM_PERM_DBCA : _MM_PERM_ENUM = 216 ; pub const _MM_PERM_ENUM__MM_PERM_DBCB : _MM_PERM_ENUM = 217 ; pub const _MM_PERM_ENUM__MM_PERM_DBCC : _MM_PERM_ENUM = 218 ; pub const _MM_PERM_ENUM__MM_PERM_DBCD : _MM_PERM_ENUM = 219 ; pub const _MM_PERM_ENUM__MM_PERM_DBDA : _MM_PERM_ENUM = 220 ; pub const _MM_PERM_ENUM__MM_PERM_DBDB : _MM_PERM_ENUM = 221 ; pub const _MM_PERM_ENUM__MM_PERM_DBDC : _MM_PERM_ENUM = 222 ; pub const _MM_PERM_ENUM__MM_PERM_DBDD : _MM_PERM_ENUM = 223 ; pub const _MM_PERM_ENUM__MM_PERM_DCAA : _MM_PERM_ENUM = 224 ; pub const _MM_PERM_ENUM__MM_PERM_DCAB : _MM_PERM_ENUM = 225 ; pub const _MM_PERM_ENUM__MM_PERM_DCAC : _MM_PERM_ENUM = 226 ; pub const _MM_PERM_ENUM__MM_PERM_DCAD : _MM_PERM_ENUM = 227 ; pub const _MM_PERM_ENUM__MM_PERM_DCBA : _MM_PERM_ENUM = 228 ; pub const _MM_PERM_ENUM__MM_PERM_DCBB : _MM_PERM_ENUM = 229 ; pub const _MM_PERM_ENUM__MM_PERM_DCBC : _MM_PERM_ENUM = 230 ; pub const _MM_PERM_ENUM__MM_PERM_DCBD : _MM_PERM_ENUM = 231 ; pub const _MM_PERM_ENUM__MM_PERM_DCCA : _MM_PERM_ENUM = 232 ; pub const _MM_PERM_ENUM__MM_PERM_DCCB : _MM_PERM_ENUM = 233 ; pub const _MM_PERM_ENUM__MM_PERM_DCCC : _MM_PERM_ENUM = 234 ; pub const _MM_PERM_ENUM__MM_PERM_DCCD : _MM_PERM_ENUM = 235 ; pub const _MM_PERM_ENUM__MM_PERM_DCDA : _MM_PERM_ENUM = 236 ; pub const _MM_PERM_ENUM__MM_PERM_DCDB : _MM_PERM_ENUM = 237 ; pub const _MM_PERM_ENUM__MM_PERM_DCDC : _MM_PERM_ENUM = 238 ; pub const _MM_PERM_ENUM__MM_PERM_DCDD : _MM_PERM_ENUM = 239 ; pub const _MM_PERM_ENUM__MM_PERM_DDAA : _MM_PERM_ENUM = 240 ; pub const _MM_PERM_ENUM__MM_PERM_DDAB : _MM_PERM_ENUM = 241 ; pub const _MM_PERM_ENUM__MM_PERM_DDAC : _MM_PERM_ENUM = 242 ; pub const _MM_PERM_ENUM__MM_PERM_DDAD : _MM_PERM_ENUM = 243 ; pub const _MM_PERM_ENUM__MM_PERM_DDBA : _MM_PERM_ENUM = 244 ; pub const _MM_PERM_ENUM__MM_PERM_DDBB : _MM_PERM_ENUM = 245 ; pub const _MM_PERM_ENUM__MM_PERM_DDBC : _MM_PERM_ENUM = 246 ; pub const _MM_PERM_ENUM__MM_PERM_DDBD : _MM_PERM_ENUM = 247 ; pub const _MM_PERM_ENUM__MM_PERM_DDCA : _MM_PERM_ENUM = 248 ; pub const _MM_PERM_ENUM__MM_PERM_DDCB : _MM_PERM_ENUM = 249 ; pub const _MM_PERM_ENUM__MM_PERM_DDCC : _MM_PERM_ENUM = 250 ; pub const _MM_PERM_ENUM__MM_PERM_DDCD : _MM_PERM_ENUM = 251 ; pub const _MM_PERM_ENUM__MM_PERM_DDDA : _MM_PERM_ENUM = 252 ; pub const _MM_PERM_ENUM__MM_PERM_DDDB : _MM_PERM_ENUM = 253 ; pub const _MM_PERM_ENUM__MM_PERM_DDDC : _MM_PERM_ENUM = 254 ; pub const _MM_PERM_ENUM__MM_PERM_DDDD : _MM_PERM_ENUM = 255 ; pub type _MM_PERM_ENUM = :: std :: os :: raw :: c_uint ; pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_1_2 : _MM_MANTISSA_NORM_ENUM = 0 ; pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p5_2 : _MM_MANTISSA_NORM_ENUM = 1 ; pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p5_1 : _MM_MANTISSA_NORM_ENUM = 2 ; pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p75_1p5 : _MM_MANTISSA_NORM_ENUM = 3 ; pub type _MM_MANTISSA_NORM_ENUM = :: std :: os :: raw :: c_uint ; pub const _MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_src : _MM_MANTISSA_SIGN_ENUM = 0 ; pub const _MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_zero : _MM_MANTISSA_SIGN_ENUM = 1 ; pub const _MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_nan : _MM_MANTISSA_SIGN_ENUM = 2 ; pub type _MM_MANTISSA_SIGN_ENUM = :: std :: os :: raw :: c_uint ; pub type __v2hi = [:: std :: os :: raw :: c_short ; 2usize] ; pub type __v4qi = [:: std :: os :: raw :: c_char ; 4usize] ; pub type __v2qi = [:: std :: os :: raw :: c_char ; 2usize] ; pub type __mmask32 = :: std :: os :: raw :: c_uint ; pub type __mmask64 = :: std :: os :: raw :: c_ulonglong ; pub type __m512bh = [:: std :: os :: raw :: c_short ; 32usize] ; pub type __m256bh = [:: std :: os :: raw :: c_short ; 16usize] ; pub type __bfloat16 = :: std :: os :: raw :: c_ushort ; pub type __m128bh = [:: std :: os :: raw :: c_short ; 8usize] ; pub type f4 = __m128 ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct bs_t { pub buf : * const u8 , pub pos : :: std :: os :: raw :: c_int , pub limit : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout_bs_t () { assert_eq ! (:: std :: mem :: size_of :: < bs_t > () , 16usize , concat ! ("Size of: " , stringify ! (bs_t))) ; assert_eq ! (:: std :: mem :: align_of :: < bs_t > () , 8usize , concat ! ("Alignment of " , stringify ! (bs_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < bs_t > ())) . buf as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (bs_t) , "::" , stringify ! (buf))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < bs_t > ())) . pos as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (bs_t) , "::" , stringify ! (pos))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < bs_t > ())) . limit as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (bs_t) , "::" , stringify ! (limit))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct L12_scale_info { pub scf : [f32 ; 192usize] , pub total_bands : u8 , pub stereo_bands : u8 , pub bitalloc : [u8 ; 64usize] , pub scfcod : [u8 ; 64usize] , } # [test] fn bindgen_test_layout_L12_scale_info () { assert_eq ! (:: std :: mem :: size_of :: < L12_scale_info > () , 900usize , concat ! ("Size of: " , stringify ! (L12_scale_info))) ; assert_eq ! (:: std :: mem :: align_of :: < L12_scale_info > () , 4usize , concat ! ("Alignment of " , stringify ! (L12_scale_info))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L12_scale_info > ())) . scf as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (L12_scale_info) , "::" , stringify ! (scf))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L12_scale_info > ())) . total_bands as * const _ as usize } , 768usize , concat ! ("Offset of field: " , stringify ! (L12_scale_info) , "::" , stringify ! (total_bands))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L12_scale_info > ())) . stereo_bands as * const _ as usize } , 769usize , concat ! ("Offset of field: " , stringify ! (L12_scale_info) , "::" , stringify ! (stereo_bands))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L12_scale_info > ())) . bitalloc as * const _ as usize } , 770usize , concat ! ("Offset of field: " , stringify ! (L12_scale_info) , "::" , stringify ! (bitalloc))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L12_scale_info > ())) . scfcod as * const _ as usize } , 834usize , concat ! ("Offset of field: " , stringify ! (L12_scale_info) , "::" , stringify ! (scfcod))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct L12_subband_alloc_t { pub tab_offset : u8 , pub code_tab_width : u8 , pub band_count : u8 , } # [test] fn bindgen_test_layout_L12_subband_alloc_t () { assert_eq ! (:: std :: mem :: size_of :: < L12_subband_alloc_t > () , 3usize , concat ! ("Size of: " , stringify ! (L12_subband_alloc_t))) ; assert_eq ! (:: std :: mem :: align_of :: < L12_subband_alloc_t > () , 1usize , concat ! ("Alignment of " , stringify ! (L12_subband_alloc_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L12_subband_alloc_t > ())) . tab_offset as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (L12_subband_alloc_t) , "::" , stringify ! (tab_offset))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L12_subband_alloc_t > ())) . code_tab_width as * const _ as usize } , 1usize , concat ! ("Offset of field: " , stringify ! (L12_subband_alloc_t) , "::" , stringify ! (code_tab_width))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L12_subband_alloc_t > ())) . band_count as * const _ as usize } , 2usize , concat ! ("Offset of field: " , stringify ! (L12_subband_alloc_t) , "::" , stringify ! (band_count))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct L3_gr_info_t { pub sfbtab : * const u8 , pub part_23_length : u16 , pub big_values : u16 , pub scalefac_compress : u16 , pub global_gain : u8 , pub block_type : u8 , pub mixed_block_flag : u8 , pub n_long_sfb : u8 , pub n_short_sfb : u8 , pub table_select : [u8 ; 3usize] , pub region_count : [u8 ; 3usize] , pub subblock_gain : [u8 ; 3usize] , pub preflag : u8 , pub scalefac_scale : u8 , pub count1_table : u8 , pub scfsi : u8 , } # [test] fn bindgen_test_layout_L3_gr_info_t () { assert_eq ! (:: std :: mem :: size_of :: < L3_gr_info_t > () , 32usize , concat ! ("Size of: " , stringify ! (L3_gr_info_t))) ; assert_eq ! (:: std :: mem :: align_of :: < L3_gr_info_t > () , 8usize , concat ! ("Alignment of " , stringify ! (L3_gr_info_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L3_gr_info_t > ())) . sfbtab as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (L3_gr_info_t) , "::" , stringify ! (sfbtab))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L3_gr_info_t > ())) . part_23_length as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (L3_gr_info_t) , "::" , stringify ! (part_23_length))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L3_gr_info_t > ())) . big_values as * const _ as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (L3_gr_info_t) , "::" , stringify ! (big_values))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L3_gr_info_t > ())) . scalefac_compress as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (L3_gr_info_t) , "::" , stringify ! (scalefac_compress))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L3_gr_info_t > ())) . global_gain as * const _ as usize } , 14usize , concat ! ("Offset of field: " , stringify ! (L3_gr_info_t) , "::" , stringify ! (global_gain))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L3_gr_info_t > ())) . block_type as * const _ as usize } , 15usize , concat ! ("Offset of field: " , stringify ! (L3_gr_info_t) , "::" , stringify ! (block_type))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L3_gr_info_t > ())) . mixed_block_flag as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (L3_gr_info_t) , "::" , stringify ! (mixed_block_flag))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L3_gr_info_t > ())) . n_long_sfb as * const _ as usize } , 17usize , concat ! ("Offset of field: " , stringify ! (L3_gr_info_t) , "::" , stringify ! (n_long_sfb))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L3_gr_info_t > ())) . n_short_sfb as * const _ as usize } , 18usize , concat ! ("Offset of field: " , stringify ! (L3_gr_info_t) , "::" , stringify ! (n_short_sfb))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L3_gr_info_t > ())) . table_select as * const _ as usize } , 19usize , concat ! ("Offset of field: " , stringify ! (L3_gr_info_t) , "::" , stringify ! (table_select))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L3_gr_info_t > ())) . region_count as * const _ as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (L3_gr_info_t) , "::" , stringify ! (region_count))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L3_gr_info_t > ())) . subblock_gain as * const _ as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (L3_gr_info_t) , "::" , stringify ! (subblock_gain))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L3_gr_info_t > ())) . preflag as * const _ as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (L3_gr_info_t) , "::" , stringify ! (preflag))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L3_gr_info_t > ())) . scalefac_scale as * const _ as usize } , 29usize , concat ! ("Offset of field: " , stringify ! (L3_gr_info_t) , "::" , stringify ! (scalefac_scale))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L3_gr_info_t > ())) . count1_table as * const _ as usize } , 30usize , concat ! ("Offset of field: " , stringify ! (L3_gr_info_t) , "::" , stringify ! (count1_table))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < L3_gr_info_t > ())) . scfsi as * const _ as usize } , 31usize , concat ! ("Offset of field: " , stringify ! (L3_gr_info_t) , "::" , stringify ! (scfsi))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct mp3dec_scratch_t { pub bs : bs_t , pub maindata : [u8 ; 2815usize] , pub gr_info : [L3_gr_info_t ; 4usize] , pub grbuf : [[f32 ; 576usize] ; 2usize] , pub scf : [f32 ; 40usize] , pub syn : [[f32 ; 64usize] ; 33usize] , pub ist_pos : [[u8 ; 39usize] ; 2usize] , } # [test] fn bindgen_test_layout_mp3dec_scratch_t () { assert_eq ! (:: std :: mem :: size_of :: < mp3dec_scratch_t > () , 16256usize , concat ! ("Size of: " , stringify ! (mp3dec_scratch_t))) ; assert_eq ! (:: std :: mem :: align_of :: < mp3dec_scratch_t > () , 8usize , concat ! ("Alignment of " , stringify ! (mp3dec_scratch_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_scratch_t > ())) . bs as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (mp3dec_scratch_t) , "::" , stringify ! (bs))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_scratch_t > ())) . maindata as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (mp3dec_scratch_t) , "::" , stringify ! (maindata))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_scratch_t > ())) . gr_info as * const _ as usize } , 2832usize , concat ! ("Offset of field: " , stringify ! (mp3dec_scratch_t) , "::" , stringify ! (gr_info))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_scratch_t > ())) . grbuf as * const _ as usize } , 2960usize , concat ! ("Offset of field: " , stringify ! (mp3dec_scratch_t) , "::" , stringify ! (grbuf))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_scratch_t > ())) . scf as * const _ as usize } , 7568usize , concat ! ("Offset of field: " , stringify ! (mp3dec_scratch_t) , "::" , stringify ! (scf))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_scratch_t > ())) . syn as * const _ as usize } , 7728usize , concat ! ("Offset of field: " , stringify ! (mp3dec_scratch_t) , "::" , stringify ! (syn))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_scratch_t > ())) . ist_pos as * const _ as usize } , 16176usize , concat ! ("Offset of field: " , stringify ! (mp3dec_scratch_t) , "::" , stringify ! (ist_pos))) ; } extern "C" { pub static g_pow43 : [f32 ; 145usize] ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct mp3dec_file_info_t { pub buffer : * mut mp3d_sample_t , pub samples : size_t , pub channels : :: std :: os :: raw :: c_int , pub hz : :: std :: os :: raw :: c_int , pub layer : :: std :: os :: raw :: c_int , pub avg_bitrate_kbps : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout_mp3dec_file_info_t () { assert_eq ! (:: std :: mem :: size_of :: < mp3dec_file_info_t > () , 32usize , concat ! ("Size of: " , stringify ! (mp3dec_file_info_t))) ; assert_eq ! (:: std :: mem :: align_of :: < mp3dec_file_info_t > () , 8usize , concat ! ("Alignment of " , stringify ! (mp3dec_file_info_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_file_info_t > ())) . buffer as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (mp3dec_file_info_t) , "::" , stringify ! (buffer))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_file_info_t > ())) . samples as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (mp3dec_file_info_t) , "::" , stringify ! (samples))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_file_info_t > ())) . channels as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (mp3dec_file_info_t) , "::" , stringify ! (channels))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_file_info_t > ())) . hz as * const _ as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (mp3dec_file_info_t) , "::" , stringify ! (hz))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_file_info_t > ())) . layer as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (mp3dec_file_info_t) , "::" , stringify ! (layer))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_file_info_t > ())) . avg_bitrate_kbps as * const _ as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (mp3dec_file_info_t) , "::" , stringify ! (avg_bitrate_kbps))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct mp3dec_map_info_t { pub buffer : * const u8 , pub size : size_t , } # [test] fn bindgen_test_layout_mp3dec_map_info_t () { assert_eq ! (:: std :: mem :: size_of :: < mp3dec_map_info_t > () , 16usize , concat ! ("Size of: " , stringify ! (mp3dec_map_info_t))) ; assert_eq ! (:: std :: mem :: align_of :: < mp3dec_map_info_t > () , 8usize , concat ! ("Alignment of " , stringify ! (mp3dec_map_info_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_map_info_t > ())) . buffer as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (mp3dec_map_info_t) , "::" , stringify ! (buffer))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_map_info_t > ())) . size as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (mp3dec_map_info_t) , "::" , stringify ! (size))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct mp3dec_frame_t { pub sample : u64 , pub offset : u64 , } # [test] fn bindgen_test_layout_mp3dec_frame_t () { assert_eq ! (:: std :: mem :: size_of :: < mp3dec_frame_t > () , 16usize , concat ! ("Size of: " , stringify ! (mp3dec_frame_t))) ; assert_eq ! (:: std :: mem :: align_of :: < mp3dec_frame_t > () , 8usize , concat ! ("Alignment of " , stringify ! (mp3dec_frame_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_frame_t > ())) . sample as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (mp3dec_frame_t) , "::" , stringify ! (sample))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_frame_t > ())) . offset as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (mp3dec_frame_t) , "::" , stringify ! (offset))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct mp3dec_index_t { pub frames : * mut mp3dec_frame_t , pub num_frames : size_t , pub capacity : size_t , } # [test] fn bindgen_test_layout_mp3dec_index_t () { assert_eq ! (:: std :: mem :: size_of :: < mp3dec_index_t > () , 24usize , concat ! ("Size of: " , stringify ! (mp3dec_index_t))) ; assert_eq ! (:: std :: mem :: align_of :: < mp3dec_index_t > () , 8usize , concat ! ("Alignment of " , stringify ! (mp3dec_index_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_index_t > ())) . frames as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (mp3dec_index_t) , "::" , stringify ! (frames))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_index_t > ())) . num_frames as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (mp3dec_index_t) , "::" , stringify ! (num_frames))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_index_t > ())) . capacity as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (mp3dec_index_t) , "::" , stringify ! (capacity))) ; } pub type MP3D_READ_CB = :: std :: option :: Option < unsafe extern "C" fn (buf : * mut :: std :: os :: raw :: c_void , size : size_t , user_data : * mut :: std :: os :: raw :: c_void) -> size_t > ; pub type MP3D_SEEK_CB = :: std :: option :: Option < unsafe extern "C" fn (position : u64 , user_data : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct mp3dec_io_t { pub read : MP3D_READ_CB , pub read_data : * mut :: std :: os :: raw :: c_void , pub seek : MP3D_SEEK_CB , pub seek_data : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout_mp3dec_io_t () { assert_eq ! (:: std :: mem :: size_of :: < mp3dec_io_t > () , 32usize , concat ! ("Size of: " , stringify ! (mp3dec_io_t))) ; assert_eq ! (:: std :: mem :: align_of :: < mp3dec_io_t > () , 8usize , concat ! ("Alignment of " , stringify ! (mp3dec_io_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_io_t > ())) . read as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (mp3dec_io_t) , "::" , stringify ! (read))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_io_t > ())) . read_data as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (mp3dec_io_t) , "::" , stringify ! (read_data))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_io_t > ())) . seek as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (mp3dec_io_t) , "::" , stringify ! (seek))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_io_t > ())) . seek_data as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (mp3dec_io_t) , "::" , stringify ! (seek_data))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct mp3dec_ex_t { pub mp3d : mp3dec_t , pub file : mp3dec_map_info_t , pub io : * mut mp3dec_io_t , pub index : mp3dec_index_t , pub offset : u64 , pub samples : u64 , pub detected_samples : u64 , pub cur_sample : u64 , pub start_offset : u64 , pub end_offset : u64 , pub info : mp3dec_frame_info_t , pub buffer : [mp3d_sample_t ; 2304usize] , pub input_consumed : size_t , pub input_filled : size_t , pub is_file : :: std :: os :: raw :: c_int , pub flags : :: std :: os :: raw :: c_int , pub vbr_tag_found : :: std :: os :: raw :: c_int , pub indexes_built : :: std :: os :: raw :: c_int , pub free_format_bytes : :: std :: os :: raw :: c_int , pub buffer_samples : :: std :: os :: raw :: c_int , pub buffer_consumed : :: std :: os :: raw :: c_int , pub to_skip : :: std :: os :: raw :: c_int , pub start_delay : :: std :: os :: raw :: c_int , pub last_error : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout_mp3dec_ex_t () { assert_eq ! (:: std :: mem :: size_of :: < mp3dec_ex_t > () , 11456usize , concat ! ("Size of: " , stringify ! (mp3dec_ex_t))) ; assert_eq ! (:: std :: mem :: align_of :: < mp3dec_ex_t > () , 8usize , concat ! ("Alignment of " , stringify ! (mp3dec_ex_t))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . mp3d as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (mp3d))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . file as * const _ as usize } , 6672usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (file))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . io as * const _ as usize } , 6688usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (io))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . index as * const _ as usize } , 6696usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (index))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . offset as * const _ as usize } , 6720usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (offset))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . samples as * const _ as usize } , 6728usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (samples))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . detected_samples as * const _ as usize } , 6736usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (detected_samples))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . cur_sample as * const _ as usize } , 6744usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (cur_sample))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . start_offset as * const _ as usize } , 6752usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (start_offset))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . end_offset as * const _ as usize } , 6760usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (end_offset))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . info as * const _ as usize } , 6768usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (info))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . buffer as * const _ as usize } , 6792usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (buffer))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . input_consumed as * const _ as usize } , 11400usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (input_consumed))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . input_filled as * const _ as usize } , 11408usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (input_filled))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . is_file as * const _ as usize } , 11416usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (is_file))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . flags as * const _ as usize } , 11420usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (flags))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . vbr_tag_found as * const _ as usize } , 11424usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (vbr_tag_found))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . indexes_built as * const _ as usize } , 11428usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (indexes_built))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . free_format_bytes as * const _ as usize } , 11432usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (free_format_bytes))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . buffer_samples as * const _ as usize } , 11436usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (buffer_samples))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . buffer_consumed as * const _ as usize } , 11440usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (buffer_consumed))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . to_skip as * const _ as usize } , 11444usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (to_skip))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . start_delay as * const _ as usize } , 11448usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (start_delay))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < mp3dec_ex_t > ())) . last_error as * const _ as usize } , 11452usize , concat ! ("Offset of field: " , stringify ! (mp3dec_ex_t) , "::" , stringify ! (last_error))) ; } pub type MP3D_ITERATE_CB = :: std :: option :: Option < unsafe extern "C" fn (user_data : * mut :: std :: os :: raw :: c_void , frame : * const u8 , frame_size : :: std :: os :: raw :: c_int , free_format_bytes : :: std :: os :: raw :: c_int , buf_size : size_t , offset : u64 , info : * mut mp3dec_frame_info_t) -> :: std :: os :: raw :: c_int > ; pub type MP3D_PROGRESS_CB = :: std :: option :: Option < unsafe extern "C" fn (user_data : * mut :: std :: os :: raw :: c_void , file_size : size_t , offset : u64 , info : * mut mp3dec_frame_info_t) -> :: std :: os :: raw :: c_int > ; extern "C" { pub fn mp3dec_detect_buf (buf : * const u8 , buf_size : size_t) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mp3dec_detect_cb (io : * mut mp3dec_io_t , buf : * mut u8 , buf_size : size_t) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mp3dec_load_buf (dec : * mut mp3dec_t , buf : * const u8 , buf_size : size_t , info : * mut mp3dec_file_info_t , progress_cb : MP3D_PROGRESS_CB , user_data : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mp3dec_load_cb (dec : * mut mp3dec_t , io : * mut mp3dec_io_t , buf : * mut u8 , buf_size : size_t , info : * mut mp3dec_file_info_t , progress_cb : MP3D_PROGRESS_CB , user_data : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mp3dec_iterate_buf (buf : * const u8 , buf_size : size_t , callback : MP3D_ITERATE_CB , user_data : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mp3dec_iterate_cb (io : * mut mp3dec_io_t , buf : * mut u8 , buf_size : size_t , callback : MP3D_ITERATE_CB , user_data : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mp3dec_ex_open_buf (dec : * mut mp3dec_ex_t , buf : * const u8 , buf_size : size_t , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mp3dec_ex_open_cb (dec : * mut mp3dec_ex_t , io : * mut mp3dec_io_t , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mp3dec_ex_close (dec : * mut mp3dec_ex_t) ; } extern "C" { pub fn mp3dec_ex_seek (dec : * mut mp3dec_ex_t , position : u64) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mp3dec_ex_read_frame (dec : * mut mp3dec_ex_t , buf : * mut * mut mp3d_sample_t , frame_info : * mut mp3dec_frame_info_t , max_samples : size_t) -> size_t ; } extern "C" { pub fn mp3dec_ex_read (dec : * mut mp3dec_ex_t , buf : * mut mp3d_sample_t , samples : size_t) -> size_t ; } extern "C" { pub fn mp3dec_detect (file_name : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mp3dec_load (dec : * mut mp3dec_t , file_name : * const :: std :: os :: raw :: c_char , info : * mut mp3dec_file_info_t , progress_cb : MP3D_PROGRESS_CB , user_data : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mp3dec_iterate (file_name : * const :: std :: os :: raw :: c_char , callback : MP3D_ITERATE_CB , user_data : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mp3dec_ex_open (dec : * mut mp3dec_ex_t , file_name : * const :: std :: os :: raw :: c_char , flags : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mp3dec_skip_id3 (pbuf : * mut * const u8 , pbuf_size : * mut size_t) ; } pub type va_list = __darwin_va_list ; extern "C" { pub fn renameat (arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn renamex_np (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_uint) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn renameatx_np (arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_char , arg5 : :: std :: os :: raw :: c_uint) -> :: std :: os :: raw :: c_int ; } pub type fpos_t = __darwin_off_t ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __sbuf { pub _base : * mut :: std :: os :: raw :: c_uchar , pub _size : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout___sbuf () { assert_eq ! (:: std :: mem :: size_of :: < __sbuf > () , 16usize , concat ! ("Size of: " , stringify ! (__sbuf))) ; assert_eq ! (:: std :: mem :: align_of :: < __sbuf > () , 8usize , concat ! ("Alignment of " , stringify ! (__sbuf))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sbuf > ())) . _base as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__sbuf) , "::" , stringify ! (_base))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sbuf > ())) . _size as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__sbuf) , "::" , stringify ! (_size))) ; } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __sFILEX { _unused : [u8 ; 0] , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __sFILE { pub _p : * mut :: std :: os :: raw :: c_uchar , pub _r : :: std :: os :: raw :: c_int , pub _w : :: std :: os :: raw :: c_int , pub _flags : :: std :: os :: raw :: c_short , pub _file : :: std :: os :: raw :: c_short , pub _bf : __sbuf , pub _lbfsize : :: std :: os :: raw :: c_int , pub _cookie : * mut :: std :: os :: raw :: c_void , pub _close : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int > , pub _read : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub _seek : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : fpos_t , arg3 : :: std :: os :: raw :: c_int) -> fpos_t > , pub _write : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , pub _ub : __sbuf , pub _extra : * mut __sFILEX , pub _ur : :: std :: os :: raw :: c_int , pub _ubuf : [:: std :: os :: raw :: c_uchar ; 3usize] , pub _nbuf : [:: std :: os :: raw :: c_uchar ; 1usize] , pub _lb : __sbuf , pub _blksize : :: std :: os :: raw :: c_int , pub _offset : fpos_t , } # [test] fn bindgen_test_layout___sFILE () { assert_eq ! (:: std :: mem :: size_of :: < __sFILE > () , 152usize , concat ! ("Size of: " , stringify ! (__sFILE))) ; assert_eq ! (:: std :: mem :: align_of :: < __sFILE > () , 8usize , concat ! ("Alignment of " , stringify ! (__sFILE))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _p as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_p))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _r as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_r))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _w as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_w))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _flags as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_flags))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _file as * const _ as usize } , 18usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_file))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _bf as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_bf))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _lbfsize as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_lbfsize))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _cookie as * const _ as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_cookie))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _close as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_close))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _read as * const _ as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_read))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _seek as * const _ as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_seek))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _write as * const _ as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_write))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _ub as * const _ as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_ub))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _extra as * const _ as usize } , 104usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_extra))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _ur as * const _ as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_ur))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _ubuf as * const _ as usize } , 116usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_ubuf))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _nbuf as * const _ as usize } , 119usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_nbuf))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _lb as * const _ as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_lb))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _blksize as * const _ as usize } , 136usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_blksize))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __sFILE > ())) . _offset as * const _ as usize } , 144usize , concat ! ("Offset of field: " , stringify ! (__sFILE) , "::" , stringify ! (_offset))) ; } pub type FILE = __sFILE ; extern "C" { pub static mut __stdinp : * mut FILE ; } extern "C" { pub static mut __stdoutp : * mut FILE ; } extern "C" { pub static mut __stderrp : * mut FILE ; } extern "C" { pub fn clearerr (arg1 : * mut FILE) ; } extern "C" { pub fn fclose (arg1 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn feof (arg1 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ferror (arg1 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fflush (arg1 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgetc (arg1 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgetpos (arg1 : * mut FILE , arg2 : * mut fpos_t) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgets (arg1 : * mut :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut FILE) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn fopen (__filename : * const :: std :: os :: raw :: c_char , __mode : * const :: std :: os :: raw :: c_char) -> * mut FILE ; } extern "C" { pub fn fprintf (arg1 : * mut FILE , arg2 : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fputc (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fputs (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fread (__ptr : * mut :: std :: os :: raw :: c_void , __size : :: std :: os :: raw :: c_ulong , __nitems : :: std :: os :: raw :: c_ulong , __stream : * mut FILE) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn freopen (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut FILE) -> * mut FILE ; } extern "C" { pub fn fscanf (arg1 : * mut FILE , arg2 : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fseek (arg1 : * mut FILE , arg2 : :: std :: os :: raw :: c_long , arg3 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fsetpos (arg1 : * mut FILE , arg2 : * const fpos_t) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ftell (arg1 : * mut FILE) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn fwrite (__ptr : * const :: std :: os :: raw :: c_void , __size : :: std :: os :: raw :: c_ulong , __nitems : :: std :: os :: raw :: c_ulong , __stream : * mut FILE) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn getc (arg1 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getchar () -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn gets (arg1 : * mut :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn perror (arg1 : * const :: std :: os :: raw :: c_char) ; } extern "C" { pub fn printf (arg1 : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putc (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putchar (arg1 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn puts (arg1 : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn remove (arg1 : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn rename (__old : * const :: std :: os :: raw :: c_char , __new : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn rewind (arg1 : * mut FILE) ; } extern "C" { pub fn scanf (arg1 : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setbuf (arg1 : * mut FILE , arg2 : * mut :: std :: os :: raw :: c_char) ; } extern "C" { pub fn setvbuf (arg1 : * mut FILE , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : size_t) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sprintf (arg1 : * mut :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sscanf (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn tmpfile () -> * mut FILE ; } extern "C" { pub fn tmpnam (arg1 : * mut :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ungetc (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vfprintf (arg1 : * mut FILE , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut __va_list_tag) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vprintf (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut __va_list_tag) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vsprintf (arg1 : * mut :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut __va_list_tag) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ctermid (arg1 : * mut :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn fdopen (arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char) -> * mut FILE ; } extern "C" { pub fn fileno (arg1 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pclose (arg1 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn popen (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char) -> * mut FILE ; } extern "C" { pub fn __srget (arg1 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __svfscanf (arg1 : * mut FILE , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut __va_list_tag) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __swbuf (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn flockfile (arg1 : * mut FILE) ; } extern "C" { pub fn ftrylockfile (arg1 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn funlockfile (arg1 : * mut FILE) ; } extern "C" { pub fn getc_unlocked (arg1 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getchar_unlocked () -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putc_unlocked (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putchar_unlocked (arg1 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getw (arg1 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putw (arg1 : :: std :: os :: raw :: c_int , arg2 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn tempnam (__dir : * const :: std :: os :: raw :: c_char , __prefix : * const :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } pub type off_t = __darwin_off_t ; extern "C" { pub fn fseeko (__stream : * mut FILE , __offset : off_t , __whence : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ftello (__stream : * mut FILE) -> off_t ; } extern "C" { pub fn snprintf (__str : * mut :: std :: os :: raw :: c_char , __size : :: std :: os :: raw :: c_ulong , __format : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vfscanf (__stream : * mut FILE , __format : * const :: std :: os :: raw :: c_char , arg1 : * mut __va_list_tag) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vscanf (__format : * const :: std :: os :: raw :: c_char , arg1 : * mut __va_list_tag) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vsnprintf (__str : * mut :: std :: os :: raw :: c_char , __size : :: std :: os :: raw :: c_ulong , __format : * const :: std :: os :: raw :: c_char , arg1 : * mut __va_list_tag) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vsscanf (__str : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , arg1 : * mut __va_list_tag) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn dprintf (arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vdprintf (arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut __va_list_tag) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getdelim (__linep : * mut * mut :: std :: os :: raw :: c_char , __linecapp : * mut size_t , __delimiter : :: std :: os :: raw :: c_int , __stream : * mut FILE) -> ssize_t ; } extern "C" { pub fn getline (__linep : * mut * mut :: std :: os :: raw :: c_char , __linecapp : * mut size_t , __stream : * mut FILE) -> ssize_t ; } extern "C" { pub fn fmemopen (__buf : * mut :: std :: os :: raw :: c_void , __size : size_t , __mode : * const :: std :: os :: raw :: c_char) -> * mut FILE ; } extern "C" { pub fn open_memstream (__bufp : * mut * mut :: std :: os :: raw :: c_char , __sizep : * mut size_t) -> * mut FILE ; } extern "C" { pub static sys_nerr : :: std :: os :: raw :: c_int ; } extern "C" { pub static mut sys_errlist : [* const :: std :: os :: raw :: c_char ; 0usize] ; } extern "C" { pub fn asprintf (arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ctermid_r (arg1 : * mut :: std :: os :: raw :: c_char) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn fgetln (arg1 : * mut FILE , arg2 : * mut size_t) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn fmtcheck (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn fpurge (arg1 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setbuffer (arg1 : * mut FILE , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int) ; } extern "C" { pub fn setlinebuf (arg1 : * mut FILE) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vasprintf (arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut __va_list_tag) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn zopen (arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int) -> * mut FILE ; } extern "C" { pub fn funopen (arg1 : * const :: std :: os :: raw :: c_void , arg2 : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , arg3 : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int > , arg4 : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * mut :: std :: os :: raw :: c_void , arg2 : fpos_t , arg3 : :: std :: os :: raw :: c_int) -> fpos_t > , arg5 : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int >) -> * mut FILE ; } extern "C" { pub fn __sprintf_chk (arg1 : * mut :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int , arg3 : size_t , arg4 : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __snprintf_chk (arg1 : * mut :: std :: os :: raw :: c_char , arg2 : size_t , arg3 : :: std :: os :: raw :: c_int , arg4 : size_t , arg5 : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __vsprintf_chk (arg1 : * mut :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int , arg3 : size_t , arg4 : * const :: std :: os :: raw :: c_char , arg5 : * mut __va_list_tag) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __vsnprintf_chk (arg1 : * mut :: std :: os :: raw :: c_char , arg2 : size_t , arg3 : :: std :: os :: raw :: c_int , arg4 : size_t , arg5 : * const :: std :: os :: raw :: c_char , arg6 : * mut __va_list_tag) -> :: std :: os :: raw :: c_int ; } pub type __builtin_va_list = [__va_list_tag ; 1usize] ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct __va_list_tag { pub gp_offset : :: std :: os :: raw :: c_uint , pub fp_offset : :: std :: os :: raw :: c_uint , pub overflow_arg_area : * mut :: std :: os :: raw :: c_void , pub reg_save_area : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout___va_list_tag () { assert_eq ! (:: std :: mem :: size_of :: < __va_list_tag > () , 24usize , concat ! ("Size of: " , stringify ! (__va_list_tag))) ; assert_eq ! (:: std :: mem :: align_of :: < __va_list_tag > () , 8usize , concat ! ("Alignment of " , stringify ! (__va_list_tag))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __va_list_tag > ())) . gp_offset as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (__va_list_tag) , "::" , stringify ! (gp_offset))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __va_list_tag > ())) . fp_offset as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (__va_list_tag) , "::" , stringify ! (fp_offset))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __va_list_tag > ())) . overflow_arg_area as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (__va_list_tag) , "::" , stringify ! (overflow_arg_area))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < __va_list_tag > ())) . reg_save_area as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (__va_list_tag) , "::" , stringify ! (reg_save_area))) ; }